

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Jan 16 02:33:29 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1,group=2
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=2
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=2
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=2
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=2
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1,group=2
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1,group=2
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42  0000                     
    43                           ; Version 2.40
    44                           ; Generated 17/11/2021 GMT
    45                           ; 
    46                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution. Publication is not required when
    60                           ;        this file is used in an embedded application.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4520 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0FE0                     bsr             equ	4064
    79  0FE9                     fsr0            equ	4073
    80  0FEA                     fsr0h           equ	4074
    81  0FE9                     fsr0l           equ	4073
    82  0FE1                     fsr1            equ	4065
    83  0FE2                     fsr1h           equ	4066
    84  0FE1                     fsr1l           equ	4065
    85  0FD9                     fsr2            equ	4057
    86  0FDA                     fsr2h           equ	4058
    87  0FD9                     fsr2l           equ	4057
    88  0FEF                     indf0           equ	4079
    89  0FE7                     indf1           equ	4071
    90  0FDF                     indf2           equ	4063
    91  0FF2                     intcon          equ	4082
    92  0000                     nvmcon          equ	0
    93  0FF9                     pcl             equ	4089
    94  0FFA                     pclath          equ	4090
    95  0FFB                     pclatu          equ	4091
    96  0FEB                     plusw0          equ	4075
    97  0FE3                     plusw1          equ	4067
    98  0FDB                     plusw2          equ	4059
    99  0FED                     postdec0        equ	4077
   100  0FE5                     postdec1        equ	4069
   101  0FDD                     postdec2        equ	4061
   102  0FEE                     postinc0        equ	4078
   103  0FE6                     postinc1        equ	4070
   104  0FDE                     postinc2        equ	4062
   105  0FEC                     preinc0         equ	4076
   106  0FE4                     preinc1         equ	4068
   107  0FDC                     preinc2         equ	4060
   108  0FF3                     prod            equ	4083
   109  0FF4                     prodh           equ	4084
   110  0FF3                     prodl           equ	4083
   111  0FD8                     status          equ	4056
   112  0FF5                     tablat          equ	4085
   113  0FF6                     tblptr          equ	4086
   114  0FF7                     tblptrh         equ	4087
   115  0FF6                     tblptrl         equ	4086
   116  0FF8                     tblptru         equ	4088
   117  0FFD                     tosl            equ	4093
   118  0FE8                     wreg            equ	4072
   119  0F80                     PORTA           equ	3968	;# 
   120  0F81                     PORTB           equ	3969	;# 
   121  0F82                     PORTC           equ	3970	;# 
   122  0F83                     PORTD           equ	3971	;# 
   123  0F84                     PORTE           equ	3972	;# 
   124  0F89                     LATA            equ	3977	;# 
   125  0F8A                     LATB            equ	3978	;# 
   126  0F8B                     LATC            equ	3979	;# 
   127  0F8C                     LATD            equ	3980	;# 
   128  0F8D                     LATE            equ	3981	;# 
   129  0F92                     TRISA           equ	3986	;# 
   130  0F92                     DDRA            equ	3986	;# 
   131  0F93                     TRISB           equ	3987	;# 
   132  0F93                     DDRB            equ	3987	;# 
   133  0F94                     TRISC           equ	3988	;# 
   134  0F94                     DDRC            equ	3988	;# 
   135  0F95                     TRISD           equ	3989	;# 
   136  0F95                     DDRD            equ	3989	;# 
   137  0F96                     TRISE           equ	3990	;# 
   138  0F96                     DDRE            equ	3990	;# 
   139  0F9B                     OSCTUNE         equ	3995	;# 
   140  0F9D                     PIE1            equ	3997	;# 
   141  0F9E                     PIR1            equ	3998	;# 
   142  0F9F                     IPR1            equ	3999	;# 
   143  0FA0                     PIE2            equ	4000	;# 
   144  0FA1                     PIR2            equ	4001	;# 
   145  0FA2                     IPR2            equ	4002	;# 
   146  0FA6                     EECON1          equ	4006	;# 
   147  0FA7                     EECON2          equ	4007	;# 
   148  0FA8                     EEDATA          equ	4008	;# 
   149  0FA9                     EEADR           equ	4009	;# 
   150  0FAB                     RCSTA           equ	4011	;# 
   151  0FAB                     RCSTA1          equ	4011	;# 
   152  0FAC                     TXSTA           equ	4012	;# 
   153  0FAC                     TXSTA1          equ	4012	;# 
   154  0FAD                     TXREG           equ	4013	;# 
   155  0FAD                     TXREG1          equ	4013	;# 
   156  0FAE                     RCREG           equ	4014	;# 
   157  0FAE                     RCREG1          equ	4014	;# 
   158  0FAF                     SPBRG           equ	4015	;# 
   159  0FAF                     SPBRG1          equ	4015	;# 
   160  0FB0                     SPBRGH          equ	4016	;# 
   161  0FB1                     T3CON           equ	4017	;# 
   162  0FB2                     TMR3            equ	4018	;# 
   163  0FB2                     TMR3L           equ	4018	;# 
   164  0FB3                     TMR3H           equ	4019	;# 
   165  0FB4                     CMCON           equ	4020	;# 
   166  0FB5                     CVRCON          equ	4021	;# 
   167  0FB6                     ECCP1AS         equ	4022	;# 
   168  0FB6                     ECCPAS          equ	4022	;# 
   169  0FB7                     PWM1CON         equ	4023	;# 
   170  0FB7                     ECCP1DEL        equ	4023	;# 
   171  0FB8                     BAUDCON         equ	4024	;# 
   172  0FB8                     BAUDCTL         equ	4024	;# 
   173  0FBA                     CCP2CON         equ	4026	;# 
   174  0FBB                     CCPR2           equ	4027	;# 
   175  0FBB                     CCPR2L          equ	4027	;# 
   176  0FBC                     CCPR2H          equ	4028	;# 
   177  0FBD                     CCP1CON         equ	4029	;# 
   178  0FBE                     CCPR1           equ	4030	;# 
   179  0FBE                     CCPR1L          equ	4030	;# 
   180  0FBF                     CCPR1H          equ	4031	;# 
   181  0FC0                     ADCON2          equ	4032	;# 
   182  0FC1                     ADCON1          equ	4033	;# 
   183  0FC2                     ADCON0          equ	4034	;# 
   184  0FC3                     ADRES           equ	4035	;# 
   185  0FC3                     ADRESL          equ	4035	;# 
   186  0FC4                     ADRESH          equ	4036	;# 
   187  0FC5                     SSPCON2         equ	4037	;# 
   188  0FC6                     SSPCON1         equ	4038	;# 
   189  0FC7                     SSPSTAT         equ	4039	;# 
   190  0FC8                     SSPADD          equ	4040	;# 
   191  0FC9                     SSPBUF          equ	4041	;# 
   192  0FCA                     T2CON           equ	4042	;# 
   193  0FCB                     PR2             equ	4043	;# 
   194  0FCB                     MEMCON          equ	4043	;# 
   195  0FCC                     TMR2            equ	4044	;# 
   196  0FCD                     T1CON           equ	4045	;# 
   197  0FCE                     TMR1            equ	4046	;# 
   198  0FCE                     TMR1L           equ	4046	;# 
   199  0FCF                     TMR1H           equ	4047	;# 
   200  0FD0                     RCON            equ	4048	;# 
   201  0FD1                     WDTCON          equ	4049	;# 
   202  0FD2                     HLVDCON         equ	4050	;# 
   203  0FD2                     LVDCON          equ	4050	;# 
   204  0FD3                     OSCCON          equ	4051	;# 
   205  0FD5                     T0CON           equ	4053	;# 
   206  0FD6                     TMR0            equ	4054	;# 
   207  0FD6                     TMR0L           equ	4054	;# 
   208  0FD7                     TMR0H           equ	4055	;# 
   209  0FD8                     STATUS          equ	4056	;# 
   210  0FD9                     FSR2            equ	4057	;# 
   211  0FD9                     FSR2L           equ	4057	;# 
   212  0FDA                     FSR2H           equ	4058	;# 
   213  0FDB                     PLUSW2          equ	4059	;# 
   214  0FDC                     PREINC2         equ	4060	;# 
   215  0FDD                     POSTDEC2        equ	4061	;# 
   216  0FDE                     POSTINC2        equ	4062	;# 
   217  0FDF                     INDF2           equ	4063	;# 
   218  0FE0                     BSR             equ	4064	;# 
   219  0FE1                     FSR1            equ	4065	;# 
   220  0FE1                     FSR1L           equ	4065	;# 
   221  0FE2                     FSR1H           equ	4066	;# 
   222  0FE3                     PLUSW1          equ	4067	;# 
   223  0FE4                     PREINC1         equ	4068	;# 
   224  0FE5                     POSTDEC1        equ	4069	;# 
   225  0FE6                     POSTINC1        equ	4070	;# 
   226  0FE7                     INDF1           equ	4071	;# 
   227  0FE8                     WREG            equ	4072	;# 
   228  0FE9                     FSR0            equ	4073	;# 
   229  0FE9                     FSR0L           equ	4073	;# 
   230  0FEA                     FSR0H           equ	4074	;# 
   231  0FEB                     PLUSW0          equ	4075	;# 
   232  0FEC                     PREINC0         equ	4076	;# 
   233  0FED                     POSTDEC0        equ	4077	;# 
   234  0FEE                     POSTINC0        equ	4078	;# 
   235  0FEF                     INDF0           equ	4079	;# 
   236  0FF0                     INTCON3         equ	4080	;# 
   237  0FF1                     INTCON2         equ	4081	;# 
   238  0FF2                     INTCON          equ	4082	;# 
   239  0FF3                     PROD            equ	4083	;# 
   240  0FF3                     PRODL           equ	4083	;# 
   241  0FF4                     PRODH           equ	4084	;# 
   242  0FF5                     TABLAT          equ	4085	;# 
   243  0FF6                     TBLPTR          equ	4086	;# 
   244  0FF6                     TBLPTRL         equ	4086	;# 
   245  0FF7                     TBLPTRH         equ	4087	;# 
   246  0FF8                     TBLPTRU         equ	4088	;# 
   247  0FF9                     PCLAT           equ	4089	;# 
   248  0FF9                     PC              equ	4089	;# 
   249  0FF9                     PCL             equ	4089	;# 
   250  0FFA                     PCLATH          equ	4090	;# 
   251  0FFB                     PCLATU          equ	4091	;# 
   252  0FFC                     STKPTR          equ	4092	;# 
   253  0FFD                     TOS             equ	4093	;# 
   254  0FFD                     TOSL            equ	4093	;# 
   255  0FFE                     TOSH            equ	4094	;# 
   256  0FFF                     TOSU            equ	4095	;# 
   257  7D5C                     _CREN           set	32092
   258  7CF5                     _RCIF           set	31989
   259  0FC3                     _ADRESL         set	4035
   260  0FC4                     _ADRESH         set	4036
   261  0FCA                     _T2CON          set	4042
   262  0F9F                     _IPR1bits       set	3999
   263  0FAF                     _SPBRG          set	4015
   264  0FB8                     _BAUDCONbits    set	4024
   265  0FD0                     _RCONbits       set	4048
   266  0F9E                     _PIR1bits       set	3998
   267  0F9D                     _PIE1bits       set	3997
   268  0FF2                     _INTCONbits     set	4082
   269  0F8B                     _LATC           set	3979
   270  0F89                     _LATA           set	3977
   271  0F94                     _TRISC          set	3988
   272  0F93                     _TRISB          set	3987
   273  0F92                     _TRISA          set	3986
   274  0F94                     _TRISCbits      set	3988
   275  0FCB                     _PR2            set	4043
   276  0FBD                     _CCP1CONbits    set	4029
   277  0FCA                     _T2CONbits      set	4042
   278  0FC0                     _ADCON2bits     set	4032
   279  0FC2                     _ADCON0bits     set	4034
   280  0FC1                     _ADCON1bits     set	4033
   281  0F92                     _TRISAbits      set	3986
   282  0FD3                     _OSCCONbits     set	4051
   283  0FAB                     _RCSTAbits      set	4011
   284  0FAE                     _RCREG          set	4014
   285  0FAD                     _TXREG          set	4013
   286  0FAC                     _TXSTAbits      set	4012
   287                           
   288                           	psect	smallconst
   289  0000'                    __psmallconst:
   290                           	callstack 0
   291  0000' 00                 	db	0
   292  0001' 49                 	db	73	;'I'
   293  0002' 6E                 	db	110	;'n'
   294  0003' 70                 	db	112	;'p'
   295  0004' 75                 	db	117	;'u'
   296  0005' 74                 	db	116	;'t'
   297  0006' 20                 	db	32
   298  0007' 53                 	db	83	;'S'
   299  0008' 74                 	db	116	;'t'
   300  0009' 65                 	db	101	;'e'
   301  000A' 70                 	db	112	;'p'
   302  000B' 20                 	db	32
   303  000C' 4C                 	db	76	;'L'
   304  000D' 65                 	db	101	;'e'
   305  000E' 6E                 	db	110	;'n'
   306  000F' 67                 	db	103	;'g'
   307  0010' 74                 	db	116	;'t'
   308  0011' 68                 	db	104	;'h'
   309  0012' 3A                 	db	58	;':'
   310  0013' 20                 	db	32
   311  0014' 00                 	db	0
   312  0015'                    STR_2:
   313  0015' 54                 	db	84	;'T'
   314  0016' 6F                 	db	111	;'o'
   315  0017' 74                 	db	116	;'t'
   316  0018' 61                 	db	97	;'a'
   317  0019' 6C                 	db	108	;'l'
   318  001A' 20                 	db	32
   319  001B' 4C                 	db	76	;'L'
   320  001C' 65                 	db	101	;'e'
   321  001D' 6E                 	db	110	;'n'
   322  001E' 67                 	db	103	;'g'
   323  001F' 74                 	db	116	;'t'
   324  0020' 68                 	db	104	;'h'
   325  0021' 3A                 	db	58	;':'
   326  0022' 20                 	db	32
   327  0023' 00                 	db	0
   328  0022'                    STR_3           equ	STR_2+13
   329  0022'                    STR_4           equ	STR_2+13
   330  0022'                    STR_5           equ	STR_2+13
   331  0024' 00                 	db	0	; dummy byte at the end
   332  0002                     __activetblptr  equ	2
   333                           
   334                           ; #config settings
   335                           
   336                           	psect	cinit
   337  0000'                    __pcinit:
   338                           	callstack 0
   339  0000'                    start_initialization:
   340                           	callstack 0
   341  0000'                    __initialization:
   342                           	callstack 0
   343                           
   344                           ; Clear objects allocated to BANK3 (200 bytes)
   345  0000' EE00' F000'        	lfsr	0,__pbssBANK3
   346  0004' 0EC8               	movlw	200
   347  0006'                    clear_0:
   348  0006' 6AEE               	clrf	postinc0,c
   349  0008' 06E8               	decf	wreg,f,c
   350  000A' E1FD               	bnz	clear_0
   351                           
   352                           ; Clear objects allocated to BANK2 (100 bytes)
   353  000C' EE00' F000'        	lfsr	0,__pbssBANK2
   354  0010' 0E64               	movlw	100
   355  0012'                    clear_1:
   356  0012' 6AEE               	clrf	postinc0,c
   357  0014' 06E8               	decf	wreg,f,c
   358  0016' E1FD               	bnz	clear_1
   359                           
   360                           ; Clear objects allocated to COMRAM (7 bytes)
   361  0018' EE00' F000'        	lfsr	0,__pbssCOMRAM
   362  001C' 0E07               	movlw	7
   363  001E'                    clear_2:
   364  001E' 6AEE               	clrf	postinc0,c
   365  0020' 06E8               	decf	wreg,f,c
   366  0022' E1FD               	bnz	clear_2
   367  0024'                    end_of_initialization:
   368                           	callstack 0
   369  0024'                    __end_of__initialization:
   370                           	callstack 0
   371  0024' 9000'              	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   372  0026' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   373  0028' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
   374  002A' 6EF8               	movwf	tblptru,c
   375  002C' 0100               	movlb	0
   376  002E' EF00' F000'        	goto	_main	;jump to C main() function
   377                           
   378                           	psect	bssCOMRAM
   379  0000'                    __pbssCOMRAM:
   380                           	callstack 0
   381  0000'                    strtok@p:
   382                           	callstack 0
   383  0000'                    	ds	2
   384  0002'                    _cnt:
   385                           	callstack 0
   386  0002'                    	ds	2
   387  0004'                    _buffer_size:
   388                           	callstack 0
   389  0004'                    	ds	2
   390  0006'                    _btn_interr:
   391                           	callstack 0
   392  0006'                    	ds	1
   393                           
   394                           	psect	bssBANK2
   395  0000'                    __pbssBANK2:
   396                           	callstack 0
   397  0000'                    _buffer:
   398                           	callstack 0
   399  0000'                    	ds	100
   400                           
   401                           	psect	bssBANK3
   402  0000'                    __pbssBANK3:
   403                           	callstack 0
   404  0000'                    	ds	100
   405  0064'                    	ds	100
   406                           
   407                           	psect	cstackBANK2
   408  0000'                    __pcstackBANK2:
   409                           	callstack 0
   410  0000'                    main@str:
   411                           	callstack 0
   412                           
   413                           ; 100 bytes @ 0x0
   414  0000'                    	ds	100
   415                           
   416                           	psect	cstackBANK1
   417  0000'                    __pcstackBANK1:
   418                           	callstack 0
   419  0000'                    ParsingData@str:
   420                           	callstack 0
   421                           
   422                           ; 100 bytes @ 0x0
   423  0000'                    	ds	100
   424  0064'                    ParsingData@input:
   425                           	callstack 0
   426                           
   427                           ; 100 bytes @ 0x64
   428  0064'                    	ds	100
   429  00C8'                    ParsingData@step:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0xC8
   433  00C8'                    	ds	2
   434  00CA'                    ParsingData@heartRate:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0xCA
   438  00CA'                    	ds	2
   439  00CC'                    ParsingData@temp:
   440                           	callstack 0
   441                           
   442                           ; 2 bytes @ 0xCC
   443  00CC'                    	ds	2
   444  00CE'                    ParsingData@token:
   445                           	callstack 0
   446                           
   447                           ; 2 bytes @ 0xCE
   448  00CE'                    	ds	2
   449                           
   450                           	psect	cstackBANK0
   451  0000'                    __pcstackBANK0:
   452                           	callstack 0
   453  0000'                    print_number@tmp:
   454                           	callstack 0
   455                           
   456                           ; 100 bytes @ 0x0
   457  0000'                    	ds	100
   458  0064'                    print_number@i:
   459                           	callstack 0
   460                           
   461                           ; 2 bytes @ 0x64
   462  0064'                    	ds	2
   463                           
   464                           	psect	cstackCOMRAM
   465  0000'                    __pcstackCOMRAM:
   466                           	callstack 0
   467  0000'                    ?_variable_register_changed:
   468                           	callstack 0
   469  0000'                    ?_keyboard_input:
   470                           	callstack 0
   471  0000'                    ??_H_ISR:
   472                           
   473                           ; 1 bytes @ 0x0
   474  0000'                    	ds	16
   475  0010'                    H_ISR@value:
   476                           	callstack 0
   477                           
   478                           ; 2 bytes @ 0x10
   479  0010'                    	ds	2
   480  0012'                    i1putch@data:
   481                           	callstack 0
   482  0012'                    
   483                           ; 1 bytes @ 0x12
   484  0012'                    	ds	1
   485  0013'                    ??_MyusartRead:
   486                           
   487                           ; 1 bytes @ 0x13
   488  0013'                    	ds	1
   489  0014'                    MyusartRead@data:
   490                           	callstack 0
   491                           
   492                           ; 1 bytes @ 0x14
   493  0014'                    	ds	1
   494  0015'                    ??_Lo_ISR:
   495                           
   496                           ; 1 bytes @ 0x15
   497  0015'                    	ds	5
   498  001A'                    ?_strlen:
   499                           	callstack 0
   500  001A'                    ?_atoi:
   501                           	callstack 0
   502  001A'                    ?___awdiv:
   503                           	callstack 0
   504  001A'                    ?___awmod:
   505                           	callstack 0
   506  001A'                    putch@data:
   507                           	callstack 0
   508  001A'                    reverse@first:
   509                           	callstack 0
   510  001A'                    strlen@s:
   511                           	callstack 0
   512  001A'                    strchr@s:
   513                           	callstack 0
   514  001A'                    ClearBuffer@i:
   515                           	callstack 0
   516  001A'                    ___awdiv@dividend:
   517                           	callstack 0
   518  001A'                    ___awmod@dividend:
   519                           	callstack 0
   520  001A'                    atoi@s:
   521                           	callstack 0
   522  001A'                    strcpy@dest:
   523                           	callstack 0
   524  001A'                    
   525                           ; 1 bytes @ 0x1A
   526  001A'                    	ds	1
   527  001B'                    reverse@last:
   528                           	callstack 0
   529  001B'                    strchr@c:
   530                           	callstack 0
   531                           
   532                           ; 2 bytes @ 0x1B
   533  001B'                    	ds	1
   534  001C'                    reverse@tmp:
   535                           	callstack 0
   536  001C'                    strlen@a:
   537                           	callstack 0
   538  001C'                    ___awdiv@divisor:
   539                           	callstack 0
   540  001C'                    ___awmod@divisor:
   541                           	callstack 0
   542  001C'                    strcpy@src:
   543                           	callstack 0
   544  001C'                    ??_atoi:
   545  001C'                    
   546                           ; 1 bytes @ 0x1C
   547  001C'                    	ds	1
   548  001D'                    ??_strchr:
   549                           
   550                           ; 1 bytes @ 0x1D
   551  001D'                    	ds	1
   552  001E'                    ?_strspn:
   553                           	callstack 0
   554  001E'                    ?_strcspn:
   555                           	callstack 0
   556  001E'                    ___awdiv@counter:
   557                           	callstack 0
   558  001E'                    ___awmod@counter:
   559                           	callstack 0
   560  001E'                    strcspn@s:
   561                           	callstack 0
   562  001E'                    strspn@s:
   563                           	callstack 0
   564  001E'                    ??_strcpy:
   565  001E'                    
   566                           ; 1 bytes @ 0x1E
   567  001E'                    	ds	1
   568  001F'                    ___awdiv@sign:
   569                           	callstack 0
   570  001F'                    ___awmod@sign:
   571                           	callstack 0
   572  001F'                    atoi@neg:
   573                           	callstack 0
   574                           
   575                           ; 1 bytes @ 0x1F
   576  001F'                    	ds	1
   577  0020'                    strcspn@c:
   578                           	callstack 0
   579  0020'                    strspn@c:
   580                           	callstack 0
   581  0020'                    ___awdiv@quotient:
   582                           	callstack 0
   583  0020'                    atoi@n:
   584                           	callstack 0
   585  0020'                    strcpy@d:
   586                           	callstack 0
   587                           
   588                           ; 2 bytes @ 0x20
   589  0020'                    	ds	1
   590  0021'                    ??_strspn:
   591  0021'                    ??_strcspn:
   592                           
   593                           ; 1 bytes @ 0x21
   594  0021'                    	ds	1
   595  0022'                    ?_GetString:
   596                           	callstack 0
   597  0022'                    GetString@str:
   598                           	callstack 0
   599  0022'                    itoa@n:
   600                           	callstack 0
   601  0022'                    strcspn@i:
   602                           	callstack 0
   603  0022'                    strspn@i:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x22
   607  0022'                    	ds	2
   608  0024'                    ?_strtok:
   609                           	callstack 0
   610  0024'                    itoa@s:
   611                           	callstack 0
   612  0024'                    strtok@s:
   613                           	callstack 0
   614  0024'                    
   615                           ; 1 bytes @ 0x24
   616  0024'                    	ds	1
   617  0025'                    ??_itoa:
   618                           
   619                           ; 1 bytes @ 0x25
   620  0025'                    	ds	1
   621  0026'                    strtok@sep:
   622                           	callstack 0
   623  0026'                    itoa@sign:
   624                           	callstack 0
   625                           
   626                           ; 2 bytes @ 0x26
   627  0026'                    	ds	1
   628  0027'                    
   629                           ; 1 bytes @ 0x27
   630  0027'                    	ds	1
   631  0028'                    itoa@i:
   632                           	callstack 0
   633                           
   634                           ; 2 bytes @ 0x28
   635  0028'                    	ds	2
   636  002A'                    print_number@num:
   637                           	callstack 0
   638                           
   639                           ; 2 bytes @ 0x2A
   640  002A'                    	ds	2
   641  002C'                    
   642                           ; 1 bytes @ 0x2C
   643 ;;
   644 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   645 ;;
   646 ;; *************** function _main *****************
   647 ;; Defined at:
   648 ;;		line 344 in file "newmain.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;		None
   651 ;; Auto vars:     Size  Location     Type
   652 ;;  str           100    0[BANK2 ] unsigned char [100]
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, bsr, status,2, status,0, pcl, pclath, pclatu, btemp, b
      +temp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, 
      +btemp+14, btemp+15, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, 
      +btemp+26, btemp+27, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, cs
      +tack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   662 ;;      Params:         0       0       0       0       0       0       0
   663 ;;      Locals:         0       0       0     100       0       0       0
   664 ;;      Temps:          0       0       0       0       0       0       0
   665 ;;      Totals:         0       0       0     100       0       0       0
   666 ;;Total ram usage:      100 bytes
   667 ;; Hardware stack levels required when called: 9
   668 ;; This function calls:
   669 ;;		_ClearBuffer
   670 ;;		_GetString
   671 ;;		_Initialize
   672 ;;		_ParsingData
   673 ;;		_keyboard_input
   674 ;; This function is called by:
   675 ;;		Startup code after reset
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679                           	psect	text0
   680  0000'                    __ptext0:
   681                           	callstack 0
   682  0000'                    _main:
   683                           	callstack 22
   684  0000'                    
   685                           ;newmain.c: 345:     Initialize();
   686  0000' EC00' F000'        	call	_Initialize	;wreg free
   687  0004'                    
   688                           ;newmain.c: 347:     char str[100];;newmain.c: 348:     ClearBuffer();
   689  0004' EC00' F000'        	call	_ClearBuffer	;wreg free
   690  0008'                    l2037:
   691                           
   692                           ;newmain.c: 352:         ParsingData();
   693  0008' EC00' F000'        	call	_ParsingData	;wreg free
   694  000C'                    
   695                           ;newmain.c: 353:         if (GetString(str)) keyboard_input(str);
   696  000C' 0E00'              	movlw	low main@str
   697  000E' 6E00'              	movwf	GetString@str^0,c
   698  0010' 0E00'              	movlw	high main@str
   699  0012' 6E00'              	movwf	(GetString@str+1)^0,c
   700  0014' EC00' F000'        	call	_GetString	;wreg free
   701  0018' 5000'              	movf	?_GetString^0,w,c
   702  001A' 1000'              	iorwf	(?_GetString+1)^0,w,c
   703  001C' B4D8               	btfsc	status,2,c
   704  001E' EF00' F000'        	goto	u1431
   705  0022' EF00' F000'        	goto	u1430
   706  0026'                    u1431:
   707  0026' EF00' F000'        	goto	l2043
   708  002A'                    u1430:
   709  002A' 0E00'              	movlw	low main@str
   710  002C' 6E00'              	movwf	?_keyboard_input^0,c
   711  002E' 0E00'              	movlw	high main@str
   712  0030' 6E00'              	movwf	(?_keyboard_input+1)^0,c
   713  0032' EC00' F000'        	call	_keyboard_input	;wreg free
   714  0036'                    l2043:
   715                           
   716                           ;newmain.c: 354:         if (ADCON0bits.GO == 0) ADCON0bits.GO = 1;
   717  0036' B2C2               	btfsc	194,1,c	;volatile
   718  0038' EF00' F000'        	goto	u1441
   719  003C' EF00' F000'        	goto	u1440
   720  0040'                    u1441:
   721  0040' EF00' F000'        	goto	l2037
   722  0044'                    u1440:
   723  0044' 82C2               	bsf	194,1,c	;volatile
   724  0046' EF00' F000'        	goto	l2037
   725  004A' EF00' F000'        	goto	start
   726  004E'                    __end_of_main:
   727                           	callstack 0
   728                           
   729 ;; *************** function _ParsingData *****************
   730 ;; Defined at:
   731 ;;		line 320 in file "newmain.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;		None
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  input         100  100[BANK1 ] unsigned char [100]
   736 ;;  token           2  206[BANK1 ] PTR unsigned char 
   737 ;;		 -> NULL(0), ParsingData@input(100), 
   738 ;;  str           100    0[BANK1 ] unsigned char [100]
   739 ;;  temp            2  204[BANK1 ] int 
   740 ;;  heartRate       2  202[BANK1 ] int 
   741 ;;  step            2  200[BANK1 ] int 
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      void 
   744 ;; Registers used:
   745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   751 ;;      Params:         0       0       0       0       0       0       0
   752 ;;      Locals:         0       0     208       0       0       0       0
   753 ;;      Temps:          0       0       0       0       0       0       0
   754 ;;      Totals:         0       0     208       0       0       0       0
   755 ;;Total ram usage:      208 bytes
   756 ;; Hardware stack levels used: 1
   757 ;; Hardware stack levels required when called: 8
   758 ;; This function calls:
   759 ;;		_ClearBuffer
   760 ;;		_GetString
   761 ;;		_atoi
   762 ;;		_print_number
   763 ;;		_strcpy
   764 ;;		_strtok
   765 ;; This function is called by:
   766 ;;		_main
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text1
   771  0000'                    __ptext1:
   772                           	callstack 0
   773  0000'                    _ParsingData:
   774                           	callstack 22
   775  0000'                    
   776                           ;newmain.c: 321:     char str[100];;newmain.c: 322:     ClearBuffer();
   777  0000' EC00' F000'        	call	_ClearBuffer	;wreg free
   778  0004'                    
   779                           ;newmain.c: 323:     int step = -1, heartRate = -1, temp = -1;
   780  0004' 0101               	movlb	1	; () banked
   781  0006' 6900'              	setf	ParsingData@step& (0+255),b
   782  0008' 6900'              	setf	(ParsingData@step+1)& (0+255),b
   783  000A'                    
   784                           ; BSR set to: 1
   785  000A' 6900'              	setf	ParsingData@heartRate& (0+255),b
   786  000C' 6900'              	setf	(ParsingData@heartRate+1)& (0+255),b
   787  000E'                    
   788                           ; BSR set to: 1
   789  000E' 6900'              	setf	ParsingData@temp& (0+255),b
   790  0010' 6900'              	setf	(ParsingData@temp+1)& (0+255),b
   791                           
   792                           ;newmain.c: 324:     while( GetString(str) && ( step == -1 || heartRate == -1 || temp ==
      +                           -1 ) ) {
   793  0012' EF00' F000'        	goto	l1915
   794  0016'                    l1899:
   795                           
   796                           ; BSR set to: 1
   797                           ;newmain.c: 325:         char *token;;newmain.c: 326:         char input[100];;newmain.c
      +                          : 327:         strcpy(input, str);
   798  0016' 0E00'              	movlw	low ParsingData@input
   799  0018' 6E00'              	movwf	strcpy@dest^0,c
   800  001A' 0E00'              	movlw	high ParsingData@input
   801  001C' 6E00'              	movwf	(strcpy@dest+1)^0,c
   802  001E' 0E00'              	movlw	low ParsingData@str
   803  0020' 6E00'              	movwf	strcpy@src^0,c
   804  0022' 0E00'              	movlw	high ParsingData@str
   805  0024' 6E00'              	movwf	(strcpy@src+1)^0,c
   806  0026' EC00' F000'        	call	_strcpy	;wreg free
   807  002A'                    
   808                           ;newmain.c: 328:         ClearBuffer();
   809  002A' EC00' F000'        	call	_ClearBuffer	;wreg free
   810  002E'                    
   811                           ;newmain.c: 329:         token = strtok(input, " ");
   812  002E' 0E00'              	movlw	low ParsingData@input
   813  0030' 6E00'              	movwf	strtok@s^0,c
   814  0032' 0E00'              	movlw	high ParsingData@input
   815  0034' 6E00'              	movwf	(strtok@s+1)^0,c
   816  0036' 0E00'              	movlw	low (STR_2+13)
   817  0038' 6E00'              	movwf	strtok@sep^0,c
   818  003A' EC00' F000'        	call	_strtok	;wreg free
   819  003E' C024' F0CE'        	movff	?_strtok,ParsingData@token
   820  0042' C025' F0CF'        	movff	?_strtok+1,ParsingData@token+1
   821  0046'                    
   822                           ;newmain.c: 330:         step = atoi(token);
   823  0046' C0CE' F01A'        	movff	ParsingData@token,atoi@s
   824  004A' C0CF' F01B'        	movff	ParsingData@token+1,atoi@s+1
   825  004E' EC00' F000'        	call	_atoi	;wreg free
   826  0052' C01A' F0C8'        	movff	?_atoi,ParsingData@step
   827  0056' C01B' F0C9'        	movff	?_atoi+1,ParsingData@step+1
   828  005A'                    
   829                           ;newmain.c: 332:         token = strtok(((void*)0), " ");
   830  005A' 0E00               	movlw	0
   831  005C' 6E00'              	movwf	strtok@s^0,c
   832  005E' 0E00               	movlw	0
   833  0060' 6E00'              	movwf	(strtok@s+1)^0,c
   834  0062' 0E00'              	movlw	low (STR_2+13)
   835  0064' 6E00'              	movwf	strtok@sep^0,c
   836  0066' EC00' F000'        	call	_strtok	;wreg free
   837  006A' C024' F0CE'        	movff	?_strtok,ParsingData@token
   838  006E' C025' F0CF'        	movff	?_strtok+1,ParsingData@token+1
   839  0072'                    
   840                           ;newmain.c: 333:         heartRate = atoi(token);
   841  0072' C0CE' F01A'        	movff	ParsingData@token,atoi@s
   842  0076' C0CF' F01B'        	movff	ParsingData@token+1,atoi@s+1
   843  007A' EC00' F000'        	call	_atoi	;wreg free
   844  007E' C01A' F0CA'        	movff	?_atoi,ParsingData@heartRate
   845  0082' C01B' F0CB'        	movff	?_atoi+1,ParsingData@heartRate+1
   846  0086'                    
   847                           ;newmain.c: 335:         token = strtok(((void*)0), " ");
   848  0086' 0E00               	movlw	0
   849  0088' 6E00'              	movwf	strtok@s^0,c
   850  008A' 0E00               	movlw	0
   851  008C' 6E00'              	movwf	(strtok@s+1)^0,c
   852  008E' 0E00'              	movlw	low (STR_2+13)
   853  0090' 6E00'              	movwf	strtok@sep^0,c
   854  0092' EC00' F000'        	call	_strtok	;wreg free
   855  0096' C024' F0CE'        	movff	?_strtok,ParsingData@token
   856  009A' C025' F0CF'        	movff	?_strtok+1,ParsingData@token+1
   857  009E'                    
   858                           ;newmain.c: 336:         temp = atoi(token);
   859  009E' C0CE' F01A'        	movff	ParsingData@token,atoi@s
   860  00A2' C0CF' F01B'        	movff	ParsingData@token+1,atoi@s+1
   861  00A6' EC00' F000'        	call	_atoi	;wreg free
   862  00AA' C01A' F0CC'        	movff	?_atoi,ParsingData@temp
   863  00AE' C01B' F0CD'        	movff	?_atoi+1,ParsingData@temp+1
   864  00B2'                    l1915:
   865                           
   866                           ;newmain.c: 324:     while( GetString(str) && ( step == -1 || heartRate == -1 || temp ==
      +                           -1 ) ) {
   867  00B2' 0E00'              	movlw	low ParsingData@str
   868  00B4' 6E00'              	movwf	GetString@str^0,c
   869  00B6' 0E00'              	movlw	high ParsingData@str
   870  00B8' 6E00'              	movwf	(GetString@str+1)^0,c
   871  00BA' EC00' F000'        	call	_GetString	;wreg free
   872  00BE' 5000'              	movf	?_GetString^0,w,c
   873  00C0' 1000'              	iorwf	(?_GetString+1)^0,w,c
   874  00C2' B4D8               	btfsc	status,2,c
   875  00C4' EF00' F000'        	goto	u1241
   876  00C8' EF00' F000'        	goto	u1240
   877  00CC'                    u1241:
   878  00CC' EF00' F000'        	goto	l1923
   879  00D0'                    u1240:
   880  00D0' 0101               	movlb	1	; () banked
   881  00D2' 2900'              	incf	ParsingData@step& (0+255),w,b
   882  00D4' E108               	bnz	u1250
   883  00D6' 2900'              	incf	(ParsingData@step+1)& (0+255),w,b
   884  00D8' B4D8               	btfsc	status,2,c
   885  00DA' EF00' F000'        	goto	u1251
   886  00DE' EF00' F000'        	goto	u1250
   887  00E2'                    u1251:
   888  00E2' EF00' F000'        	goto	l1899
   889  00E6'                    u1250:
   890  00E6'                    
   891                           ; BSR set to: 1
   892  00E6' 2900'              	incf	ParsingData@heartRate& (0+255),w,b
   893  00E8' E108               	bnz	u1260
   894  00EA' 2900'              	incf	(ParsingData@heartRate+1)& (0+255),w,b
   895  00EC' B4D8               	btfsc	status,2,c
   896  00EE' EF00' F000'        	goto	u1261
   897  00F2' EF00' F000'        	goto	u1260
   898  00F6'                    u1261:
   899  00F6' EF00' F000'        	goto	l1899
   900  00FA'                    u1260:
   901  00FA'                    
   902                           ; BSR set to: 1
   903  00FA' 2900'              	incf	ParsingData@temp& (0+255),w,b
   904  00FC' E108               	bnz	u1270
   905  00FE' 2900'              	incf	(ParsingData@temp+1)& (0+255),w,b
   906  0100' B4D8               	btfsc	status,2,c
   907  0102' EF00' F000'        	goto	u1271
   908  0106' EF00' F000'        	goto	u1270
   909  010A'                    u1271:
   910  010A' EF00' F000'        	goto	l1899
   911  010E'                    u1270:
   912  010E'                    l1923:
   913                           
   914                           ;newmain.c: 338:     print_number(step);
   915  010E' C0C8' F02A'        	movff	ParsingData@step,print_number@num
   916  0112' C0C9' F02B'        	movff	ParsingData@step+1,print_number@num+1
   917  0116' EC00' F000'        	call	_print_number	;wreg free
   918                           
   919                           ;newmain.c: 339:     print_number(heartRate);
   920  011A' C0CA' F02A'        	movff	ParsingData@heartRate,print_number@num
   921  011E' C0CB' F02B'        	movff	ParsingData@heartRate+1,print_number@num+1
   922  0122' EC00' F000'        	call	_print_number	;wreg free
   923                           
   924                           ;newmain.c: 340:     print_number(temp);
   925  0126' C0CC' F02A'        	movff	ParsingData@temp,print_number@num
   926  012A' C0CD' F02B'        	movff	ParsingData@temp+1,print_number@num+1
   927  012E' EC00' F000'        	call	_print_number	;wreg free
   928  0132' 0012               	return		;funcret
   929  0134'                    __end_of_ParsingData:
   930                           	callstack 0
   931                           
   932 ;; *************** function _strtok *****************
   933 ;; Defined at:
   934 ;;		line 3 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/strtok.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;  s               2   36[COMRAM] PTR unsigned char 
   937 ;;		 -> NULL(0), ParsingData@input(100), 
   938 ;;  sep             1   38[COMRAM] PTR const unsigned char 
   939 ;;		 -> STR_5(2), STR_4(2), STR_3(2), 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;		None
   942 ;; Return value:  Size  Location     Type
   943 ;;                  2   36[COMRAM] PTR unsigned char 
   944 ;; Registers used:
   945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   951 ;;      Params:         3       0       0       0       0       0       0
   952 ;;      Locals:         0       0       0       0       0       0       0
   953 ;;      Temps:          0       0       0       0       0       0       0
   954 ;;      Totals:         3       0       0       0       0       0       0
   955 ;;Total ram usage:        3 bytes
   956 ;; Hardware stack levels used: 1
   957 ;; Hardware stack levels required when called: 7
   958 ;; This function calls:
   959 ;;		_strcspn
   960 ;;		_strspn
   961 ;; This function is called by:
   962 ;;		_ParsingData
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text2
   967  0000'                    __ptext2:
   968                           	callstack 0
   969  0000'                    _strtok:
   970                           	callstack 22
   971  0000' 5000'              	movf	strtok@s^0,w,c
   972  0002' 1000'              	iorwf	(strtok@s+1)^0,w,c
   973  0004' A4D8               	btfss	status,2,c
   974  0006' EF00' F000'        	goto	u1071
   975  000A' EF00' F000'        	goto	u1070
   976  000E'                    u1071:
   977  000E' EF00' F000'        	goto	l1735
   978  0012'                    u1070:
   979  0012' C000' F024'        	movff	strtok@p,strtok@s
   980  0016' C001' F025'        	movff	strtok@p+1,strtok@s+1
   981  001A' 5000'              	movf	strtok@s^0,w,c
   982  001C' 1000'              	iorwf	(strtok@s+1)^0,w,c
   983  001E' A4D8               	btfss	status,2,c
   984  0020' EF00' F000'        	goto	u1081
   985  0024' EF00' F000'        	goto	u1080
   986  0028'                    u1081:
   987  0028' EF00' F000'        	goto	l1735
   988  002C'                    u1080:
   989  002C' 0E00               	movlw	0
   990  002E' 6E00'              	movwf	?_strtok^0,c
   991  0030' 0E00               	movlw	0
   992  0032' 6E00'              	movwf	(?_strtok+1)^0,c
   993  0034' EF00' F000'        	goto	l924
   994  0038'                    l1735:
   995  0038' C024' F01E'        	movff	strtok@s,strspn@s
   996  003C' C025' F01F'        	movff	strtok@s+1,strspn@s+1
   997  0040' C026' F020'        	movff	strtok@sep,strspn@c
   998  0044' EC00' F000'        	call	_strspn	;wreg free
   999  0048' 5000'              	movf	?_strspn^0,w,c
  1000  004A' 2600'              	addwf	strtok@s^0,f,c
  1001  004C' 5000'              	movf	(?_strspn+1)^0,w,c
  1002  004E' 2200'              	addwfc	(strtok@s+1)^0,f,c
  1003  0050' C024' FFD9         	movff	strtok@s,fsr2l
  1004  0054' C025' FFDA         	movff	strtok@s+1,fsr2h
  1005  0058' 50DF               	movf	indf2,w,c
  1006  005A' A4D8               	btfss	status,2,c
  1007  005C' EF00' F000'        	goto	u1091
  1008  0060' EF00' F000'        	goto	u1090
  1009  0064'                    u1091:
  1010  0064' EF00' F000'        	goto	l1743
  1011  0068'                    u1090:
  1012  0068' 0E00               	movlw	0
  1013  006A' 6E00'              	movwf	strtok@p^0,c
  1014  006C' 0E00               	movlw	0
  1015  006E' 6E00'              	movwf	(strtok@p+1)^0,c
  1016  0070' C000' F024'        	movff	strtok@p,?_strtok
  1017  0074' C001' F025'        	movff	strtok@p+1,?_strtok+1
  1018  0078' EF00' F000'        	goto	l924
  1019  007C'                    l1743:
  1020  007C' C024' F01E'        	movff	strtok@s,strcspn@s
  1021  0080' C025' F01F'        	movff	strtok@s+1,strcspn@s+1
  1022  0084' C026' F020'        	movff	strtok@sep,strcspn@c
  1023  0088' EC00' F000'        	call	_strcspn	;wreg free
  1024  008C' 5000'              	movf	?_strcspn^0,w,c
  1025  008E' 2400'              	addwf	strtok@s^0,w,c
  1026  0090' 6E00'              	movwf	strtok@p^0,c
  1027  0092' 5000'              	movf	(?_strcspn+1)^0,w,c
  1028  0094' 2000'              	addwfc	(strtok@s+1)^0,w,c
  1029  0096' 6E00'              	movwf	(strtok@p+1)^0,c
  1030  0098' C000' FFD9         	movff	strtok@p,fsr2l
  1031  009C' C001' FFDA         	movff	strtok@p+1,fsr2h
  1032  00A0' 50DF               	movf	indf2,w,c
  1033  00A2' B4D8               	btfsc	status,2,c
  1034  00A4' EF00' F000'        	goto	u1101
  1035  00A8' EF00' F000'        	goto	u1100
  1036  00AC'                    u1101:
  1037  00AC' EF00' F000'        	goto	l1751
  1038  00B0'                    u1100:
  1039  00B0' C000' FFD9         	movff	strtok@p,fsr2l
  1040  00B4' C001' FFDA         	movff	strtok@p+1,fsr2h
  1041  00B8' 6ADF               	clrf	indf2,c
  1042  00BA' 4A00'              	infsnz	strtok@p^0,f,c
  1043  00BC' 2A00'              	incf	(strtok@p+1)^0,f,c
  1044  00BE' EF00' F000'        	goto	l927
  1045  00C2'                    l1751:
  1046  00C2' 0E00               	movlw	0
  1047  00C4' 6E00'              	movwf	strtok@p^0,c
  1048  00C6' 0E00               	movlw	0
  1049  00C8' 6E00'              	movwf	(strtok@p+1)^0,c
  1050  00CA'                    l927:
  1051  00CA' C024' F024'        	movff	strtok@s,?_strtok
  1052  00CE' C025' F025'        	movff	strtok@s+1,?_strtok+1
  1053  00D2'                    l924:
  1054  00D2' 0012               	return		;funcret
  1055  00D4'                    __end_of_strtok:
  1056                           	callstack 0
  1057                           
  1058 ;; *************** function _strspn *****************
  1059 ;; Defined at:
  1060 ;;		line 3 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/strspn.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;  s               2   30[COMRAM] PTR const unsigned char 
  1063 ;;		 -> NULL(0), ParsingData@input(100), 
  1064 ;;  c               1   32[COMRAM] PTR const unsigned char 
  1065 ;;		 -> STR_5(2), STR_4(2), STR_3(2), 
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;  i               2   34[COMRAM] unsigned int 
  1068 ;; Return value:  Size  Location     Type
  1069 ;;                  2   30[COMRAM] unsigned int 
  1070 ;; Registers used:
  1071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1072 ;; Tracked objects:
  1073 ;;		On entry : 0/0
  1074 ;;		On exit  : 0/0
  1075 ;;		Unchanged: 0/0
  1076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1077 ;;      Params:         3       0       0       0       0       0       0
  1078 ;;      Locals:         2       0       0       0       0       0       0
  1079 ;;      Temps:          1       0       0       0       0       0       0
  1080 ;;      Totals:         6       0       0       0       0       0       0
  1081 ;;Total ram usage:        6 bytes
  1082 ;; Hardware stack levels used: 1
  1083 ;; Hardware stack levels required when called: 6
  1084 ;; This function calls:
  1085 ;;		_strchr
  1086 ;; This function is called by:
  1087 ;;		_strtok
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           	psect	text3
  1092  0000'                    __ptext3:
  1093                           	callstack 0
  1094  0000'                    _strspn:
  1095                           	callstack 22
  1096  0000' 0E00               	movlw	0
  1097  0002' 6E00'              	movwf	(strspn@i+1)^0,c
  1098  0004' 0E00               	movlw	0
  1099  0006' 6E00'              	movwf	strspn@i^0,c
  1100  0008' EF00' F000'        	goto	l1683
  1101  000C'                    l1681:
  1102  000C' 4A00'              	infsnz	strspn@s^0,f,c
  1103  000E' 2A00'              	incf	(strspn@s+1)^0,f,c
  1104  0010' 4A00'              	infsnz	strspn@i^0,f,c
  1105  0012' 2A00'              	incf	(strspn@i+1)^0,f,c
  1106  0014'                    l1683:
  1107  0014' C01E' FFD9         	movff	strspn@s,fsr2l
  1108  0018' C01F' FFDA         	movff	strspn@s+1,fsr2h
  1109  001C' 50DF               	movf	indf2,w,c
  1110  001E' B4D8               	btfsc	status,2,c
  1111  0020' EF00' F000'        	goto	u1011
  1112  0024' EF00' F000'        	goto	u1010
  1113  0028'                    u1011:
  1114  0028' EF00' F000'        	goto	l952
  1115  002C'                    u1010:
  1116  002C' C020' F01A'        	movff	strspn@c,strchr@s
  1117  0030' C01E' FFD9         	movff	strspn@s,fsr2l
  1118  0034' C01F' FFDA         	movff	strspn@s+1,fsr2h
  1119  0038' 50DF               	movf	indf2,w,c
  1120  003A' 6E00'              	movwf	??_strspn^0,c
  1121  003C' 5000'              	movf	??_strspn^0,w,c
  1122  003E' 6E00'              	movwf	strchr@c^0,c
  1123  0040' 6A00'              	clrf	(strchr@c+1)^0,c
  1124  0042' EC00' F000'        	call	_strchr	;wreg free
  1125  0046' 0900               	iorlw	0
  1126  0048' A4D8               	btfss	status,2,c
  1127  004A' EF00' F000'        	goto	u1021
  1128  004E' EF00' F000'        	goto	u1020
  1129  0052'                    u1021:
  1130  0052' EF00' F000'        	goto	l1681
  1131  0056'                    u1020:
  1132  0056'                    l952:
  1133  0056' C022' F01E'        	movff	strspn@i,?_strspn
  1134  005A' C023' F01F'        	movff	strspn@i+1,?_strspn+1
  1135  005E' 0012               	return		;funcret
  1136  0060'                    __end_of_strspn:
  1137                           	callstack 0
  1138                           
  1139 ;; *************** function _strcspn *****************
  1140 ;; Defined at:
  1141 ;;		line 3 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/strcspn.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;  s               2   30[COMRAM] PTR const unsigned char 
  1144 ;;		 -> NULL(0), ParsingData@input(100), 
  1145 ;;  c               1   32[COMRAM] PTR const unsigned char 
  1146 ;;		 -> STR_5(2), STR_4(2), STR_3(2), 
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  i               2   34[COMRAM] unsigned int 
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  2   30[COMRAM] unsigned int 
  1151 ;; Registers used:
  1152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1158 ;;      Params:         3       0       0       0       0       0       0
  1159 ;;      Locals:         2       0       0       0       0       0       0
  1160 ;;      Temps:          1       0       0       0       0       0       0
  1161 ;;      Totals:         6       0       0       0       0       0       0
  1162 ;;Total ram usage:        6 bytes
  1163 ;; Hardware stack levels used: 1
  1164 ;; Hardware stack levels required when called: 6
  1165 ;; This function calls:
  1166 ;;		_strchr
  1167 ;; This function is called by:
  1168 ;;		_strtok
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           	psect	text4
  1173  0000'                    __ptext4:
  1174                           	callstack 0
  1175  0000'                    _strcspn:
  1176                           	callstack 22
  1177  0000' 0E00               	movlw	0
  1178  0002' 6E00'              	movwf	(strcspn@i+1)^0,c
  1179  0004' 0E00               	movlw	0
  1180  0006' 6E00'              	movwf	strcspn@i^0,c
  1181  0008' EF00' F000'        	goto	l1691
  1182  000C'                    l1689:
  1183  000C' 4A00'              	infsnz	strcspn@s^0,f,c
  1184  000E' 2A00'              	incf	(strcspn@s+1)^0,f,c
  1185  0010' 4A00'              	infsnz	strcspn@i^0,f,c
  1186  0012' 2A00'              	incf	(strcspn@i+1)^0,f,c
  1187  0014'                    l1691:
  1188  0014' C01E' FFD9         	movff	strcspn@s,fsr2l
  1189  0018' C01F' FFDA         	movff	strcspn@s+1,fsr2h
  1190  001C' 50DF               	movf	indf2,w,c
  1191  001E' B4D8               	btfsc	status,2,c
  1192  0020' EF00' F000'        	goto	u1031
  1193  0024' EF00' F000'        	goto	u1030
  1194  0028'                    u1031:
  1195  0028' EF00' F000'        	goto	l936
  1196  002C'                    u1030:
  1197  002C' C020' F01A'        	movff	strcspn@c,strchr@s
  1198  0030' C01E' FFD9         	movff	strcspn@s,fsr2l
  1199  0034' C01F' FFDA         	movff	strcspn@s+1,fsr2h
  1200  0038' 50DF               	movf	indf2,w,c
  1201  003A' 6E00'              	movwf	??_strcspn^0,c
  1202  003C' 5000'              	movf	??_strcspn^0,w,c
  1203  003E' 6E00'              	movwf	strchr@c^0,c
  1204  0040' 6A00'              	clrf	(strchr@c+1)^0,c
  1205  0042' EC00' F000'        	call	_strchr	;wreg free
  1206  0046' 0900               	iorlw	0
  1207  0048' B4D8               	btfsc	status,2,c
  1208  004A' EF00' F000'        	goto	u1041
  1209  004E' EF00' F000'        	goto	u1040
  1210  0052'                    u1041:
  1211  0052' EF00' F000'        	goto	l1689
  1212  0056'                    u1040:
  1213  0056'                    l936:
  1214  0056' C022' F01E'        	movff	strcspn@i,?_strcspn
  1215  005A' C023' F01F'        	movff	strcspn@i+1,?_strcspn+1
  1216  005E' 0012               	return		;funcret
  1217  0060'                    __end_of_strcspn:
  1218                           	callstack 0
  1219                           
  1220 ;; *************** function _strchr *****************
  1221 ;; Defined at:
  1222 ;;		line 3 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/strchr.c"
  1223 ;; Parameters:    Size  Location     Type
  1224 ;;  s               1   26[COMRAM] PTR const unsigned char 
  1225 ;;		 -> STR_5(2), STR_4(2), STR_3(2), 
  1226 ;;  c               2   27[COMRAM] int 
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;		None
  1229 ;; Return value:  Size  Location     Type
  1230 ;;                  1   26[COMRAM] PTR unsigned char 
  1231 ;; Registers used:
  1232 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1233 ;; Tracked objects:
  1234 ;;		On entry : 0/0
  1235 ;;		On exit  : 0/0
  1236 ;;		Unchanged: 0/0
  1237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1238 ;;      Params:         3       0       0       0       0       0       0
  1239 ;;      Locals:         0       0       0       0       0       0       0
  1240 ;;      Temps:          1       0       0       0       0       0       0
  1241 ;;      Totals:         4       0       0       0       0       0       0
  1242 ;;Total ram usage:        4 bytes
  1243 ;; Hardware stack levels used: 1
  1244 ;; Hardware stack levels required when called: 5
  1245 ;; This function calls:
  1246 ;;		Nothing
  1247 ;; This function is called by:
  1248 ;;		_strcspn
  1249 ;;		_strspn
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	text5
  1254  0000'                    __ptext5:
  1255                           	callstack 0
  1256  0000'                    _strchr:
  1257                           	callstack 22
  1258  0000'                    l940:
  1259  0000' C01A' FFF6         	movff	strchr@s,tblptrl
  1260  0004'                    	if	1	;There is more than 1 active tblptr byte
  1261  0004' 0E00'              	movlw	high __smallconst
  1262  0006' 6EF7               	movwf	tblptrh,c
  1263  0008'                    	endif
  1264  0008'                    	if	0	;tblptru may be non-zero
  1265  0008'                    	endif
  1266  0008'                    	if	0	;tblptru may be non-zero
  1267  0008'                    	endif
  1268  0008' 0008               	tblrd		*
  1269  000A' 50F5               	movf	tablat,w,c
  1270  000C' 1800'              	xorwf	strchr@c^0,w,c
  1271  000E' A4D8               	btfss	status,2,c
  1272  0010' EF00' F000'        	goto	u871
  1273  0014' EF00' F000'        	goto	u870
  1274  0018'                    u871:
  1275  0018' EF00' F000'        	goto	l1609
  1276  001C'                    u870:
  1277  001C' 5000'              	movf	strchr@s^0,w,c
  1278  001E' EF00' F000'        	goto	l942
  1279  0022'                    l1609:
  1280  0022' 2A00'              	incf	strchr@s^0,f,c
  1281  0024' 0400'              	decf	strchr@s^0,w,c
  1282  0026' 6E00'              	movwf	??_strchr^0,c
  1283  0028' C01D' FFF6         	movff	??_strchr,tblptrl
  1284  002C'                    	if	1	;There is more than 1 active tblptr byte
  1285  002C' 0E00'              	movlw	high __smallconst
  1286  002E' 6EF7               	movwf	tblptrh,c
  1287  0030'                    	endif
  1288  0030'                    	if	0	;tblptru may be non-zero
  1289  0030'                    	endif
  1290  0030'                    	if	0	;tblptru may be non-zero
  1291  0030'                    	endif
  1292  0030' 0008               	tblrd		*
  1293  0032' 50F5               	movf	tablat,w,c
  1294  0034' 0900               	iorlw	0
  1295  0036' A4D8               	btfss	status,2,c
  1296  0038' EF00' F000'        	goto	u881
  1297  003C' EF00' F000'        	goto	u880
  1298  0040'                    u881:
  1299  0040' EF00' F000'        	goto	l940
  1300  0044'                    u880:
  1301  0044' 0E00               	movlw	0
  1302  0046'                    l942:
  1303  0046' 0012               	return		;funcret
  1304  0048'                    __end_of_strchr:
  1305                           	callstack 0
  1306                           
  1307 ;; *************** function _print_number *****************
  1308 ;; Defined at:
  1309 ;;		line 313 in file "newmain.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  num             2   42[COMRAM] int 
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;  i               2  100[BANK0 ] int 
  1314 ;;  tmp           100    0[BANK0 ] unsigned char [100]
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  1    wreg      void 
  1317 ;; Registers used:
  1318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1324 ;;      Params:         2       0       0       0       0       0       0
  1325 ;;      Locals:         0     102       0       0       0       0       0
  1326 ;;      Temps:          0       0       0       0       0       0       0
  1327 ;;      Totals:         2     102       0       0       0       0       0
  1328 ;;Total ram usage:      104 bytes
  1329 ;; Hardware stack levels used: 1
  1330 ;; Hardware stack levels required when called: 7
  1331 ;; This function calls:
  1332 ;;		_itoa
  1333 ;;		_putch
  1334 ;;		_strlen
  1335 ;; This function is called by:
  1336 ;;		_ParsingData
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339                           
  1340                           	psect	text6
  1341  0000'                    __ptext6:
  1342                           	callstack 0
  1343  0000'                    _print_number:
  1344                           	callstack 22
  1345  0000'                    
  1346                           ;newmain.c: 314:     char tmp[100];;newmain.c: 315:     itoa(num, tmp);
  1347  0000' C02A' F022'        	movff	print_number@num,itoa@n
  1348  0004' C02B' F023'        	movff	print_number@num+1,itoa@n+1
  1349  0008' 0E00'              	movlw	low print_number@tmp
  1350  000A' 6E00'              	movwf	itoa@s^0,c
  1351  000C' EC00' F000'        	call	_itoa	;wreg free
  1352  0010'                    
  1353                           ;newmain.c: 316:     for(int i=0;i<strlen(tmp);i++) putch(tmp[i]);
  1354  0010' 0E00               	movlw	0
  1355  0012' 0100               	movlb	0	; () banked
  1356  0014' 6F00'              	movwf	(print_number@i+1)& (0+255),b
  1357  0016' 0E00               	movlw	0
  1358  0018' 6F00'              	movwf	print_number@i& (0+255),b
  1359  001A' EF00' F000'        	goto	l1723
  1360  001E'                    l1719:
  1361                           
  1362                           ; BSR set to: 0
  1363  001E' 5100'              	movf	print_number@i& (0+255),w,b
  1364  0020' 0F00'              	addlw	low print_number@tmp
  1365  0022' 6ED9               	movwf	fsr2l,c
  1366  0024' 6ADA               	clrf	fsr2h,c
  1367  0026' 50DF               	movf	indf2,w,c
  1368  0028' EC00' F000'        	call	_putch
  1369  002C' 0100               	movlb	0	; () banked
  1370  002E' 4B00'              	infsnz	print_number@i& (0+255),f,b
  1371  0030' 2B00'              	incf	(print_number@i+1)& (0+255),f,b
  1372  0032'                    l1723:
  1373                           
  1374                           ; BSR set to: 0
  1375  0032' 0E00'              	movlw	low print_number@tmp
  1376  0034' 6E00'              	movwf	strlen@s^0,c
  1377  0036' EC00' F000'        	call	_strlen	;wreg free
  1378  003A' 5000'              	movf	?_strlen^0,w,c
  1379  003C' 0100               	movlb	0	; () banked
  1380  003E' 5D00'              	subwf	print_number@i& (0+255),w,b
  1381  0040' 5000'              	movf	(?_strlen+1)^0,w,c
  1382  0042' 5900'              	subwfb	(print_number@i+1)& (0+255),w,b
  1383  0044' A0D8               	btfss	status,0,c
  1384  0046' EF00' F000'        	goto	u1061
  1385  004A' EF00' F000'        	goto	u1060
  1386  004E'                    u1061:
  1387  004E' EF00' F000'        	goto	l1719
  1388  0052'                    u1060:
  1389  0052'                    
  1390                           ; BSR set to: 0
  1391                           ;newmain.c: 317:     putch('\r');
  1392  0052' 0E0D               	movlw	13
  1393  0054' EC00' F000'        	call	_putch
  1394                           
  1395                           ;newmain.c: 318:     putch('\n');
  1396  0058' 0E0A               	movlw	10
  1397  005A' EC00' F000'        	call	_putch
  1398  005E' 0012               	return		;funcret
  1399  0060'                    __end_of_print_number:
  1400                           	callstack 0
  1401                           
  1402 ;; *************** function _strlen *****************
  1403 ;; Defined at:
  1404 ;;		line 5 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/strlen.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  s               1   26[COMRAM] PTR const unsigned char 
  1407 ;;		 -> print_number@tmp(100), output_total_dis@tmp(100), output_total_dis@output(100), get_StepLength@str(100), 
  1408 ;;		 -> get_StepLength@ask(100), 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  a               1   28[COMRAM] PTR const unsigned char 
  1411 ;;		 -> print_number@tmp(100), output_total_dis@tmp(100), output_total_dis@output(100), get_StepLength@str(100), 
  1412 ;;		 -> get_StepLength@ask(100), 
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  2   26[COMRAM] unsigned int 
  1415 ;; Registers used:
  1416 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1422 ;;      Params:         2       0       0       0       0       0       0
  1423 ;;      Locals:         1       0       0       0       0       0       0
  1424 ;;      Temps:          0       0       0       0       0       0       0
  1425 ;;      Totals:         3       0       0       0       0       0       0
  1426 ;;Total ram usage:        3 bytes
  1427 ;; Hardware stack levels used: 1
  1428 ;; Hardware stack levels required when called: 5
  1429 ;; This function calls:
  1430 ;;		Nothing
  1431 ;; This function is called by:
  1432 ;;		_print_number
  1433 ;;		_get_StepLength
  1434 ;;		_output_total_dis
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text7
  1439  0000'                    __ptext7:
  1440                           	callstack 0
  1441  0000'                    _strlen:
  1442                           	callstack 23
  1443  0000' C01A' F01C'        	movff	strlen@s,strlen@a
  1444  0004' EF00' F000'        	goto	l1673
  1445  0008'                    l1671:
  1446  0008' 2A00'              	incf	strlen@s^0,f,c
  1447  000A'                    l1673:
  1448  000A' 5000'              	movf	strlen@s^0,w,c
  1449  000C' 6ED9               	movwf	fsr2l,c
  1450  000E' 6ADA               	clrf	fsr2h,c
  1451  0010' 50DF               	movf	indf2,w,c
  1452  0012' A4D8               	btfss	status,2,c
  1453  0014' EF00' F000'        	goto	u1001
  1454  0018' EF00' F000'        	goto	u1000
  1455  001C'                    u1001:
  1456  001C' EF00' F000'        	goto	l1671
  1457  0020'                    u1000:
  1458  0020' 5000'              	movf	strlen@a^0,w,c
  1459  0022' 5C00'              	subwf	strlen@s^0,w,c
  1460  0024' 6E00'              	movwf	?_strlen^0,c
  1461  0026' 6A00'              	clrf	(?_strlen+1)^0,c
  1462  0028' BE00'              	btfsc	?_strlen^0,7,c
  1463  002A' 0600'              	decf	(?_strlen+1)^0,f,c
  1464  002C' 0012               	return		;funcret
  1465  002E'                    __end_of_strlen:
  1466                           	callstack 0
  1467                           
  1468 ;; *************** function _putch *****************
  1469 ;; Defined at:
  1470 ;;		line 74 in file "newmain.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  data            1    wreg     unsigned char 
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  data            1   26[COMRAM] unsigned char 
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      void 
  1477 ;; Registers used:
  1478 ;;		wreg, status,2, status,0
  1479 ;; Tracked objects:
  1480 ;;		On entry : 0/0
  1481 ;;		On exit  : 0/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1484 ;;      Params:         0       0       0       0       0       0       0
  1485 ;;      Locals:         1       0       0       0       0       0       0
  1486 ;;      Temps:          0       0       0       0       0       0       0
  1487 ;;      Totals:         1       0       0       0       0       0       0
  1488 ;;Total ram usage:        1 bytes
  1489 ;; Hardware stack levels used: 1
  1490 ;; Hardware stack levels required when called: 5
  1491 ;; This function calls:
  1492 ;;		Nothing
  1493 ;; This function is called by:
  1494 ;;		_print_number
  1495 ;;		_get_StepLength
  1496 ;;		_output_total_dis
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text8
  1501  0000'                    __ptext8:
  1502                           	callstack 0
  1503  0000'                    _putch:
  1504                           	callstack 23
  1505                           
  1506                           ;incstack = 0
  1507                           ;putch@data stored from wreg
  1508  0000' 6E00'              	movwf	putch@data^0,c
  1509  0002'                    
  1510                           ;newmain.c: 75:     if (data == '\n' || data == '\r') {
  1511  0002' 0E0A               	movlw	10
  1512  0004' 1800'              	xorwf	putch@data^0,w,c
  1513  0006' B4D8               	btfsc	status,2,c
  1514  0008' EF00' F000'        	goto	u891
  1515  000C' EF00' F000'        	goto	u890
  1516  0010'                    u891:
  1517  0010' EF00' F000'        	goto	l92
  1518  0014'                    u890:
  1519  0014' 0E0D               	movlw	13
  1520  0016' 1800'              	xorwf	putch@data^0,w,c
  1521  0018' A4D8               	btfss	status,2,c
  1522  001A' EF00' F000'        	goto	u901
  1523  001E' EF00' F000'        	goto	u900
  1524  0022'                    u901:
  1525  0022' EF00' F000'        	goto	l99
  1526  0026'                    u900:
  1527  0026'                    l92:
  1528  0026' A2AC               	btfss	172,1,c	;volatile
  1529  0028' EF00' F000'        	goto	u911
  1530  002C' EF00' F000'        	goto	u910
  1531  0030'                    u911:
  1532  0030' EF00' F000'        	goto	l92
  1533  0034'                    u910:
  1534  0034'                    
  1535                           ;newmain.c: 77:         TXREG = '\r';
  1536  0034' 0E0D               	movlw	13
  1537  0036' 6EAD               	movwf	173,c	;volatile
  1538  0038'                    l95:
  1539  0038' A2AC               	btfss	172,1,c	;volatile
  1540  003A' EF00' F000'        	goto	u921
  1541  003E' EF00' F000'        	goto	u920
  1542  0042'                    u921:
  1543  0042' EF00' F000'        	goto	l95
  1544  0046'                    u920:
  1545  0046'                    
  1546                           ;newmain.c: 79:         TXREG = '\n';
  1547  0046' 0E0A               	movlw	10
  1548  0048' 6EAD               	movwf	173,c	;volatile
  1549                           
  1550                           ;newmain.c: 80:     } else {
  1551  004A' EF00' F000'        	goto	l102
  1552  004E'                    l99:
  1553  004E' A2AC               	btfss	172,1,c	;volatile
  1554  0050' EF00' F000'        	goto	u931
  1555  0054' EF00' F000'        	goto	u930
  1556  0058'                    u931:
  1557  0058' EF00' F000'        	goto	l99
  1558  005C'                    u930:
  1559  005C'                    
  1560                           ;newmain.c: 82:         TXREG = data;
  1561  005C' C01A' FFAD         	movff	putch@data,4013	;volatile
  1562  0060'                    l102:
  1563  0060' 0012               	return		;funcret
  1564  0062'                    __end_of_putch:
  1565                           	callstack 0
  1566                           
  1567 ;; *************** function _itoa *****************
  1568 ;; Defined at:
  1569 ;;		line 265 in file "newmain.c"
  1570 ;; Parameters:    Size  Location     Type
  1571 ;;  n               2   34[COMRAM] int 
  1572 ;;  s               1   36[COMRAM] PTR unsigned char 
  1573 ;;		 -> print_number@tmp(100), output_total_dis@tmp(100), 
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;  i               2   40[COMRAM] int 
  1576 ;;  sign            2   38[COMRAM] int 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  1    wreg      void 
  1579 ;; Registers used:
  1580 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1586 ;;      Params:         3       0       0       0       0       0       0
  1587 ;;      Locals:         4       0       0       0       0       0       0
  1588 ;;      Temps:          1       0       0       0       0       0       0
  1589 ;;      Totals:         8       0       0       0       0       0       0
  1590 ;;Total ram usage:        8 bytes
  1591 ;; Hardware stack levels used: 1
  1592 ;; Hardware stack levels required when called: 6
  1593 ;; This function calls:
  1594 ;;		___awdiv
  1595 ;;		___awmod
  1596 ;;		_reverse
  1597 ;; This function is called by:
  1598 ;;		_print_number
  1599 ;;		_output_total_dis
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           	psect	text9
  1604  0000'                    __ptext9:
  1605                           	callstack 0
  1606  0000'                    _itoa:
  1607                           	callstack 22
  1608  0000'                    
  1609                           ;newmain.c: 266:     int sign = 1;
  1610  0000' 0E00               	movlw	0
  1611  0002' 6E00'              	movwf	(itoa@sign+1)^0,c
  1612  0004' 0E01               	movlw	1
  1613  0006' 6E00'              	movwf	itoa@sign^0,c
  1614  0008'                    
  1615                           ;newmain.c: 267:     if (n < 0) {
  1616  0008' BE00'              	btfsc	(itoa@n+1)^0,7,c
  1617  000A' EF00' F000'        	goto	u970
  1618  000E' EF00' F000'        	goto	u971
  1619  0012'                    u971:
  1620  0012' EF00' F000'        	goto	l1649
  1621  0016'                    u970:
  1622  0016'                    
  1623                           ;newmain.c: 268:         sign = -1;
  1624  0016' 6800'              	setf	itoa@sign^0,c
  1625  0018' 6800'              	setf	(itoa@sign+1)^0,c
  1626  001A'                    
  1627                           ;newmain.c: 269:         n = -n;
  1628  001A' 6C00'              	negf	itoa@n^0,c
  1629  001C' 1E00'              	comf	(itoa@n+1)^0,f,c
  1630  001E' B0D8               	btfsc	status,0,c
  1631  0020' 2A00'              	incf	(itoa@n+1)^0,f,c
  1632  0022'                    l1649:
  1633                           
  1634                           ;newmain.c: 271:     int i = 0;
  1635  0022' 0E00               	movlw	0
  1636  0024' 6E00'              	movwf	(itoa@i+1)^0,c
  1637  0026' 0E00               	movlw	0
  1638  0028' 6E00'              	movwf	itoa@i^0,c
  1639                           
  1640                           ;newmain.c: 272:     while (n != 0) {
  1641  002A' EF00' F000'        	goto	l1657
  1642  002E'                    l1651:
  1643                           
  1644                           ;newmain.c: 273:         s[i++] = n%10 + '0';
  1645  002E' 5000'              	movf	itoa@s^0,w,c
  1646  0030' 2400'              	addwf	itoa@i^0,w,c
  1647  0032' 6ED9               	movwf	fsr2l,c
  1648  0034' 6ADA               	clrf	fsr2h,c
  1649  0036' C022' F01A'        	movff	itoa@n,___awmod@dividend
  1650  003A' C023' F01B'        	movff	itoa@n+1,___awmod@dividend+1
  1651  003E' 0E00               	movlw	0
  1652  0040' 6E00'              	movwf	(___awmod@divisor+1)^0,c
  1653  0042' 0E0A               	movlw	10
  1654  0044' 6E00'              	movwf	___awmod@divisor^0,c
  1655  0046' EC00' F000'        	call	___awmod	;wreg free
  1656  004A' 5000'              	movf	?___awmod^0,w,c
  1657  004C' 0F30               	addlw	48
  1658  004E' 6EDF               	movwf	indf2,c
  1659  0050' 4A00'              	infsnz	itoa@i^0,f,c
  1660  0052' 2A00'              	incf	(itoa@i+1)^0,f,c
  1661  0054'                    
  1662                           ;newmain.c: 274:         n = n/10;
  1663  0054' C022' F01A'        	movff	itoa@n,___awdiv@dividend
  1664  0058' C023' F01B'        	movff	itoa@n+1,___awdiv@dividend+1
  1665  005C' 0E00               	movlw	0
  1666  005E' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
  1667  0060' 0E0A               	movlw	10
  1668  0062' 6E00'              	movwf	___awdiv@divisor^0,c
  1669  0064' EC00' F000'        	call	___awdiv	;wreg free
  1670  0068' C01A' F022'        	movff	?___awdiv,itoa@n
  1671  006C' C01B' F023'        	movff	?___awdiv+1,itoa@n+1
  1672  0070'                    l1657:
  1673                           
  1674                           ;newmain.c: 272:     while (n != 0) {
  1675  0070' 5000'              	movf	itoa@n^0,w,c
  1676  0072' 1000'              	iorwf	(itoa@n+1)^0,w,c
  1677  0074' A4D8               	btfss	status,2,c
  1678  0076' EF00' F000'        	goto	u981
  1679  007A' EF00' F000'        	goto	u980
  1680  007E'                    u981:
  1681  007E' EF00' F000'        	goto	l1651
  1682  0082'                    u980:
  1683  0082'                    
  1684                           ;newmain.c: 277:     if (sign < 0)
  1685  0082' BE00'              	btfsc	(itoa@sign+1)^0,7,c
  1686  0084' EF00' F000'        	goto	u990
  1687  0088' EF00' F000'        	goto	u991
  1688  008C'                    u991:
  1689  008C' EF00' F000'        	goto	l1665
  1690  0090'                    u990:
  1691  0090'                    
  1692                           ;newmain.c: 278:         s[i++] = '-';
  1693  0090' 5000'              	movf	itoa@s^0,w,c
  1694  0092' 2400'              	addwf	itoa@i^0,w,c
  1695  0094' 6ED9               	movwf	fsr2l,c
  1696  0096' 6ADA               	clrf	fsr2h,c
  1697  0098' 0E2D               	movlw	45
  1698  009A' 6EDF               	movwf	indf2,c
  1699  009C' 4A00'              	infsnz	itoa@i^0,f,c
  1700  009E' 2A00'              	incf	(itoa@i+1)^0,f,c
  1701  00A0'                    l1665:
  1702                           
  1703                           ;newmain.c: 279:     s[i] = '\0';
  1704  00A0' 5000'              	movf	itoa@s^0,w,c
  1705  00A2' 2400'              	addwf	itoa@i^0,w,c
  1706  00A4' 6ED9               	movwf	fsr2l,c
  1707  00A6' 6ADA               	clrf	fsr2h,c
  1708  00A8' 6ADF               	clrf	indf2,c
  1709  00AA'                    
  1710                           ;newmain.c: 281:     reverse(s, s+i-1);
  1711  00AA' C024' F01A'        	movff	itoa@s,reverse@first
  1712  00AE' 5000'              	movf	itoa@s^0,w,c
  1713  00B0' 2400'              	addwf	itoa@i^0,w,c
  1714  00B2' 6E00'              	movwf	??_itoa^0,c
  1715  00B4' 0400'              	decf	??_itoa^0,w,c
  1716  00B6' 6E00'              	movwf	reverse@last^0,c
  1717  00B8' EC00' F000'        	call	_reverse	;wreg free
  1718  00BC' 0012               	return		;funcret
  1719  00BE'                    __end_of_itoa:
  1720                           	callstack 0
  1721                           
  1722 ;; *************** function _reverse *****************
  1723 ;; Defined at:
  1724 ;;		line 256 in file "newmain.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;  first           1   26[COMRAM] PTR unsigned char 
  1727 ;;		 -> print_number@tmp(100), output_total_dis@tmp(100), 
  1728 ;;  last            1   27[COMRAM] PTR unsigned char 
  1729 ;;		 -> print_number@tmp(100), output_total_dis@tmp(100), 
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;  tmp             1   28[COMRAM] unsigned char 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      void 
  1734 ;; Registers used:
  1735 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1741 ;;      Params:         2       0       0       0       0       0       0
  1742 ;;      Locals:         1       0       0       0       0       0       0
  1743 ;;      Temps:          0       0       0       0       0       0       0
  1744 ;;      Totals:         3       0       0       0       0       0       0
  1745 ;;Total ram usage:        3 bytes
  1746 ;; Hardware stack levels used: 1
  1747 ;; Hardware stack levels required when called: 5
  1748 ;; This function calls:
  1749 ;;		Nothing
  1750 ;; This function is called by:
  1751 ;;		_itoa
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           	psect	text10
  1756  0000'                    __ptext10:
  1757                           	callstack 0
  1758  0000'                    _reverse:
  1759                           	callstack 22
  1760  0000'                    
  1761                           ;newmain.c: 257:     for (;first < last; first++,last--) {
  1762  0000' EF00' F000'        	goto	l1521
  1763  0004'                    l1511:
  1764                           
  1765                           ;newmain.c: 259:         char tmp = *first;
  1766  0004' 5000'              	movf	reverse@first^0,w,c
  1767  0006' 6ED9               	movwf	fsr2l,c
  1768  0008' 6ADA               	clrf	fsr2h,c
  1769  000A' 50DF               	movf	indf2,w,c
  1770  000C' 6E00'              	movwf	reverse@tmp^0,c
  1771  000E'                    
  1772                           ;newmain.c: 260:         *first = *last;
  1773  000E' 5000'              	movf	reverse@last^0,w,c
  1774  0010' 6ED9               	movwf	fsr2l,c
  1775  0012' 6ADA               	clrf	fsr2h,c
  1776  0014' 5000'              	movf	reverse@first^0,w,c
  1777  0016' 6EE1               	movwf	fsr1l,c
  1778  0018' 6AE2               	clrf	fsr1h,c
  1779  001A' CFDF FFE7          	movff	indf2,indf1
  1780  001E'                    
  1781                           ;newmain.c: 261:         *last = tmp;
  1782  001E' 5000'              	movf	reverse@last^0,w,c
  1783  0020' 6ED9               	movwf	fsr2l,c
  1784  0022' 6ADA               	clrf	fsr2h,c
  1785  0024' C01C' FFDF         	movff	reverse@tmp,indf2
  1786  0028'                    
  1787                           ;newmain.c: 262:     }
  1788  0028' 2A00'              	incf	reverse@first^0,f,c
  1789  002A' 0600'              	decf	reverse@last^0,f,c
  1790  002C'                    l1521:
  1791  002C' 5000'              	movf	reverse@last^0,w,c
  1792  002E' 5C00'              	subwf	reverse@first^0,w,c
  1793  0030' A0D8               	btfss	status,0,c
  1794  0032' EF00' F000'        	goto	u741
  1795  0036' EF00' F000'        	goto	u740
  1796  003A'                    u741:
  1797  003A' EF00' F000'        	goto	l1511
  1798  003E'                    u740:
  1799  003E' 0012               	return		;funcret
  1800  0040'                    __end_of_reverse:
  1801                           	callstack 0
  1802                           
  1803 ;; *************** function ___awmod *****************
  1804 ;; Defined at:
  1805 ;;		line 7 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/awmod.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;  dividend        2   26[COMRAM] int 
  1808 ;;  divisor         2   28[COMRAM] int 
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  sign            1   31[COMRAM] unsigned char 
  1811 ;;  counter         1   30[COMRAM] unsigned char 
  1812 ;; Return value:  Size  Location     Type
  1813 ;;                  2   26[COMRAM] int 
  1814 ;; Registers used:
  1815 ;;		wreg, status,2, status,0
  1816 ;; Tracked objects:
  1817 ;;		On entry : 0/0
  1818 ;;		On exit  : 0/0
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1821 ;;      Params:         4       0       0       0       0       0       0
  1822 ;;      Locals:         2       0       0       0       0       0       0
  1823 ;;      Temps:          0       0       0       0       0       0       0
  1824 ;;      Totals:         6       0       0       0       0       0       0
  1825 ;;Total ram usage:        6 bytes
  1826 ;; Hardware stack levels used: 1
  1827 ;; Hardware stack levels required when called: 5
  1828 ;; This function calls:
  1829 ;;		Nothing
  1830 ;; This function is called by:
  1831 ;;		_itoa
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	text11
  1836  0000'                    __ptext11:
  1837                           	callstack 0
  1838  0000'                    ___awmod:
  1839                           	callstack 22
  1840  0000' 6A00'              	clrf	___awmod@sign^0,c
  1841  0002' BE00'              	btfsc	(___awmod@dividend+1)^0,7,c
  1842  0004' EF00' F000'        	goto	u810
  1843  0008' EF00' F000'        	goto	u811
  1844  000C'                    u811:
  1845  000C' EF00' F000'        	goto	l1575
  1846  0010'                    u810:
  1847  0010' 6C00'              	negf	___awmod@dividend^0,c
  1848  0012' 1E00'              	comf	(___awmod@dividend+1)^0,f,c
  1849  0014' B0D8               	btfsc	status,0,c
  1850  0016' 2A00'              	incf	(___awmod@dividend+1)^0,f,c
  1851  0018' 0E01               	movlw	1
  1852  001A' 6E00'              	movwf	___awmod@sign^0,c
  1853  001C'                    l1575:
  1854  001C' BE00'              	btfsc	(___awmod@divisor+1)^0,7,c
  1855  001E' EF00' F000'        	goto	u820
  1856  0022' EF00' F000'        	goto	u821
  1857  0026'                    u821:
  1858  0026' EF00' F000'        	goto	l1579
  1859  002A'                    u820:
  1860  002A' 6C00'              	negf	___awmod@divisor^0,c
  1861  002C' 1E00'              	comf	(___awmod@divisor+1)^0,f,c
  1862  002E' B0D8               	btfsc	status,0,c
  1863  0030' 2A00'              	incf	(___awmod@divisor+1)^0,f,c
  1864  0032'                    l1579:
  1865  0032' 5000'              	movf	___awmod@divisor^0,w,c
  1866  0034' 1000'              	iorwf	(___awmod@divisor+1)^0,w,c
  1867  0036' B4D8               	btfsc	status,2,c
  1868  0038' EF00' F000'        	goto	u831
  1869  003C' EF00' F000'        	goto	u830
  1870  0040'                    u831:
  1871  0040' EF00' F000'        	goto	l1595
  1872  0044'                    u830:
  1873  0044' 0E01               	movlw	1
  1874  0046' 6E00'              	movwf	___awmod@counter^0,c
  1875  0048' EF00' F000'        	goto	l1585
  1876  004C'                    l1583:
  1877  004C' 90D8               	bcf	status,0,c
  1878  004E' 3600'              	rlcf	___awmod@divisor^0,f,c
  1879  0050' 3600'              	rlcf	(___awmod@divisor+1)^0,f,c
  1880  0052' 2A00'              	incf	___awmod@counter^0,f,c
  1881  0054'                    l1585:
  1882  0054' AE00'              	btfss	(___awmod@divisor+1)^0,7,c
  1883  0056' EF00' F000'        	goto	u841
  1884  005A' EF00' F000'        	goto	u840
  1885  005E'                    u841:
  1886  005E' EF00' F000'        	goto	l1583
  1887  0062'                    u840:
  1888  0062'                    l1587:
  1889  0062' 5000'              	movf	___awmod@divisor^0,w,c
  1890  0064' 5C00'              	subwf	___awmod@dividend^0,w,c
  1891  0066' 5000'              	movf	(___awmod@divisor+1)^0,w,c
  1892  0068' 5800'              	subwfb	(___awmod@dividend+1)^0,w,c
  1893  006A' A0D8               	btfss	status,0,c
  1894  006C' EF00' F000'        	goto	u851
  1895  0070' EF00' F000'        	goto	u850
  1896  0074'                    u851:
  1897  0074' EF00' F000'        	goto	l1591
  1898  0078'                    u850:
  1899  0078' 5000'              	movf	___awmod@divisor^0,w,c
  1900  007A' 5E00'              	subwf	___awmod@dividend^0,f,c
  1901  007C' 5000'              	movf	(___awmod@divisor+1)^0,w,c
  1902  007E' 5A00'              	subwfb	(___awmod@dividend+1)^0,f,c
  1903  0080'                    l1591:
  1904  0080' 90D8               	bcf	status,0,c
  1905  0082' 3200'              	rrcf	(___awmod@divisor+1)^0,f,c
  1906  0084' 3200'              	rrcf	___awmod@divisor^0,f,c
  1907  0086' 2E00'              	decfsz	___awmod@counter^0,f,c
  1908  0088' EF00' F000'        	goto	l1587
  1909  008C'                    l1595:
  1910  008C' 5000'              	movf	___awmod@sign^0,w,c
  1911  008E' B4D8               	btfsc	status,2,c
  1912  0090' EF00' F000'        	goto	u861
  1913  0094' EF00' F000'        	goto	u860
  1914  0098'                    u861:
  1915  0098' EF00' F000'        	goto	l1599
  1916  009C'                    u860:
  1917  009C' 6C00'              	negf	___awmod@dividend^0,c
  1918  009E' 1E00'              	comf	(___awmod@dividend+1)^0,f,c
  1919  00A0' B0D8               	btfsc	status,0,c
  1920  00A2' 2A00'              	incf	(___awmod@dividend+1)^0,f,c
  1921  00A4'                    l1599:
  1922  00A4' C01A' F01A'        	movff	___awmod@dividend,?___awmod
  1923  00A8' C01B' F01B'        	movff	___awmod@dividend+1,?___awmod+1
  1924  00AC' 0012               	return		;funcret
  1925  00AE'                    __end_of___awmod:
  1926                           	callstack 0
  1927                           
  1928 ;; *************** function ___awdiv *****************
  1929 ;; Defined at:
  1930 ;;		line 7 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/awdiv.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;  dividend        2   26[COMRAM] int 
  1933 ;;  divisor         2   28[COMRAM] int 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  quotient        2   32[COMRAM] int 
  1936 ;;  sign            1   31[COMRAM] unsigned char 
  1937 ;;  counter         1   30[COMRAM] unsigned char 
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  2   26[COMRAM] int 
  1940 ;; Registers used:
  1941 ;;		wreg, status,2, status,0
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1947 ;;      Params:         4       0       0       0       0       0       0
  1948 ;;      Locals:         4       0       0       0       0       0       0
  1949 ;;      Temps:          0       0       0       0       0       0       0
  1950 ;;      Totals:         8       0       0       0       0       0       0
  1951 ;;Total ram usage:        8 bytes
  1952 ;; Hardware stack levels used: 1
  1953 ;; Hardware stack levels required when called: 5
  1954 ;; This function calls:
  1955 ;;		Nothing
  1956 ;; This function is called by:
  1957 ;;		_itoa
  1958 ;;		_End_Timer
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text12
  1963  0000'                    __ptext12:
  1964                           	callstack 0
  1965  0000'                    ___awdiv:
  1966                           	callstack 22
  1967  0000' 6A00'              	clrf	___awdiv@sign^0,c
  1968  0002' BE00'              	btfsc	(___awdiv@divisor+1)^0,7,c
  1969  0004' EF00' F000'        	goto	u750
  1970  0008' EF00' F000'        	goto	u751
  1971  000C'                    u751:
  1972  000C' EF00' F000'        	goto	l1531
  1973  0010'                    u750:
  1974  0010' 6C00'              	negf	___awdiv@divisor^0,c
  1975  0012' 1E00'              	comf	(___awdiv@divisor+1)^0,f,c
  1976  0014' B0D8               	btfsc	status,0,c
  1977  0016' 2A00'              	incf	(___awdiv@divisor+1)^0,f,c
  1978  0018' 0E01               	movlw	1
  1979  001A' 6E00'              	movwf	___awdiv@sign^0,c
  1980  001C'                    l1531:
  1981  001C' BE00'              	btfsc	(___awdiv@dividend+1)^0,7,c
  1982  001E' EF00' F000'        	goto	u760
  1983  0022' EF00' F000'        	goto	u761
  1984  0026'                    u761:
  1985  0026' EF00' F000'        	goto	l1537
  1986  002A'                    u760:
  1987  002A' 6C00'              	negf	___awdiv@dividend^0,c
  1988  002C' 1E00'              	comf	(___awdiv@dividend+1)^0,f,c
  1989  002E' B0D8               	btfsc	status,0,c
  1990  0030' 2A00'              	incf	(___awdiv@dividend+1)^0,f,c
  1991  0032' 0E01               	movlw	1
  1992  0034' 1A00'              	xorwf	___awdiv@sign^0,f,c
  1993  0036'                    l1537:
  1994  0036' 0E00               	movlw	0
  1995  0038' 6E00'              	movwf	(___awdiv@quotient+1)^0,c
  1996  003A' 0E00               	movlw	0
  1997  003C' 6E00'              	movwf	___awdiv@quotient^0,c
  1998  003E' 5000'              	movf	___awdiv@divisor^0,w,c
  1999  0040' 1000'              	iorwf	(___awdiv@divisor+1)^0,w,c
  2000  0042' B4D8               	btfsc	status,2,c
  2001  0044' EF00' F000'        	goto	u771
  2002  0048' EF00' F000'        	goto	u770
  2003  004C'                    u771:
  2004  004C' EF00' F000'        	goto	l1559
  2005  0050'                    u770:
  2006  0050' 0E01               	movlw	1
  2007  0052' 6E00'              	movwf	___awdiv@counter^0,c
  2008  0054' EF00' F000'        	goto	l1545
  2009  0058'                    l1543:
  2010  0058' 90D8               	bcf	status,0,c
  2011  005A' 3600'              	rlcf	___awdiv@divisor^0,f,c
  2012  005C' 3600'              	rlcf	(___awdiv@divisor+1)^0,f,c
  2013  005E' 2A00'              	incf	___awdiv@counter^0,f,c
  2014  0060'                    l1545:
  2015  0060' AE00'              	btfss	(___awdiv@divisor+1)^0,7,c
  2016  0062' EF00' F000'        	goto	u781
  2017  0066' EF00' F000'        	goto	u780
  2018  006A'                    u781:
  2019  006A' EF00' F000'        	goto	l1543
  2020  006E'                    u780:
  2021  006E'                    l1547:
  2022  006E' 90D8               	bcf	status,0,c
  2023  0070' 3600'              	rlcf	___awdiv@quotient^0,f,c
  2024  0072' 3600'              	rlcf	(___awdiv@quotient+1)^0,f,c
  2025  0074' 5000'              	movf	___awdiv@divisor^0,w,c
  2026  0076' 5C00'              	subwf	___awdiv@dividend^0,w,c
  2027  0078' 5000'              	movf	(___awdiv@divisor+1)^0,w,c
  2028  007A' 5800'              	subwfb	(___awdiv@dividend+1)^0,w,c
  2029  007C' A0D8               	btfss	status,0,c
  2030  007E' EF00' F000'        	goto	u791
  2031  0082' EF00' F000'        	goto	u790
  2032  0086'                    u791:
  2033  0086' EF00' F000'        	goto	l1555
  2034  008A'                    u790:
  2035  008A' 5000'              	movf	___awdiv@divisor^0,w,c
  2036  008C' 5E00'              	subwf	___awdiv@dividend^0,f,c
  2037  008E' 5000'              	movf	(___awdiv@divisor+1)^0,w,c
  2038  0090' 5A00'              	subwfb	(___awdiv@dividend+1)^0,f,c
  2039  0092' 8000'              	bsf	___awdiv@quotient^0,0,c
  2040  0094'                    l1555:
  2041  0094' 90D8               	bcf	status,0,c
  2042  0096' 3200'              	rrcf	(___awdiv@divisor+1)^0,f,c
  2043  0098' 3200'              	rrcf	___awdiv@divisor^0,f,c
  2044  009A' 2E00'              	decfsz	___awdiv@counter^0,f,c
  2045  009C' EF00' F000'        	goto	l1547
  2046  00A0'                    l1559:
  2047  00A0' 5000'              	movf	___awdiv@sign^0,w,c
  2048  00A2' B4D8               	btfsc	status,2,c
  2049  00A4' EF00' F000'        	goto	u801
  2050  00A8' EF00' F000'        	goto	u800
  2051  00AC'                    u801:
  2052  00AC' EF00' F000'        	goto	l1563
  2053  00B0'                    u800:
  2054  00B0' 6C00'              	negf	___awdiv@quotient^0,c
  2055  00B2' 1E00'              	comf	(___awdiv@quotient+1)^0,f,c
  2056  00B4' B0D8               	btfsc	status,0,c
  2057  00B6' 2A00'              	incf	(___awdiv@quotient+1)^0,f,c
  2058  00B8'                    l1563:
  2059  00B8' C020' F01A'        	movff	___awdiv@quotient,?___awdiv
  2060  00BC' C021' F01B'        	movff	___awdiv@quotient+1,?___awdiv+1
  2061  00C0' 0012               	return		;funcret
  2062  00C2'                    __end_of___awdiv:
  2063                           	callstack 0
  2064                           
  2065 ;; *************** function _atoi *****************
  2066 ;; Defined at:
  2067 ;;		line 5 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/atoi.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;  s               2   26[COMRAM] PTR const unsigned char 
  2070 ;;		 -> NULL(0), ParsingData@input(100), 
  2071 ;; Auto vars:     Size  Location     Type
  2072 ;;  n               2   32[COMRAM] int 
  2073 ;;  neg             1   31[COMRAM] _Bool 
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  2   26[COMRAM] int 
  2076 ;; Registers used:
  2077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2083 ;;      Params:         2       0       0       0       0       0       0
  2084 ;;      Locals:         3       0       0       0       0       0       0
  2085 ;;      Temps:          3       0       0       0       0       0       0
  2086 ;;      Totals:         8       0       0       0       0       0       0
  2087 ;;Total ram usage:        8 bytes
  2088 ;; Hardware stack levels used: 1
  2089 ;; Hardware stack levels required when called: 5
  2090 ;; This function calls:
  2091 ;;		Nothing
  2092 ;; This function is called by:
  2093 ;;		_ParsingData
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           	psect	text13
  2098  0000'                    __ptext13:
  2099                           	callstack 0
  2100  0000'                    _atoi:
  2101                           	callstack 24
  2102  0000' 0E00               	movlw	0
  2103  0002' 6E00'              	movwf	(atoi@n+1)^0,c
  2104  0004' 0E00               	movlw	0
  2105  0006' 6E00'              	movwf	atoi@n^0,c
  2106  0008' 6A00'              	clrf	atoi@neg^0,c
  2107  000A' EF00' F000'        	goto	l1761
  2108  000E'                    l1759:
  2109  000E' 4A00'              	infsnz	atoi@s^0,f,c
  2110  0010' 2A00'              	incf	(atoi@s+1)^0,f,c
  2111  0012'                    l1761:
  2112  0012' C01A' FFD9         	movff	atoi@s,fsr2l
  2113  0016' C01B' FFDA         	movff	atoi@s+1,fsr2h
  2114  001A' 0E20               	movlw	32
  2115  001C' 18DE               	xorwf	postinc2,w,c
  2116  001E' B4D8               	btfsc	status,2,c
  2117  0020' EF00' F000'        	goto	u1111
  2118  0024' EF00' F000'        	goto	u1110
  2119  0028'                    u1111:
  2120  0028' EF00' F000'        	goto	l1759
  2121  002C'                    u1110:
  2122  002C' C01A' FFD9         	movff	atoi@s,fsr2l
  2123  0030' C01B' FFDA         	movff	atoi@s+1,fsr2h
  2124  0034' 50DF               	movf	indf2,w,c
  2125  0036' 6E00'              	movwf	??_atoi^0,c
  2126  0038' 0EF7               	movlw	247
  2127  003A' 2600'              	addwf	??_atoi^0,f,c
  2128  003C' 0E04               	movlw	4
  2129  003E' 6400'              	cpfsgt	??_atoi^0,c
  2130  0040' EF00' F000'        	goto	u1121
  2131  0044' EF00' F000'        	goto	u1120
  2132  0048'                    u1121:
  2133  0048' EF00' F000'        	goto	l1759
  2134  004C'                    u1120:
  2135  004C' C01A' FFD9         	movff	atoi@s,fsr2l
  2136  0050' C01B' FFDA         	movff	atoi@s+1,fsr2h
  2137  0054' 0E2D               	movlw	45
  2138  0056' 18DE               	xorwf	postinc2,w,c
  2139  0058' A4D8               	btfss	status,2,c
  2140  005A' EF00' F000'        	goto	u1131
  2141  005E' EF00' F000'        	goto	u1130
  2142  0062'                    u1131:
  2143  0062' EF00' F000'        	goto	l1771
  2144  0066'                    u1130:
  2145  0066' 0E01               	movlw	1
  2146  0068' 6E00'              	movwf	atoi@neg^0,c
  2147  006A'                    l1769:
  2148  006A' 4A00'              	infsnz	atoi@s^0,f,c
  2149  006C' 2A00'              	incf	(atoi@s+1)^0,f,c
  2150  006E' EF00' F000'        	goto	l1779
  2151  0072'                    l1771:
  2152  0072' C01A' FFD9         	movff	atoi@s,fsr2l
  2153  0076' C01B' FFDA         	movff	atoi@s+1,fsr2h
  2154  007A' 0E2B               	movlw	43
  2155  007C' 18DE               	xorwf	postinc2,w,c
  2156  007E' A4D8               	btfss	status,2,c
  2157  0080' EF00' F000'        	goto	u1141
  2158  0084' EF00' F000'        	goto	u1140
  2159  0088'                    u1141:
  2160  0088' EF00' F000'        	goto	l1779
  2161  008C'                    u1140:
  2162  008C' EF00' F000'        	goto	l1769
  2163  0090'                    l1775:
  2164  0090' 0E0A               	movlw	10
  2165  0092' 0200'              	mulwf	atoi@n^0,c
  2166  0094' CFF3 F01C'         	movff	prodl,??_atoi
  2167  0098' CFF4 F01D'         	movff	prodh,??_atoi+1
  2168  009C' 0200'              	mulwf	(atoi@n+1)^0,c
  2169  009E' 50F3               	movf	prodl,w,c
  2170  00A0' 2600'              	addwf	(??_atoi+1)^0,f,c
  2171  00A2' C01A' FFD9         	movff	atoi@s,fsr2l
  2172  00A6' C01B' FFDA         	movff	atoi@s+1,fsr2h
  2173  00AA' 50DF               	movf	indf2,w,c
  2174  00AC' 6E00'              	movwf	(??_atoi+2)^0,c
  2175  00AE' 5000'              	movf	(??_atoi+2)^0,w,c
  2176  00B0' 5E00'              	subwf	??_atoi^0,f,c
  2177  00B2' 0E00               	movlw	0
  2178  00B4' 5A00'              	subwfb	(??_atoi+1)^0,f,c
  2179  00B6' 0E30               	movlw	48
  2180  00B8' 2400'              	addwf	??_atoi^0,w,c
  2181  00BA' 6E00'              	movwf	atoi@n^0,c
  2182  00BC' 0E00               	movlw	0
  2183  00BE' 2000'              	addwfc	(??_atoi+1)^0,w,c
  2184  00C0' 6E00'              	movwf	(atoi@n+1)^0,c
  2185  00C2' EF00' F000'        	goto	l1769
  2186  00C6'                    l1779:
  2187  00C6' C01A' FFD9         	movff	atoi@s,fsr2l
  2188  00CA' C01B' FFDA         	movff	atoi@s+1,fsr2h
  2189  00CE' 50DF               	movf	indf2,w,c
  2190  00D0' 6E00'              	movwf	??_atoi^0,c
  2191  00D2' 0ED0               	movlw	208
  2192  00D4' 2600'              	addwf	??_atoi^0,f,c
  2193  00D6' 0E09               	movlw	9
  2194  00D8' 6400'              	cpfsgt	??_atoi^0,c
  2195  00DA' EF00' F000'        	goto	u1151
  2196  00DE' EF00' F000'        	goto	u1150
  2197  00E2'                    u1151:
  2198  00E2' EF00' F000'        	goto	l1775
  2199  00E6'                    u1150:
  2200  00E6' 5000'              	movf	atoi@neg^0,w,c
  2201  00E8' A4D8               	btfss	status,2,c
  2202  00EA' EF00' F000'        	goto	u1161
  2203  00EE' EF00' F000'        	goto	u1160
  2204  00F2'                    u1161:
  2205  00F2' EF00' F000'        	goto	l899
  2206  00F6'                    u1160:
  2207  00F6' C020' F01C'        	movff	atoi@n,??_atoi
  2208  00FA' C021' F01D'        	movff	atoi@n+1,??_atoi+1
  2209  00FE' 1E00'              	comf	??_atoi^0,f,c
  2210  0100' 1E00'              	comf	(??_atoi+1)^0,f,c
  2211  0102' 4A00'              	infsnz	??_atoi^0,f,c
  2212  0104' 2A00'              	incf	(??_atoi+1)^0,f,c
  2213  0106' C01C' F01A'        	movff	??_atoi,?_atoi
  2214  010A' C01D' F01B'        	movff	??_atoi+1,?_atoi+1
  2215  010E' EF00' F000'        	goto	l902
  2216  0112'                    l899:
  2217  0112' C020' F01A'        	movff	atoi@n,?_atoi
  2218  0116' C021' F01B'        	movff	atoi@n+1,?_atoi+1
  2219  011A'                    l902:
  2220  011A' 0012               	return		;funcret
  2221  011C'                    __end_of_atoi:
  2222                           	callstack 0
  2223                           
  2224 ;; *************** function _GetString *****************
  2225 ;; Defined at:
  2226 ;;		line 99 in file "newmain.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;  str             2   34[COMRAM] PTR unsigned char 
  2229 ;;		 -> main@str(100), ParsingData@str(100), 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;		None
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  2   34[COMRAM] int 
  2234 ;; Registers used:
  2235 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2241 ;;      Params:         2       0       0       0       0       0       0
  2242 ;;      Locals:         0       0       0       0       0       0       0
  2243 ;;      Temps:          1       0       0       0       0       0       0
  2244 ;;      Totals:         3       0       0       0       0       0       0
  2245 ;;Total ram usage:        3 bytes
  2246 ;; Hardware stack levels used: 1
  2247 ;; Hardware stack levels required when called: 6
  2248 ;; This function calls:
  2249 ;;		_ClearBuffer
  2250 ;;		_strcpy
  2251 ;; This function is called by:
  2252 ;;		_ParsingData
  2253 ;;		_main
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           	psect	text14
  2258  0000'                    __ptext14:
  2259                           	callstack 0
  2260  0000'                    _GetString:
  2261                           	callstack 23
  2262  0000'                    
  2263                           ;newmain.c: 100:     if (buffer[buffer_size - 1] == '\r') {
  2264  0000' 0E00'              	movlw	low (_buffer+65535)
  2265  0002' 2400'              	addwf	_buffer_size^0,w,c
  2266  0004' 6ED9               	movwf	fsr2l,c
  2267  0006' 0E00'              	movlw	high (_buffer+65535)
  2268  0008' 2000'              	addwfc	(_buffer_size+1)^0,w,c
  2269  000A' 6EDA               	movwf	fsr2h,c
  2270  000C' 0E0D               	movlw	13
  2271  000E' 18DE               	xorwf	postinc2,w,c
  2272  0010' A4D8               	btfss	status,2,c
  2273  0012' EF00' F000'        	goto	u1051
  2274  0016' EF00' F000'        	goto	u1050
  2275  001A'                    u1051:
  2276  001A' EF00' F000'        	goto	l1709
  2277  001E'                    u1050:
  2278  001E'                    
  2279                           ;newmain.c: 101:         buffer[--buffer_size] = '\0';
  2280  001E' 0600'              	decf	_buffer_size^0,f,c
  2281  0020' A0D8               	btfss	status,0,c
  2282  0022' 0600'              	decf	(_buffer_size+1)^0,f,c
  2283  0024' 0E00'              	movlw	low _buffer
  2284  0026' 2400'              	addwf	_buffer_size^0,w,c
  2285  0028' 6ED9               	movwf	fsr2l,c
  2286  002A' 0E00'              	movlw	high _buffer
  2287  002C' 2000'              	addwfc	(_buffer_size+1)^0,w,c
  2288  002E' 6EDA               	movwf	fsr2h,c
  2289  0030' 6ADF               	clrf	indf2,c
  2290  0032'                    
  2291                           ;newmain.c: 102:         strcpy(str, buffer);
  2292  0032' C022' F01A'        	movff	GetString@str,strcpy@dest
  2293  0036' C023' F01B'        	movff	GetString@str+1,strcpy@dest+1
  2294  003A' 0E00'              	movlw	low _buffer
  2295  003C' 6E00'              	movwf	strcpy@src^0,c
  2296  003E' 0E00'              	movlw	high _buffer
  2297  0040' 6E00'              	movwf	(strcpy@src+1)^0,c
  2298  0042' EC00' F000'        	call	_strcpy	;wreg free
  2299  0046'                    
  2300                           ;newmain.c: 103:         ClearBuffer();
  2301  0046' EC00' F000'        	call	_ClearBuffer	;wreg free
  2302  004A'                    
  2303                           ;newmain.c: 104:         return 1;
  2304  004A' 0E00               	movlw	0
  2305  004C' 6E00'              	movwf	(?_GetString+1)^0,c
  2306  004E' 0E01               	movlw	1
  2307  0050' 6E00'              	movwf	?_GetString^0,c
  2308  0052' EF00' F000'        	goto	l115
  2309  0056'                    l1709:
  2310                           
  2311                           ;newmain.c: 106:         str[0] = '\0';
  2312  0056' C022' FFD9         	movff	GetString@str,fsr2l
  2313  005A' C023' FFDA         	movff	GetString@str+1,fsr2h
  2314  005E' 6ADF               	clrf	indf2,c
  2315  0060'                    
  2316                           ;newmain.c: 107:         return 0;
  2317  0060' 0E00               	movlw	0
  2318  0062' 6E00'              	movwf	(?_GetString+1)^0,c
  2319  0064' 0E00               	movlw	0
  2320  0066' 6E00'              	movwf	?_GetString^0,c
  2321  0068'                    l115:
  2322  0068' 0012               	return		;funcret
  2323  006A'                    __end_of_GetString:
  2324                           	callstack 0
  2325                           
  2326 ;; *************** function _strcpy *****************
  2327 ;; Defined at:
  2328 ;;		line 3 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/strcpy.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  dest            2   26[COMRAM] PTR unsigned char 
  2331 ;;		 -> main@str(100), ParsingData@str(100), ParsingData@input(100), output_total_dis@output(100), 
  2332 ;;		 -> get_StepLength@ask(100), 
  2333 ;;  src             2   28[COMRAM] PTR const unsigned char 
  2334 ;;		 -> ParsingData@str(100), STR_2(15), STR_1(20), buffer(100), 
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  d               2   32[COMRAM] PTR unsigned char 
  2337 ;;		 -> main@str(100), ParsingData@str(100), ParsingData@input(100), output_total_dis@output(100), 
  2338 ;;		 -> get_StepLength@ask(100), 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  2   26[COMRAM] PTR unsigned char 
  2341 ;; Registers used:
  2342 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2348 ;;      Params:         4       0       0       0       0       0       0
  2349 ;;      Locals:         2       0       0       0       0       0       0
  2350 ;;      Temps:          2       0       0       0       0       0       0
  2351 ;;      Totals:         8       0       0       0       0       0       0
  2352 ;;Total ram usage:        8 bytes
  2353 ;; Hardware stack levels used: 1
  2354 ;; Hardware stack levels required when called: 5
  2355 ;; This function calls:
  2356 ;;		Nothing
  2357 ;; This function is called by:
  2358 ;;		_GetString
  2359 ;;		_ParsingData
  2360 ;;		_get_StepLength
  2361 ;;		_output_total_dis
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365                           	psect	text15
  2366  0000'                    __ptext15:
  2367                           	callstack 0
  2368  0000'                    _strcpy:
  2369                           	callstack 24
  2370  0000' C01A' F020'        	movff	strcpy@dest,strcpy@d
  2371  0004' C01B' F021'        	movff	strcpy@dest+1,strcpy@d+1
  2372  0008'                    l1639:
  2373  0008' 5000'              	movf	strcpy@src^0,w,c
  2374  000A' 6E00'              	movwf	??_strcpy^0,c
  2375  000C' 5000'              	movf	(strcpy@src+1)^0,w,c
  2376  000E' 6E00'              	movwf	(??_strcpy+1)^0,c
  2377  0010' 4A00'              	infsnz	strcpy@src^0,f,c
  2378  0012' 2A00'              	incf	(strcpy@src+1)^0,f,c
  2379  0014' C01E' FFF6         	movff	??_strcpy,tblptrl
  2380  0018' C01F' FFF7         	movff	??_strcpy+1,tblptrh
  2381  001C' 6AF8               	clrf	tblptru,c
  2382  001E' C020' FFD9         	movff	strcpy@d,fsr2l
  2383  0022' C021' FFDA         	movff	strcpy@d+1,fsr2h
  2384  0026' 4A00'              	infsnz	strcpy@d^0,f,c
  2385  0028' 2A00'              	incf	(strcpy@d+1)^0,f,c
  2386  002A' 0EFF'              	movlw	(high __ramtop+-1)
  2387  002C' 64F7               	cpfsgt	tblptrh,c
  2388  002E' D003               	bra	u957
  2389  0030' 0008               	tblrd		*
  2390  0032' 50F5               	movf	tablat,w,c
  2391  0034' D005               	bra	u950
  2392  0036'                    u957:
  2393  0036' CFF6 FFE9          	movff	tblptrl,fsr0l
  2394  003A' CFF7 FFEA          	movff	tblptrh,fsr0h
  2395  003E' 50EF               	movf	indf0,w,c
  2396  0040'                    u950:
  2397  0040' 6EDF               	movwf	indf2,c
  2398  0042' 50DF               	movf	indf2,w,c
  2399  0044' A4D8               	btfss	status,2,c
  2400  0046' EF00' F000'        	goto	u961
  2401  004A' EF00' F000'        	goto	u960
  2402  004E'                    u961:
  2403  004E' EF00' F000'        	goto	l1639
  2404  0052'                    u960:
  2405  0052' 0012               	return		;funcret
  2406  0054'                    __end_of_strcpy:
  2407                           	callstack 0
  2408                           
  2409 ;; *************** function _ClearBuffer *****************
  2410 ;; Defined at:
  2411 ;;		line 86 in file "newmain.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;		None
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  i               2   26[COMRAM] int 
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  1    wreg      void 
  2418 ;; Registers used:
  2419 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2425 ;;      Params:         0       0       0       0       0       0       0
  2426 ;;      Locals:         2       0       0       0       0       0       0
  2427 ;;      Temps:          0       0       0       0       0       0       0
  2428 ;;      Totals:         2       0       0       0       0       0       0
  2429 ;;Total ram usage:        2 bytes
  2430 ;; Hardware stack levels used: 1
  2431 ;; Hardware stack levels required when called: 5
  2432 ;; This function calls:
  2433 ;;		Nothing
  2434 ;; This function is called by:
  2435 ;;		_GetString
  2436 ;;		_ParsingData
  2437 ;;		_main
  2438 ;;		_get_StepLength
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text16
  2443  0000'                    __ptext16:
  2444                           	callstack 0
  2445  0000'                    _ClearBuffer:
  2446                           	callstack 23
  2447  0000'                    
  2448                           ;newmain.c: 87:     for (int i = 0; i < 100; i++)
  2449  0000' 0E00               	movlw	0
  2450  0002' 6E00'              	movwf	(ClearBuffer@i+1)^0,c
  2451  0004' 0E00               	movlw	0
  2452  0006' 6E00'              	movwf	ClearBuffer@i^0,c
  2453  0008'                    l1629:
  2454                           
  2455                           ;newmain.c: 88:         buffer[i] = '\0';
  2456  0008' 0E00'              	movlw	low _buffer
  2457  000A' 2400'              	addwf	ClearBuffer@i^0,w,c
  2458  000C' 6ED9               	movwf	fsr2l,c
  2459  000E' 0E00'              	movlw	high _buffer
  2460  0010' 2000'              	addwfc	(ClearBuffer@i+1)^0,w,c
  2461  0012' 6EDA               	movwf	fsr2h,c
  2462  0014' 6ADF               	clrf	indf2,c
  2463  0016' 4A00'              	infsnz	ClearBuffer@i^0,f,c
  2464  0018' 2A00'              	incf	(ClearBuffer@i+1)^0,f,c
  2465  001A' BE00'              	btfsc	(ClearBuffer@i+1)^0,7,c
  2466  001C' EF00' F000'        	goto	u941
  2467  0020' 5000'              	movf	(ClearBuffer@i+1)^0,w,c
  2468  0022' E109               	bnz	u940
  2469  0024' 0E64               	movlw	100
  2470  0026' 5C00'              	subwf	ClearBuffer@i^0,w,c
  2471  0028' A0D8               	btfss	status,0,c
  2472  002A' EF00' F000'        	goto	u941
  2473  002E' EF00' F000'        	goto	u940
  2474  0032'                    u941:
  2475  0032' EF00' F000'        	goto	l1629
  2476  0036'                    u940:
  2477  0036'                    
  2478                           ;newmain.c: 89:     buffer_size = 0;
  2479  0036' 0E00               	movlw	0
  2480  0038' 6E00'              	movwf	(_buffer_size+1)^0,c
  2481  003A' 0E00               	movlw	0
  2482  003C' 6E00'              	movwf	_buffer_size^0,c
  2483  003E' 0012               	return		;funcret
  2484  0040'                    __end_of_ClearBuffer:
  2485                           	callstack 0
  2486                           
  2487 ;; *************** function _Initialize *****************
  2488 ;; Defined at:
  2489 ;;		line 128 in file "newmain.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      void 
  2496 ;; Registers used:
  2497 ;;		wreg, status,2, status,0
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2503 ;;      Params:         0       0       0       0       0       0       0
  2504 ;;      Locals:         0       0       0       0       0       0       0
  2505 ;;      Temps:          0       0       0       0       0       0       0
  2506 ;;      Totals:         0       0       0       0       0       0       0
  2507 ;;Total ram usage:        0 bytes
  2508 ;; Hardware stack levels used: 1
  2509 ;; Hardware stack levels required when called: 5
  2510 ;; This function calls:
  2511 ;;		Nothing
  2512 ;; This function is called by:
  2513 ;;		_main
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           	psect	text17
  2518  0000'                    __ptext17:
  2519                           	callstack 0
  2520  0000'                    _Initialize:
  2521                           	callstack 25
  2522  0000'                    
  2523                           ;newmain.c: 130:     OSCCONbits.IRCF = 0b110;
  2524  0000' 50D3               	movf	211,w,c	;volatile
  2525  0002' 0B8F               	andlw	-113
  2526  0004' 0960               	iorlw	96
  2527  0006' 6ED3               	movwf	211,c	;volatile
  2528  0008'                    
  2529                           ;newmain.c: 132:     TRISAbits.RA0 = 1;
  2530  0008' 8092               	bsf	146,0,c	;volatile
  2531                           
  2532                           ;newmain.c: 133:     ADCON1bits.PCFG = 0b1110;
  2533  000A' 50C1               	movf	193,w,c	;volatile
  2534  000C' 0BF0               	andlw	-16
  2535  000E' 090E               	iorlw	14
  2536  0010' 6EC1               	movwf	193,c	;volatile
  2537                           
  2538                           ;newmain.c: 134:     ADCON0bits.CHS = 0b0000;
  2539  0012' 0EC3               	movlw	-61
  2540  0014' 16C2               	andwf	194,f,c	;volatile
  2541  0016'                    
  2542                           ;newmain.c: 135:     ADCON1bits.VCFG0 = 0;
  2543  0016' 98C1               	bcf	193,4,c	;volatile
  2544  0018'                    
  2545                           ;newmain.c: 136:     ADCON1bits.VCFG1 = 0;
  2546  0018' 9AC1               	bcf	193,5,c	;volatile
  2547                           
  2548                           ;newmain.c: 137:     ADCON2bits.ADCS = 0b000;
  2549  001A' 0EF8               	movlw	-8
  2550  001C' 16C0               	andwf	192,f,c	;volatile
  2551                           
  2552                           ;newmain.c: 138:     ADCON2bits.ACQT = 0b001;
  2553  001E' 50C0               	movf	192,w,c	;volatile
  2554  0020' 0BC7               	andlw	-57
  2555  0022' 0908               	iorlw	8
  2556  0024' 6EC0               	movwf	192,c	;volatile
  2557  0026'                    
  2558                           ;newmain.c: 139:     ADCON0bits.ADON = 1;
  2559  0026' 80C2               	bsf	194,0,c	;volatile
  2560  0028'                    
  2561                           ;newmain.c: 140:     ADCON2bits.ADFM = 1;
  2562  0028' 8EC0               	bsf	192,7,c	;volatile
  2563  002A'                    
  2564                           ;newmain.c: 143:     T2CONbits.TMR2ON = 0b1;
  2565  002A' 84CA               	bsf	202,2,c	;volatile
  2566                           
  2567                           ;newmain.c: 144:     T2CONbits.T2CKPS = 0b11;
  2568  002C' 0E03               	movlw	3
  2569  002E' 12CA               	iorwf	202,f,c	;volatile
  2570                           
  2571                           ;newmain.c: 145:     CCP1CONbits.CCP1M = 0b1100;
  2572  0030' 50BD               	movf	189,w,c	;volatile
  2573  0032' 0BF0               	andlw	-16
  2574  0034' 090C               	iorlw	12
  2575  0036' 6EBD               	movwf	189,c	;volatile
  2576                           
  2577                           ;newmain.c: 146:     PR2 = 0x9b;
  2578  0038' 0E9B               	movlw	155
  2579  003A' 6ECB               	movwf	203,c	;volatile
  2580  003C'                    
  2581                           ;newmain.c: 148:     TRISCbits.TRISC2 = 0;
  2582  003C' 9494               	bcf	148,2,c	;volatile
  2583  003E'                    
  2584                           ;newmain.c: 151:     TRISA &= 0xF1;
  2585  003E' 0EF1               	movlw	241
  2586  0040' 1692               	andwf	146,f,c	;volatile
  2587  0042'                    
  2588                           ;newmain.c: 152:     TRISB = 1;
  2589  0042' 0E01               	movlw	1
  2590  0044' 6E93               	movwf	147,c	;volatile
  2591  0046'                    
  2592                           ;newmain.c: 153:     TRISC = 0;
  2593  0046' 6A94               	clrf	148,c	;volatile
  2594                           
  2595                           ;newmain.c: 154:     LATA &= 0xF1;
  2596  0048' 0EF1               	movlw	241
  2597  004A' 1689               	andwf	137,f,c	;volatile
  2598  004C'                    
  2599                           ;newmain.c: 155:     LATC = 0;
  2600  004C' 6A8B               	clrf	139,c	;volatile
  2601  004E'                    
  2602                           ;newmain.c: 158:     INTCONbits.INT0IF = 0;
  2603  004E' 92F2               	bcf	242,1,c	;volatile
  2604  0050'                    
  2605                           ;newmain.c: 159:     INTCONbits.INT0IE = 1;
  2606  0050' 88F2               	bsf	242,4,c	;volatile
  2607  0052'                    
  2608                           ;newmain.c: 160:     PIE1bits.ADIE = 1;
  2609  0052' 8C9D               	bsf	157,6,c	;volatile
  2610  0054'                    
  2611                           ;newmain.c: 161:     PIR1bits.ADIF = 0;
  2612  0054' 9C9E               	bcf	158,6,c	;volatile
  2613  0056'                    
  2614                           ;newmain.c: 162:     INTCONbits.PEIE = 1;
  2615  0056' 8CF2               	bsf	242,6,c	;volatile
  2616  0058'                    
  2617                           ;newmain.c: 163:     INTCONbits.GIE = 1;
  2618  0058' 8EF2               	bsf	242,7,c	;volatile
  2619  005A'                    
  2620                           ;newmain.c: 164:     RCONbits.IPEN = 1;
  2621  005A' 8ED0               	bsf	208,7,c	;volatile
  2622  005C'                    
  2623                           ;newmain.c: 165:     INTCONbits.GIEH = 1;
  2624  005C' 8EF2               	bsf	242,7,c	;volatile
  2625  005E'                    
  2626                           ;newmain.c: 166:     INTCONbits.GIEL = 1;
  2627  005E' 8CF2               	bsf	242,6,c	;volatile
  2628  0060'                    
  2629                           ;newmain.c: 178:     TRISCbits.TRISC6 = 1;
  2630  0060' 8C94               	bsf	148,6,c	;volatile
  2631  0062'                    
  2632                           ;newmain.c: 179:     TRISCbits.TRISC7 = 1;
  2633  0062' 8E94               	bsf	148,7,c	;volatile
  2634  0064'                    
  2635                           ;newmain.c: 183:     TXSTAbits.SYNC = 0;
  2636  0064' 98AC               	bcf	172,4,c	;volatile
  2637  0066'                    
  2638                           ;newmain.c: 184:     BAUDCONbits.BRG16 = 0;
  2639  0066' 96B8               	bcf	184,3,c	;volatile
  2640  0068'                    
  2641                           ;newmain.c: 185:     TXSTAbits.BRGH = 0;
  2642  0068' 94AC               	bcf	172,2,c	;volatile
  2643  006A'                    
  2644                           ;newmain.c: 186:     SPBRG = 51;
  2645  006A' 0E33               	movlw	51
  2646  006C' 6EAF               	movwf	175,c	;volatile
  2647  006E'                    
  2648                           ;newmain.c: 189:     RCSTAbits.SPEN = 1;
  2649  006E' 8EAB               	bsf	171,7,c	;volatile
  2650  0070'                    
  2651                           ;newmain.c: 190:     PIR1bits.TXIF = 0;
  2652  0070' 989E               	bcf	158,4,c	;volatile
  2653  0072'                    
  2654                           ;newmain.c: 191:     PIR1bits.RCIF = 0;
  2655  0072' 9A9E               	bcf	158,5,c	;volatile
  2656  0074'                    
  2657                           ;newmain.c: 192:     TXSTAbits.TXEN = 1;
  2658  0074' 8AAC               	bsf	172,5,c	;volatile
  2659  0076'                    
  2660                           ;newmain.c: 193:     RCSTAbits.CREN = 1;
  2661  0076' 88AB               	bsf	171,4,c	;volatile
  2662  0078'                    
  2663                           ;newmain.c: 194:     PIE1bits.TXIE = 0;
  2664  0078' 989D               	bcf	157,4,c	;volatile
  2665  007A'                    
  2666                           ;newmain.c: 195:     IPR1bits.TXIP = 0;
  2667  007A' 989F               	bcf	159,4,c	;volatile
  2668  007C'                    
  2669                           ;newmain.c: 196:     PIE1bits.RCIE = 1;
  2670  007C' 8A9D               	bsf	157,5,c	;volatile
  2671  007E'                    
  2672                           ;newmain.c: 197:     IPR1bits.RCIP = 0;
  2673  007E' 9A9F               	bcf	159,5,c	;volatile
  2674  0080'                    
  2675                           ;newmain.c: 209:     ADCON0bits.GO = 1;
  2676  0080' 82C2               	bsf	194,1,c	;volatile
  2677  0082'                    
  2678                           ;newmain.c: 212:     T2CON = 0b01111111;
  2679  0082' 0E7F               	movlw	127
  2680  0084' 6ECA               	movwf	202,c	;volatile
  2681  0086'                    
  2682                           ;newmain.c: 213:     PR2 = 122;
  2683  0086' 0E7A               	movlw	122
  2684  0088' 6ECB               	movwf	203,c	;volatile
  2685  008A'                    
  2686                           ;newmain.c: 214:     PIR1bits.TMR2IF = 0;
  2687  008A' 929E               	bcf	158,1,c	;volatile
  2688  008C'                    
  2689                           ;newmain.c: 215:     PIE1bits.TMR2IE = 1;
  2690  008C' 829D               	bsf	157,1,c	;volatile
  2691  008E'                    
  2692                           ;newmain.c: 216:     IPR1bits.TMR2IP = 1;
  2693  008E' 829F               	bsf	159,1,c	;volatile
  2694  0090' 0012               	return		;funcret
  2695  0092'                    __end_of_Initialize:
  2696                           	callstack 0
  2697                           
  2698 ;; *************** function _Lo_ISR *****************
  2699 ;; Defined at:
  2700 ;;		line 111 in file "newmain.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;		None
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;		None
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      void 
  2707 ;; Registers used:
  2708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2714 ;;      Params:         0       0       0       0       0       0       0
  2715 ;;      Locals:         0       0       0       0       0       0       0
  2716 ;;      Temps:          5       0       0       0       0       0       0
  2717 ;;      Totals:         5       0       0       0       0       0       0
  2718 ;;Total ram usage:        5 bytes
  2719 ;; Hardware stack levels used: 1
  2720 ;; Hardware stack levels required when called: 4
  2721 ;; This function calls:
  2722 ;;		_MyusartRead
  2723 ;; This function is called by:
  2724 ;;		Interrupt level 1
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	intcodelo
  2729  0000'                    __pintcodelo:
  2730                           	callstack 0
  2731  0000'                    _Lo_ISR:
  2732                           	callstack 22
  2733                           
  2734                           ;incstack = 0
  2735  0000' 8000'              	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  2736  0002' CFD8 F015'         	movff	status,??_Lo_ISR
  2737  0006' CFE8 F016'         	movff	wreg,??_Lo_ISR+1
  2738  000A' CFE0 F017'         	movff	bsr,??_Lo_ISR+2
  2739  000E' CFD9 F018'         	movff	fsr2l,??_Lo_ISR+3
  2740  0012' CFDA F019'         	movff	fsr2h,??_Lo_ISR+4
  2741  0016'                    
  2742                           ;newmain.c: 112:     if (RCIF) {
  2743  0016' AA9E               	btfss	3998,5,c	;volatile
  2744  0018' EF00' F000'        	goto	i1u128_21
  2745  001C' EF00' F000'        	goto	i1u128_20
  2746  0020'                    i1u128_21:
  2747  0020' EF00' F000'        	goto	i1l123
  2748  0024'                    i1u128_20:
  2749  0024'                    
  2750                           ;newmain.c: 113:         if (RCSTAbits.OERR) {
  2751  0024' A2AB               	btfss	171,1,c	;volatile
  2752  0026' EF00' F000'        	goto	i1u129_21
  2753  002A' EF00' F000'        	goto	i1u129_20
  2754  002E'                    i1u129_21:
  2755  002E' EF00' F000'        	goto	i1l1933
  2756  0032'                    i1u129_20:
  2757  0032'                    
  2758                           ;newmain.c: 114:             CREN = 0;
  2759  0032' 98AB               	bcf	4011,4,c	;volatile
  2760                           
  2761                           ;newmain.c: 115:             __nop();
  2762  0034' 0000               	nop	
  2763                           
  2764                           ;newmain.c: 116:             CREN = 1;
  2765  0036' 88AB               	bsf	4011,4,c	;volatile
  2766  0038'                    i1l1933:
  2767                           
  2768                           ;newmain.c: 119:         MyusartRead();
  2769  0038' EC00' F000'        	call	_MyusartRead	;wreg free
  2770  003C'                    i1l123:
  2771  003C' C019' FFDA         	movff	??_Lo_ISR+4,fsr2h
  2772  0040' C018' FFD9         	movff	??_Lo_ISR+3,fsr2l
  2773  0044' C017' FFE0         	movff	??_Lo_ISR+2,bsr
  2774  0048' C016' FFE8         	movff	??_Lo_ISR+1,wreg
  2775  004C' C015' FFD8         	movff	??_Lo_ISR,status
  2776  0050' 9000'              	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2777  0052' 0010               	retfie	
  2778  0054'                    __end_of_Lo_ISR:
  2779                           	callstack 0
  2780                           
  2781 ;; *************** function _MyusartRead *****************
  2782 ;; Defined at:
  2783 ;;		line 92 in file "newmain.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;		None
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;  data            1   20[COMRAM] unsigned char 
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  1    wreg      void 
  2790 ;; Registers used:
  2791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2797 ;;      Params:         0       0       0       0       0       0       0
  2798 ;;      Locals:         1       0       0       0       0       0       0
  2799 ;;      Temps:          1       0       0       0       0       0       0
  2800 ;;      Totals:         2       0       0       0       0       0       0
  2801 ;;Total ram usage:        2 bytes
  2802 ;; Hardware stack levels used: 1
  2803 ;; Hardware stack levels required when called: 3
  2804 ;; This function calls:
  2805 ;;		i1_putch
  2806 ;; This function is called by:
  2807 ;;		_Lo_ISR
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text19
  2812  0000'                    __ptext19:
  2813                           	callstack 0
  2814  0000'                    _MyusartRead:
  2815                           	callstack 22
  2816  0000'                    
  2817                           ;newmain.c: 93:     char data = RCREG;
  2818  0000' CFAE F014'         	movff	4014,MyusartRead@data	;volatile
  2819  0004'                    
  2820                           ;newmain.c: 94:     if (!(((unsigned char)((data)-0x20)) < 0x5f) && data != '\r') return
      +                          ;
  2821  0004' C014' F013'        	movff	MyusartRead@data,??_MyusartRead
  2822  0008' 0EE0               	movlw	224
  2823  000A' 2600'              	addwf	??_MyusartRead^0,f,c
  2824  000C' 0E5E               	movlw	94
  2825  000E' 6400'              	cpfsgt	??_MyusartRead^0,c
  2826  0010' EF00' F000'        	goto	i1u122_21
  2827  0014' EF00' F000'        	goto	i1u122_20
  2828  0018'                    i1u122_21:
  2829  0018' EF00' F000'        	goto	i1l1801
  2830  001C'                    i1u122_20:
  2831  001C' 0E0D               	movlw	13
  2832  001E' 1800'              	xorwf	MyusartRead@data^0,w,c
  2833  0020' B4D8               	btfsc	status,2,c
  2834  0022' EF00' F000'        	goto	i1u123_21
  2835  0026' EF00' F000'        	goto	i1u123_20
  2836  002A'                    i1u123_21:
  2837  002A' EF00' F000'        	goto	i1l1801
  2838  002E'                    i1u123_20:
  2839  002E' EF00' F000'        	goto	i1l111
  2840  0032'                    i1l1801:
  2841                           
  2842                           ;newmain.c: 95:     buffer[buffer_size++] = data;
  2843  0032' 0E00'              	movlw	low _buffer
  2844  0034' 2400'              	addwf	_buffer_size^0,w,c
  2845  0036' 6ED9               	movwf	fsr2l,c
  2846  0038' 0E00'              	movlw	high _buffer
  2847  003A' 2000'              	addwfc	(_buffer_size+1)^0,w,c
  2848  003C' 6EDA               	movwf	fsr2h,c
  2849  003E' C014' FFDF         	movff	MyusartRead@data,indf2
  2850  0042' 4A00'              	infsnz	_buffer_size^0,f,c
  2851  0044' 2A00'              	incf	(_buffer_size+1)^0,f,c
  2852  0046'                    
  2853                           ;newmain.c: 96:     putch(data);
  2854  0046' 5000'              	movf	MyusartRead@data^0,w,c
  2855  0048' EC00' F000'        	call	i1_putch
  2856  004C'                    i1l111:
  2857  004C' 0012               	return		;funcret
  2858  004E'                    __end_of_MyusartRead:
  2859                           	callstack 0
  2860                           
  2861 ;; *************** function i1_putch *****************
  2862 ;; Defined at:
  2863 ;;		line 74 in file "newmain.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;  data            1    wreg     unsigned char 
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;  data            1   18[COMRAM] unsigned char 
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		wreg, status,2, status,0
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2877 ;;      Params:         0       0       0       0       0       0       0
  2878 ;;      Locals:         1       0       0       0       0       0       0
  2879 ;;      Temps:          0       0       0       0       0       0       0
  2880 ;;      Totals:         1       0       0       0       0       0       0
  2881 ;;Total ram usage:        1 bytes
  2882 ;; Hardware stack levels used: 1
  2883 ;; Hardware stack levels required when called: 2
  2884 ;; This function calls:
  2885 ;;		Nothing
  2886 ;; This function is called by:
  2887 ;;		_MyusartRead
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text20
  2892  0000'                    __ptext20:
  2893                           	callstack 0
  2894  0000'                    i1_putch:
  2895                           	callstack 22
  2896                           
  2897                           ;incstack = 0
  2898                           ;i1putch@data stored from wreg
  2899  0000' 6E00'              	movwf	i1putch@data^0,c
  2900  0002'                    
  2901                           ;newmain.c: 75:     if (data == '\n' || data == '\r') {
  2902  0002' 0E0A               	movlw	10
  2903  0004' 1800'              	xorwf	i1putch@data^0,w,c
  2904  0006' B4D8               	btfsc	status,2,c
  2905  0008' EF00' F000'        	goto	i1u117_21
  2906  000C' EF00' F000'        	goto	i1u117_20
  2907  0010'                    i1u117_21:
  2908  0010' EF00' F000'        	goto	i1l92
  2909  0014'                    i1u117_20:
  2910  0014' 0E0D               	movlw	13
  2911  0016' 1800'              	xorwf	i1putch@data^0,w,c
  2912  0018' A4D8               	btfss	status,2,c
  2913  001A' EF00' F000'        	goto	i1u118_21
  2914  001E' EF00' F000'        	goto	i1u118_20
  2915  0022'                    i1u118_21:
  2916  0022' EF00' F000'        	goto	i1l99
  2917  0026'                    i1u118_20:
  2918  0026'                    i1l92:
  2919  0026' A2AC               	btfss	172,1,c	;volatile
  2920  0028' EF00' F000'        	goto	i1u119_21
  2921  002C' EF00' F000'        	goto	i1u119_20
  2922  0030'                    i1u119_21:
  2923  0030' EF00' F000'        	goto	i1l92
  2924  0034'                    i1u119_20:
  2925  0034'                    
  2926                           ;newmain.c: 77:         TXREG = '\r';
  2927  0034' 0E0D               	movlw	13
  2928  0036' 6EAD               	movwf	173,c	;volatile
  2929  0038'                    i1l95:
  2930  0038' A2AC               	btfss	172,1,c	;volatile
  2931  003A' EF00' F000'        	goto	i1u120_21
  2932  003E' EF00' F000'        	goto	i1u120_20
  2933  0042'                    i1u120_21:
  2934  0042' EF00' F000'        	goto	i1l95
  2935  0046'                    i1u120_20:
  2936  0046'                    
  2937                           ;newmain.c: 79:         TXREG = '\n';
  2938  0046' 0E0A               	movlw	10
  2939  0048' 6EAD               	movwf	173,c	;volatile
  2940                           
  2941                           ;newmain.c: 80:     } else {
  2942  004A' EF00' F000'        	goto	i1l102
  2943  004E'                    i1l99:
  2944  004E' A2AC               	btfss	172,1,c	;volatile
  2945  0050' EF00' F000'        	goto	i1u121_21
  2946  0054' EF00' F000'        	goto	i1u121_20
  2947  0058'                    i1u121_21:
  2948  0058' EF00' F000'        	goto	i1l99
  2949  005C'                    i1u121_20:
  2950  005C'                    
  2951                           ;newmain.c: 82:         TXREG = data;
  2952  005C' C012' FFAD         	movff	i1putch@data,4013	;volatile
  2953  0060'                    i1l102:
  2954  0060' 0012               	return		;funcret
  2955  0062'                    __end_ofi1_putch:
  2956                           	callstack 0
  2957                           
  2958 ;; *************** function _H_ISR *****************
  2959 ;; Defined at:
  2960 ;;		line 218 in file "newmain.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;		None
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;  value           2   16[COMRAM] int 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  1    wreg      void 
  2967 ;; Registers used:
  2968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, bsr, status,2, status,0, pcl, pclath, pclatu, btemp, b
      +temp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, 
      +btemp+14, btemp+15, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, 
      +btemp+26, btemp+27, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, cs
      +tack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2974 ;;      Params:         0       0       0       0       0       0       0
  2975 ;;      Locals:         2       0       0       0       0       0       0
  2976 ;;      Temps:         16       0       0       0       0       0       0
  2977 ;;      Totals:        18       0       0       0       0       0       0
  2978 ;;Total ram usage:       18 bytes
  2979 ;; Hardware stack levels used: 1
  2980 ;; Hardware stack levels required when called: 1
  2981 ;; This function calls:
  2982 ;;		_button_pressed
  2983 ;;		_variable_register_changed
  2984 ;; This function is called by:
  2985 ;;		Interrupt level 2
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	intcode
  2990  0000'                    __pintcode:
  2991                           	callstack 0
  2992  0000'                    _H_ISR:
  2993                           	callstack 22
  2994                           
  2995                           ;incstack = 0
  2996  0000' 8200'              	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2997  0002' ED00' F000'        	call	int_func,f	;refresh shadow registers
  2998                           
  2999                           	psect	intcode_body
  3000  0000'                    __pintcode_body:
  3001                           	callstack 22
  3002  0000'                    int_func:
  3003                           	callstack 22
  3004  0000' 0006               	pop		; remove dummy address from shadow register refresh
  3005  0002' CFFA F002'         	movff	pclath,??_H_ISR+2
  3006  0006' CFFB F003'         	movff	pclatu,??_H_ISR+3
  3007  000A' CFE9 F004'         	movff	fsr0l,??_H_ISR+4
  3008  000E' CFEA F005'         	movff	fsr0h,??_H_ISR+5
  3009  0012' CFE1 F006'         	movff	fsr1l,??_H_ISR+6
  3010  0016' CFE2 F007'         	movff	fsr1h,??_H_ISR+7
  3011  001A' CFD9 F008'         	movff	fsr2l,??_H_ISR+8
  3012  001E' CFDA F009'         	movff	fsr2h,??_H_ISR+9
  3013  0022' CFF3 F00A'         	movff	prodl,??_H_ISR+10
  3014  0026' CFF4 F00B'         	movff	prodh,??_H_ISR+11
  3015  002A' CFF6 F00C'         	movff	tblptrl,??_H_ISR+12
  3016  002E' CFF7 F00D'         	movff	tblptrh,??_H_ISR+13
  3017  0032' CFF8 F00E'         	movff	tblptru,??_H_ISR+14
  3018  0036' CFF5 F00F'         	movff	tablat,??_H_ISR+15
  3019  003A'                    
  3020                           ;newmain.c: 219:     if (PIR1bits.ADIF) {
  3021  003A' AC9E               	btfss	158,6,c	;volatile
  3022  003C' EF00' F000'        	goto	i2u130_41
  3023  0040' EF00' F000'        	goto	i2u130_40
  3024  0044'                    i2u130_41:
  3025  0044' EF00' F000'        	goto	i2l1947
  3026  0048'                    i2u130_40:
  3027  0048'                    
  3028                           ;newmain.c: 220:         int value = (ADRESH << 8) + ADRESL;
  3029  0048' 50C4               	movf	196,w,c	;volatile
  3030  004A' 6E00'              	movwf	(??_H_ISR+1)^0,c
  3031  004C' 6A00'              	clrf	??_H_ISR^0,c
  3032  004E' 50C3               	movf	195,w,c	;volatile
  3033  0050' 2400'              	addwf	??_H_ISR^0,w,c
  3034  0052' 6E00'              	movwf	H_ISR@value^0,c
  3035  0054' 0E00               	movlw	0
  3036  0056' 2000'              	addwfc	(??_H_ISR+1)^0,w,c
  3037  0058' 6E00'              	movwf	(H_ISR@value+1)^0,c
  3038  005A'                    
  3039                           ;newmain.c: 221:         variable_register_changed(value);
  3040  005A' C010' F000'        	movff	H_ISR@value,?_variable_register_changed
  3041  005E' C011' F001'        	movff	H_ISR@value+1,?_variable_register_changed+1
  3042  0062' EC00' F000'        	call	_variable_register_changed	;wreg free
  3043  0066'                    
  3044                           ;newmain.c: 222:         PIR1bits.ADIF = 0;
  3045  0066' 9C9E               	bcf	158,6,c	;volatile
  3046  0068'                    
  3047                           ;newmain.c: 223:         _delay((unsigned long)((5)*(4000000/4000.0)));
  3048  0068' 0E07               	movlw	7
  3049  006A' 6E00'              	movwf	??_H_ISR^0,c
  3050  006C' 0E7D               	movlw	125
  3051  006E'                    i2u145_47:
  3052  006E' 2EE8               	decfsz	wreg,f,c
  3053  0070' D7FE               	bra	i2u145_47
  3054  0072' 2E00'              	decfsz	??_H_ISR^0,f,c
  3055  0074' D7FC               	bra	i2u145_47
  3056  0076' 0000               	nop	
  3057  0078'                    i2l1947:
  3058                           
  3059                           ;newmain.c: 226:     if (INTCONbits.INT0IF) {
  3060  0078' A2F2               	btfss	242,1,c	;volatile
  3061  007A' EF00' F000'        	goto	i2u131_41
  3062  007E' EF00' F000'        	goto	i2u131_40
  3063  0082'                    i2u131_41:
  3064  0082' EF00' F000'        	goto	i2l1957
  3065  0086'                    i2u131_40:
  3066  0086'                    
  3067                           ;newmain.c: 227:         button_pressed();
  3068  0086' EC00' F000'        	call	_button_pressed	;wreg free
  3069  008A'                    
  3070                           ;newmain.c: 228:         _delay((unsigned long)((50)*(4000000/4000.0)));
  3071  008A' 0E41               	movlw	65
  3072  008C' 6E00'              	movwf	??_H_ISR^0,c
  3073  008E' 0EEE               	movlw	238
  3074  0090'                    i2u146_47:
  3075  0090' 2EE8               	decfsz	wreg,f,c
  3076  0092' D7FE               	bra	i2u146_47
  3077  0094' 2E00'              	decfsz	??_H_ISR^0,f,c
  3078  0096' D7FC               	bra	i2u146_47
  3079  0098' D000               	nop2	
  3080  009A'                    
  3081                           ;newmain.c: 229:         btn_interr = 1;
  3082  009A' 0E01               	movlw	1
  3083  009C' 6E00'              	movwf	_btn_interr^0,c
  3084  009E'                    
  3085                           ;newmain.c: 230:         INTCONbits.INT0IF = 0;
  3086  009E' 92F2               	bcf	242,1,c	;volatile
  3087  00A0'                    i2l1957:
  3088                           
  3089                           ;newmain.c: 233:     if (PIR1bits.TMR2IF) {
  3090  00A0' A29E               	btfss	158,1,c	;volatile
  3091  00A2' EF00' F000'        	goto	i2u132_41
  3092  00A6' EF00' F000'        	goto	i2u132_40
  3093  00AA'                    i2u132_41:
  3094  00AA' EF00' F000'        	goto	i2l134
  3095  00AE'                    i2u132_40:
  3096  00AE'                    
  3097                           ;newmain.c: 234:         cnt++;
  3098  00AE' 4A00'              	infsnz	_cnt^0,f,c
  3099  00B0' 2A00'              	incf	(_cnt+1)^0,f,c
  3100  00B2'                    
  3101                           ;newmain.c: 235:         PIR1bits.TMR2IF = 0;
  3102  00B2' 929E               	bcf	158,1,c	;volatile
  3103  00B4'                    i2l134:
  3104  00B4' C00F' FFF5         	movff	??_H_ISR+15,tablat
  3105  00B8' C00E' FFF8         	movff	??_H_ISR+14,tblptru
  3106  00BC' C00D' FFF7         	movff	??_H_ISR+13,tblptrh
  3107  00C0' C00C' FFF6         	movff	??_H_ISR+12,tblptrl
  3108  00C4' C00B' FFF4         	movff	??_H_ISR+11,prodh
  3109  00C8' C00A' FFF3         	movff	??_H_ISR+10,prodl
  3110  00CC' C009' FFDA         	movff	??_H_ISR+9,fsr2h
  3111  00D0' C008' FFD9         	movff	??_H_ISR+8,fsr2l
  3112  00D4' C007' FFE2         	movff	??_H_ISR+7,fsr1h
  3113  00D8' C006' FFE1         	movff	??_H_ISR+6,fsr1l
  3114  00DC' C005' FFEA         	movff	??_H_ISR+5,fsr0h
  3115  00E0' C004' FFE9         	movff	??_H_ISR+4,fsr0l
  3116  00E4' C003' FFFB         	movff	??_H_ISR+3,pclatu
  3117  00E8' C002' FFFA         	movff	??_H_ISR+2,pclath
  3118  00EC' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3119  00EE' 0011               	retfie		f
  3120  00F0'                    __end_of_H_ISR:
  3121                           	callstack 0
  3122                           
  3123                           	psect	rparam
  3124  0001                     ___rparam_used  equ	1
  3125  0000                     ___param_bank   equ	0
  3126  0000'                    __Lparam        equ	__Lrparam
  3127  0000'                    __Hparam        equ	__Hrparam
  3128                           
  3129                           	psect	temp
  3130  0000'                    btemp:
  3131                           	callstack 0
  3132  0000'                    	ds	1
  3133  0000'                    int$flags       set	btemp
  3134  0001'                    wtemp8          set	btemp+1
  3135  0001'                    ttemp5          set	btemp+1
  3136  0004'                    ttemp6          set	btemp+4
  3137  0008'                    ttemp7          set	btemp+8
  3138                           
  3139                           	psect	idloc
  3140                           
  3141                           ;Config register IDLOC0 @ 0x200000
  3142                           ;	unspecified, using default values
  3143  200000                     	org	2097152
  3144  200000  FF                 	db	255
  3145                           
  3146                           ;Config register IDLOC1 @ 0x200001
  3147                           ;	unspecified, using default values
  3148  200001                     	org	2097153
  3149  200001  FF                 	db	255
  3150                           
  3151                           ;Config register IDLOC2 @ 0x200002
  3152                           ;	unspecified, using default values
  3153  200002                     	org	2097154
  3154  200002  FF                 	db	255
  3155                           
  3156                           ;Config register IDLOC3 @ 0x200003
  3157                           ;	unspecified, using default values
  3158  200003                     	org	2097155
  3159  200003  FF                 	db	255
  3160                           
  3161                           ;Config register IDLOC4 @ 0x200004
  3162                           ;	unspecified, using default values
  3163  200004                     	org	2097156
  3164  200004  FF                 	db	255
  3165                           
  3166                           ;Config register IDLOC5 @ 0x200005
  3167                           ;	unspecified, using default values
  3168  200005                     	org	2097157
  3169  200005  FF                 	db	255
  3170                           
  3171                           ;Config register IDLOC6 @ 0x200006
  3172                           ;	unspecified, using default values
  3173  200006                     	org	2097158
  3174  200006  FF                 	db	255
  3175                           
  3176                           ;Config register IDLOC7 @ 0x200007
  3177                           ;	unspecified, using default values
  3178  200007                     	org	2097159
  3179  200007  FF                 	db	255
  3180                           
  3181                           	psect	config
  3182                           
  3183                           ; Padding undefined space
  3184  300000                     	org	3145728
  3185  300000  FF                 	db	255
  3186                           
  3187                           ;Config register CONFIG1H @ 0x300001
  3188                           ;	Oscillator Selection bits
  3189                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  3190                           ;	Fail-Safe Clock Monitor Enable bit
  3191                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3192                           ;	Internal/External Oscillator Switchover bit
  3193                           ;	IESO = ON, Oscillator Switchover mode enabled
  3194  300001                     	org	3145729
  3195  300001  88                 	db	136
  3196                           
  3197                           ;Config register CONFIG2L @ 0x300002
  3198                           ;	Power-up Timer Enable bit
  3199                           ;	PWRT = OFF, PWRT disabled
  3200                           ;	Brown-out Reset Enable bits
  3201                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  3202                           ;	Brown Out Reset Voltage bits
  3203                           ;	BORV = 3, Minimum setting
  3204  300002                     	org	3145730
  3205  300002  1F                 	db	31
  3206                           
  3207                           ;Config register CONFIG2H @ 0x300003
  3208                           ;	Watchdog Timer Enable bit
  3209                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3210                           ;	Watchdog Timer Postscale Select bits
  3211                           ;	WDTPS = 1, 1:1
  3212  300003                     	org	3145731
  3213  300003  00                 	db	0
  3214                           
  3215                           ; Padding undefined space
  3216  300004                     	org	3145732
  3217  300004  FF                 	db	255
  3218                           
  3219                           ;Config register CONFIG3H @ 0x300005
  3220                           ;	CCP2 MUX bit
  3221                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3222                           ;	PORTB A/D Enable bit
  3223                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  3224                           ;	Low-Power Timer1 Oscillator Enable bit
  3225                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3226                           ;	MCLR Pin Enable bit
  3227                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3228  300005                     	org	3145733
  3229  300005  83                 	db	131
  3230                           
  3231                           ;Config register CONFIG4L @ 0x300006
  3232                           ;	Stack Full/Underflow Reset Enable bit
  3233                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3234                           ;	Single-Supply ICSP Enable bit
  3235                           ;	LVP = OFF, Single-Supply ICSP disabled
  3236                           ;	Extended Instruction Set Enable bit
  3237                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3238                           ;	Background Debugger Enable bit
  3239                           ;	DEBUG = 0x1, unprogrammed default
  3240  300006                     	org	3145734
  3241  300006  81                 	db	129
  3242                           
  3243                           ; Padding undefined space
  3244  300007                     	org	3145735
  3245  300007  FF                 	db	255
  3246                           
  3247                           ;Config register CONFIG5L @ 0x300008
  3248                           ;	Code Protection bit
  3249                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3250                           ;	Code Protection bit
  3251                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3252                           ;	Code Protection bit
  3253                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3254                           ;	Code Protection bit
  3255                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3256  300008                     	org	3145736
  3257  300008  0F                 	db	15
  3258                           
  3259                           ;Config register CONFIG5H @ 0x300009
  3260                           ;	Boot Block Code Protection bit
  3261                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3262                           ;	Data EEPROM Code Protection bit
  3263                           ;	CPD = OFF, Data EEPROM not code-protected
  3264  300009                     	org	3145737
  3265  300009  C0                 	db	192
  3266                           
  3267                           ;Config register CONFIG6L @ 0x30000A
  3268                           ;	Write Protection bit
  3269                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3270                           ;	Write Protection bit
  3271                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3272                           ;	Write Protection bit
  3273                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3274                           ;	Write Protection bit
  3275                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3276  30000A                     	org	3145738
  3277  30000A  0F                 	db	15
  3278                           
  3279                           ;Config register CONFIG6H @ 0x30000B
  3280                           ;	Configuration Register Write Protection bit
  3281                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3282                           ;	Boot Block Write Protection bit
  3283                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3284                           ;	Data EEPROM Write Protection bit
  3285                           ;	WRTD = OFF, Data EEPROM not write-protected
  3286  30000B                     	org	3145739
  3287  30000B  E0                 	db	224
  3288                           
  3289                           ;Config register CONFIG7L @ 0x30000C
  3290                           ;	Table Read Protection bit
  3291                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3292                           ;	Table Read Protection bit
  3293                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3294                           ;	Table Read Protection bit
  3295                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3296                           ;	Table Read Protection bit
  3297                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3298  30000C                     	org	3145740
  3299  30000C  0F                 	db	15
  3300                           
  3301                           ;Config register CONFIG7H @ 0x30000D
  3302                           ;	Boot Block Table Read Protection bit
  3303                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3304  30000D                     	org	3145741
  3305  30000D  40                 	db	64
  3306                           tosu	equ	0xFFF
  3307                           tosh	equ	0xFFE
  3308                           tosl	equ	0xFFD
  3309                           stkptr	equ	0xFFC
  3310                           pclatu	equ	0xFFB
  3311                           pclath	equ	0xFFA
  3312                           pcl	equ	0xFF9
  3313                           tblptru	equ	0xFF8
  3314                           tblptrh	equ	0xFF7
  3315                           tblptrl	equ	0xFF6
  3316                           tablat	equ	0xFF5
  3317                           prodh	equ	0xFF4
  3318                           prodl	equ	0xFF3
  3319                           indf0	equ	0xFEF
  3320                           postinc0	equ	0xFEE
  3321                           postdec0	equ	0xFED
  3322                           preinc0	equ	0xFEC
  3323                           plusw0	equ	0xFEB
  3324                           fsr0h	equ	0xFEA
  3325                           fsr0l	equ	0xFE9
  3326                           wreg	equ	0xFE8
  3327                           indf1	equ	0xFE7
  3328                           postinc1	equ	0xFE6
  3329                           postdec1	equ	0xFE5
  3330                           preinc1	equ	0xFE4
  3331                           plusw1	equ	0xFE3
  3332                           fsr1h	equ	0xFE2
  3333                           fsr1l	equ	0xFE1
  3334                           bsr	equ	0xFE0
  3335                           indf2	equ	0xFDF
  3336                           postinc2	equ	0xFDE
  3337                           postdec2	equ	0xFDD
  3338                           preinc2	equ	0xFDC
  3339                           plusw2	equ	0xFDB
  3340                           fsr2h	equ	0xFDA
  3341                           fsr2l	equ	0xFD9
  3342                           status	equ	0xFD8

Data Sizes:
    Strings     35
    Constant    0
    Data        0
    BSS         307
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     44      51
    BANK0           128    102     102
    BANK1           256    208     208
    BANK2           256    100     200
    BANK3           256      0     200
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 100
		 -> ParsingData@input(BANK1[100]), NULL(NULL[0]), 

    GetString@str	PTR unsigned char  size(2) Largest target is 100
		 -> main@str(BANK2[100]), ParsingData@str(BANK1[100]), 

    itoa@s	PTR unsigned char  size(1) Largest target is 100
		 -> output_total_dis@tmp(COMRAM[100]), print_number@tmp(BANK0[100]), 

    ParsingData@token	PTR unsigned char  size(2) Largest target is 100
		 -> ParsingData@input(BANK1[100]), NULL(NULL[0]), 

    reverse@first	PTR unsigned char  size(1) Largest target is 100
		 -> output_total_dis@tmp(COMRAM[100]), print_number@tmp(BANK0[100]), 

    reverse@last	PTR unsigned char  size(1) Largest target is 100
		 -> output_total_dis@tmp(COMRAM[100]), print_number@tmp(BANK0[100]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 2
		 -> STR_3(CODE[2]), STR_4(CODE[2]), STR_5(CODE[2]), NULL(NULL[0]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 100
		 -> get_StepLength@ask(COMRAM[100]), main@str(BANK2[100]), output_total_dis@output(COMRAM[100]), ParsingData@input(BANK1[100]), 
		 -> ParsingData@str(BANK1[100]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 100
		 -> ParsingData@input(BANK1[100]), NULL(NULL[0]), 

    strchr@s	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_3(CODE[2]), STR_4(CODE[2]), STR_5(CODE[2]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 100
		 -> get_StepLength@ask(COMRAM[100]), main@str(BANK2[100]), output_total_dis@output(COMRAM[100]), ParsingData@input(BANK1[100]), 
		 -> ParsingData@str(BANK1[100]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 100
		 -> get_StepLength@ask(COMRAM[100]), main@str(BANK2[100]), output_total_dis@output(COMRAM[100]), ParsingData@input(BANK1[100]), 
		 -> ParsingData@str(BANK1[100]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 100
		 -> buffer(BANK2[100]), ParsingData@str(BANK1[100]), STR_1(CODE[20]), STR_2(CODE[15]), 

    strcspn@c	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_3(CODE[2]), STR_4(CODE[2]), STR_5(CODE[2]), 

    strcspn@s	PTR const unsigned char  size(2) Largest target is 100
		 -> ParsingData@input(BANK1[100]), NULL(NULL[0]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 100
		 -> get_StepLength@ask(COMRAM[100]), get_StepLength@str(COMRAM[100]), output_total_dis@output(COMRAM[100]), output_total_dis@tmp(COMRAM[100]), 
		 -> print_number@tmp(BANK0[100]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 100
		 -> get_StepLength@ask(COMRAM[100]), get_StepLength@str(COMRAM[100]), output_total_dis@output(COMRAM[100]), output_total_dis@tmp(COMRAM[100]), 
		 -> print_number@tmp(BANK0[100]), 

    strspn@c	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_3(CODE[2]), STR_4(CODE[2]), STR_5(CODE[2]), 

    strspn@s	PTR const unsigned char  size(2) Largest target is 100
		 -> ParsingData@input(BANK1[100]), NULL(NULL[0]), 

    strtok@p	PTR unsigned char  size(2) Largest target is 100
		 -> ParsingData@input(BANK1[100]), NULL(NULL[0]), 

    strtok@s	PTR unsigned char  size(2) Largest target is 100
		 -> ParsingData@input(BANK1[100]), NULL(NULL[0]), 

    strtok@sep	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_3(CODE[2]), STR_4(CODE[2]), STR_5(CODE[2]), 


Critical Paths under _main in COMRAM

    _ParsingData->_print_number
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _print_number->_itoa
    _itoa->___awdiv
    _GetString->_strcpy

Critical Paths under _Lo_ISR in COMRAM

    _Lo_ISR->_MyusartRead
    _MyusartRead->i1_putch

Critical Paths under _H_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _ParsingData->_print_number

Critical Paths under _Lo_ISR in BANK0

    None.

Critical Paths under _H_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_ParsingData

Critical Paths under _Lo_ISR in BANK1

    None.

Critical Paths under _H_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Lo_ISR in BANK2

    None.

Critical Paths under _H_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Lo_ISR in BANK3

    None.

Critical Paths under _H_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Lo_ISR in BANK4

    None.

Critical Paths under _H_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Lo_ISR in BANK5

    None.

Critical Paths under _H_ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               100   100      0    3191
                                              0 BANK2    100   100      0
                        _ClearBuffer
                          _GetString
                         _Initialize
                        _ParsingData
                     _keyboard_input
 ---------------------------------------------------------------------------------
 (1) _keyboard_input                                       2     0      2       0
 ---------------------------------------------------------------------------------
 (1) _ParsingData                                        208   208      0    2880
                                              0 BANK1    208   208      0
                        _ClearBuffer
                          _GetString
                               _atoi
                       _print_number
                             _strcpy
                             _strtok
 ---------------------------------------------------------------------------------
 (2) _strtok                                               3     0      3     554
                                             36 COMRAM     3     0      3
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     3      3     185
                                             30 COMRAM     6     3      3
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     3      3     185
                                             30 COMRAM     6     3      3
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strchr                                               4     1      3      92
                                             26 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _print_number                                       104   102      2    1435
                                             42 COMRAM     2     0      2
                                              0 BANK0    102   102      0
                               _itoa
                              _putch
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               3     1      2      95
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      87
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     5      3    1102
                                             34 COMRAM     8     5      3
                            ___awdiv
                            ___awmod
                            _reverse
 ---------------------------------------------------------------------------------
 (4) _reverse                                              3     1      2     159
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     298
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     304
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     231
                                             26 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _GetString                                            3     1      2     195
                                             34 COMRAM     3     1      2
                        _ClearBuffer
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               8     4      4      81
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _ClearBuffer                                          2     2      0      68
                                             26 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Lo_ISR                                               5     5      0     176
                                             21 COMRAM     5     5      0
                        _MyusartRead
 ---------------------------------------------------------------------------------
 (6) _MyusartRead                                          2     2      0     176
                                             19 COMRAM     2     2      0
                            i1_putch
 ---------------------------------------------------------------------------------
 (7) i1_putch                                              1     1      0      87
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _H_ISR                                               18    18      0      23
                                              0 COMRAM    18    18      0
                     _button_pressed
          _variable_register_changed
 ---------------------------------------------------------------------------------
 (9) _variable_register_changed                            2     0      2       0
 ---------------------------------------------------------------------------------
 (9) _button_pressed                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearBuffer
   _GetString
     _ClearBuffer
     _strcpy
   _Initialize
   _ParsingData
     _ClearBuffer
     _GetString
     _atoi
     _print_number
       _itoa
         ___awdiv
         ___awmod
         _reverse
       _putch
       _strlen
     _strcpy
     _strtok
       _strcspn
         _strchr
       _strspn
         _strchr
   _keyboard_input

 _Lo_ISR (ROOT)
   _MyusartRead
     i1_putch

 _H_ISR (ROOT)
   _button_pressed
   _variable_register_changed

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1535      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0     200     78.1%
BITBANK2           256      0       0      0.0%
BANK2              256    100     200     78.1%
BITBANK1           256      0       0      0.0%
BANK1              256    208     208     81.2%
BITBANK0           128      0       0      0.0%
BANK0              128    102     102     79.7%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     44      51     40.5%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRllh        22      0       0      0.0%
BITBIGSFRlllh       10      0       0      0.0%
BITBIGSFRllll        9      0       0      0.0%
BITBIGSFRlh          1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     761      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Jan 16 02:33:29 2025

                         l92 0026                           l95 0038                           l99 004E  
               ___awdiv@sign 001F                           bsr 0FE0                          l101 005C  
                        l102 0060                          l202 0132                          l107 003E  
                        l115 0068                          l126 0090                          l153 003E  
                        l161 00BC                          l194 005E                          l446 00C0  
                        l459 00AC                          l902 011A                          l914 002C  
                        l908 0052                          l940 0000                          l924 00D2  
                        l942 0046                          l927 00CA                          l936 0056  
                        l952 0056                          l937 005E                          l953 005E  
                        l899 0112                          _PR2 0FCB                          u800 00B0  
                        u801 00AC                          u810 0010                          u811 000C  
                        u820 002A                          u740 003E                          u900 0026  
                        u821 0026                          u741 003A                          u901 0022  
                        u750 0010                          u830 0044                          u910 0034  
                        u751 000C                          u831 0040                          u911 0030  
                        u760 002A                          u840 0062                          u920 0046  
                        u761 0026                          u841 005E                          u921 0042  
                        u770 0050                          u850 0078                          u930 005C  
                        u771 004C                          u851 0074                          u931 0058  
                        u940 0036                          u780 006E                          u860 009C  
                        u941 0032                          u781 006A                          u861 0098  
                        u950 0040                          u790 008A                          u870 001C  
                        u791 0086                          u871 0018                          u960 0052  
                        u880 0044                          u961 004E                          u881 0040  
                        u970 0016                          u890 0014                          u971 0012  
                        u891 0010                          u980 0082                          u957 0036  
                        u981 007E                          u990 0090                          u991 008C  
                        _cnt 0002                 ___awmod@sign 001F                          wreg 0FE8  
           ??_button_pressed 0000                         l2041 002A                         l2033 0000  
                       l2043 0036                         l2035 0004                         l2045 0044  
                       l2037 0008                         l1511 0004                         l2039 000C  
                       l1513 000E                         l1521 002C                         l1531 001C  
                       l1523 0000                         l1515 001E                         l1611 0044  
                       l1603 0000                         l1701 0046                         l1541 0050  
                       l1533 002A                         l1525 0002                         l1517 0028  
                       l1509 0000                         l1621 0046                         l1605 001C  
                       l1631 0016                         l1623 0000                         l1711 0060  
                       l1703 004A                         l1551 008A                         l1543 0058  
                       l1535 0032                         l1527 0010                         l1519 002A  
                       l1615 0002                         l1633 001A                         l1561 00B0  
                       l1553 0092                         l1545 0060                         l1537 0036  
                       l1529 0018                         l1641 0000                         l1617 0014  
                       l1721 002C                         l1609 0022                         l1811 0016  
                       l1635 0036                         l1563 00B8                         l1555 0094  
                       l1547 006E                         l1539 003E                         l1571 0010  
                       l1651 002E                         l1643 0008                         l1619 0034  
                       l1723 0032                         l1715 0000                         l1731 002C  
                       l1821 003C                         l1813 0018                         l1629 0008  
                       l1637 0000                         l1709 0056                         l1557 009A  
                       l1549 0074                         l1581 0044                         l1573 0018  
                       l1661 0090                         l1653 0050                         l1645 0016  
                       l1725 0052                         l1717 0010                         l1901 002A  
                       l1831 004E                         l1823 003E                         l1815 0026  
                       l1807 0000                         l1639 0008                         l1559 00A0  
                       l1591 0080                         l1583 004C                         l1575 001C  
                       l1567 0000                         l1663 009C                         l1655 0054  
                       l1647 001A                         l1671 0008                         l1719 001E  
                       l1751 00C2                         l1743 007C                         l1735 0038  
                       l1727 0000                         l1911 0086                         l1903 002E  
                       l1841 0058                         l1833 0050                         l1825 0042  
                       l1817 0028                         l1809 0008                         l1761 0012  
                       l1593 0086                         l1585 0054                         l1577 002A  
                       l1569 0002                         l1665 00A0                         l1657 0070  
                       l1649 0022                         l1673 000A                         l1681 000C  
                       l1745 0098                         l1737 0050                         l1729 0012  
                       l1921 00FA                         l1913 009E                         l1905 0046  
                       l1851 0062                         l1843 005A                         l1835 0052  
                       l1827 0046                         l1819 002A                         l1771 0072  
                       l1763 002C                         l1755 0000                         l1587 0062  
                       l1595 008C                         l1579 0032                         l1667 00AA  
                       l1659 0082                         l1675 0020                         l1691 0014  
                       l1683 0014                         l1747 00B0                         l1739 0068  
                       l1923 010E                         l1907 005A                         l1915 00B2  
                       l1861 006E                         l1853 0064                         l1845 005C  
                       l1837 0054                         l1829 004C                         l1781 00E6  
                       l1765 004C                         l1757 0008                         l1597 009C  
                       l1589 0078                         l1669 0000                         l1693 002C  
                       l1685 002C                         l1749 00BA                         l1917 00D0  
                       l1909 0072                         l1871 0078                         l1863 0070  
                       l1855 0066                         l1847 005E                         l1839 0056  
                       l1695 0000                         l1783 00F6                         l1775 0090  
                       l1767 0066                         l1759 000E                         l1599 00A4  
                       l1687 0000                         l1679 0000                         l1919 00E6  
                       l1881 0082                         l1873 007A                         l1865 0072  
                       l1857 0068                         l1849 0060                         l1697 001E  
                       l1769 006A                         l1689 000C                         l1883 0086  
                       l1875 007C                         l1867 0074                         l1859 006A  
                       l1699 0032                         l1779 00C6                         l1891 0000  
                       l1885 008A                         l1877 007E                         l1869 0076  
                       l1893 0004                         l1887 008C                         l1879 0080  
                       l1895 000A                         l1889 008E                         l1897 000E  
                       l1899 0016                         STR_1 0001                         STR_2 0015  
                       STR_3 0022                         STR_4 0022                         STR_5 0022  
                       u1000 0020                         _CREN 7D5C                         u1001 001C  
                       u1010 002C                         u1011 0028                         u1020 0056  
                       u1100 00B0                         u1021 0052                         u1101 00AC  
                       u1110 002C                         u1030 002C                         u1111 0028  
                       u1031 0028                         u1120 004C                         u1040 0056  
                       u1121 0048                         u1041 0052                         u1050 001E  
                       u1130 0066                         u1051 001A                         u1131 0062  
                       u1140 008C                         u1060 0052                         u1141 0088  
                       u1061 004E                         u1150 00E6                         u1070 0012  
                       u1151 00E2                         u1071 000E                         u1160 00F6  
                       u1080 002C                         u1240 00D0                         u1161 00F2  
                       u1081 0028                         u1241 00CC                         u1090 0068  
                       u1250 00E6                         u1091 0064                         u1251 00E2  
                       u1260 00FA                         u1261 00F6                         _LATA 0F89  
                       u1270 010E                         u1430 002A                         u1271 010A  
                       u1431 0026                         _LATC 0F8B                         u1440 0044  
                       u1441 0040                         _RCIF 7CF5                         i1l92 0026  
                       i1l95 0038                         i1l99 004E                         _atoi 0000  
                       _main 0000                         _itoa 0000                         fsr0h 0FEA  
                       fsr1h 0FE2                         indf0 0FEF                         fsr2h 0FDA  
                       fsr0l 0FE9                         indf1 0FE7                         indf2 0FDF  
                       fsr1l 0FE1                         fsr2l 0FD9                         btemp 0000  
                       prodh 0FF4                         prodl 0FF3                         start 0000* 
            __end_ofi1_putch 0062              MyusartRead@data 0014                 ___param_bank 0000  
 ?_variable_register_changed 0000                        ?_atoi 001A                        ?_main 0000  
                      ?_itoa 0022              __end_of___awdiv 00C2              __end_of___awmod 00AE  
            ___awdiv@divisor 001C                        _T2CON 0FCA                        i1l101 005C  
                      i1l102 0060                        i1l111 004C                        i1l123 003C  
                      i2l134 00B4              ___awdiv@counter 001E                        _RCREG 0FAE  
                      _H_ISR 0000                        _SPBRG 0FAF                        _TRISA 0F92  
                      _TRISB 0F93                        _TRISC 0F94                        _TXREG 0FAD  
                      atoi@n 0020                        atoi@s 001A                        _putch 0000  
                _ClearBuffer 0000                        itoa@i 0028                        itoa@n 0022  
                      itoa@s 0024                        pclath 0FFA                        pclatu 0FFB  
                      tablat 0FF5              __end_of_reverse 0040                        ttemp5 0001  
                      ttemp6 0004                        ttemp7 0008                        status 0FD8  
                      wtemp8 0001              __end_of_strcspn 0060                ??_ParsingData 002C  
            __initialization 0000                 __end_of_atoi 011C                 __end_of_main 004E  
               __end_of_itoa 00BE                   _Initialize 0000                       ??_atoi 001C  
                     ??_main 002C                print_number@i 0064                       ??_itoa 0025  
              __activetblptr 0002                       ?_H_ISR 0000                       _ADRESH 0FC4  
                     _ADRESL 0FC3             ___awdiv@dividend 001A                       ?_putch 0000  
                     i1l1801 0032                       i1l1803 0042                       i1l1805 0046  
                     i1l1931 0032                       i1l1933 0038                       i1l1791 0046  
                     i1l1927 0016                       i1l1785 0002                       i1l1793 0000  
                     i1l1929 0024                       i1l1787 0014                       i1l1795 0004  
                     i1l1789 0034                       i1l1797 001C                       i2l1941 005A  
                     i2l1951 008A                       i2l1943 0066                       i2l1961 00B2  
                     i2l1953 009A                       i2l1945 0068                       i2l1937 003A  
                     i2l1955 009E                       i2l1939 0048                       i2l1947 0078  
                     i2l1949 0086                       i2l1957 00A0                       i2l1959 00AE  
                  ??i1_putch 0012                       _Lo_ISR 0000                    ??___awdiv 001E  
                  ??___awmod 001E                       _buffer 0000                       clear_0 0006  
                     clear_1 0012                       clear_2 001E             ___awdiv@quotient 0020  
            ___awmod@divisor 001C                       isa$std 0001              ___awmod@counter 001E  
        __end_of_ParsingData 0134                       _strchr 0000                       _strcpy 0000  
                     _strlen 0000                       _strtok 0000                       _strspn 0000  
               __mediumconst 0000*                      tblptrh 0FF7                       tblptrl 0FF6  
                     tblptru 0FF8                    ??_reverse 001C                    ??_strcspn 0021  
                 __accesstop 0000*     __end_of__initialization 0024                ___rparam_used 0001  
              __end_of_H_ISR 00F0            __end_of_GetString 006A               __pcstackCOMRAM 0000  
                i1putch@data 0012                  ?_Initialize 0000                __end_of_putch 0062  
                    ??_H_ISR 0000                ??_MyusartRead 0013                      ??_putch 001A  
                 __pbssBANK2 0000                   __pbssBANK3 0000                      ?_Lo_ISR 0000  
                _ParsingData 0000  ??_variable_register_changed 0000                      ?_strchr 001A  
                    ?_strcpy 001A                      ?_strlen 001A                      ?_strtok 0024  
                    ?_strspn 001E                   _btn_interr 0006                 ?_ClearBuffer 0000  
        __end_of_MyusartRead 004E                      i1_putch 0000                      __Hparam 0000  
                    __Lparam 0000                      ___awdiv 0000                      ___awmod 0000  
               __psmallconst 0000                      __pcinit 0000                      __ramtop 0000* 
                    __ptext0 0000                      __ptext1 0000                      __ptext2 0000  
                    __ptext3 0000                      __ptext4 0000                      __ptext5 0000  
                    __ptext6 0000                      __ptext7 0000                      __ptext8 0000  
                    __ptext9 0000                    _T2CONbits 0FCA             ___awmod@dividend 001A  
                    _reverse 0000                      atoi@neg 001F    _variable_register_changed 0000* 
                    main@str 0000                      _strcspn 0000               __pintcode_body 0000  
       end_of_initialization 0024                __Lmediumconst 0000*                     int_func 0000  
                reverse@last 001B                    _RCSTAbits 0FAB                      postinc0 0FEE  
                    postinc2 0FDE                      strchr@c 001B                      strchr@s 001A  
                    strcpy@d 0020                      strlen@a 001C                      strlen@s 001A  
                    strspn@c 0020                      strspn@i 0022                      strtok@p 0000  
                    strtok@s 0024                      strspn@s 001E                    _TRISAbits 0F92  
                  _TRISCbits 0F94                  _MyusartRead 0000                ?_print_number 002A  
                _CCP1CONbits 0FBD                    _TXSTAbits 0FAC               __end_of_Lo_ISR 0054  
                  _GetString 0000                 ??_Initialize 001A                  _BAUDCONbits 0FB8  
             __end_of_strchr 0048               __end_of_strcpy 0054               __end_of_strlen 002E  
             __end_of_strtok 00D4               __end_of_strspn 0060          start_initialization 0000  
             ??_print_number 002C        output_total_dis@F3136 0064        output_total_dis@F3139 0000  
               ClearBuffer@i 001A         ParsingData@heartRate 00CA           __end_of_Initialize 0092  
                   ??_Lo_ISR 0015                 ?_ParsingData 0000                   ?_GetString 0022  
            print_number@num 002A              print_number@tmp 0000               _keyboard_input 0000* 
                   ??_strchr 001D                     ??_strcpy 001E                     ??_strlen 001C  
                   ??_strtok 0027                     ??_strspn 0021                  __pbssCOMRAM 0000  
              __pcstackBANK0 0000                __pcstackBANK1 0000                __pcstackBANK2 0000  
                   ?i1_putch 0000               _button_pressed 0000*            ParsingData@input 0064  
           ParsingData@token 00CE                    __pintcode 0000                     ?___awdiv 001A  
                   ?___awmod 001A                  __pintcodelo 0000                   H_ISR@value 0010  
                __smallconst 0000*                    ?_reverse 001A                     ?_strcspn 001E  
                   _IPR1bits 0F9F                     _PIE1bits 0F9D                     i1u120_20 0046  
                   i1u120_21 0042                     i1u121_20 005C                     i1u121_21 0058  
                   i1u122_20 001C                     i1u122_21 0018                     i1u123_20 002E  
                   i1u123_21 002A                     i1u117_20 0014                     i1u117_21 0010  
                   i1u118_20 0026                     i1u118_21 0022                     i1u119_20 0034  
                   i1u119_21 0030                     i1u128_20 0024                     i1u128_21 0020  
                   i1u129_20 0032                     i1u129_21 002E                   reverse@tmp 001C  
                   i2u130_40 0048                     i2u130_41 0044                     i2u131_40 0086  
                   i2u131_41 0082                     i2u132_40 00AE                     i2u132_41 00AA  
                   i2u145_47 006E                     i2u146_47 0090                     _PIR1bits 0F9E  
                _buffer_size 0004         __end_of_print_number 0060                     _RCONbits 0FD0  
                ??_GetString 0024              ?_keyboard_input 0000                   _ADCON0bits 0FC2  
                 _ADCON1bits 0FC1                   _ADCON2bits 0FC0                 ?_MyusartRead 0000  
            ?_button_pressed 0000                     __Hrparam 0000*                    __Lrparam 0000* 
            ParsingData@temp 00CC              ParsingData@step 00C8                     __ptext10 0000  
                   __ptext11 0000                     __ptext20 0000                     __ptext12 0000  
                   __ptext13 0000                     __ptext14 0000                     __ptext15 0000  
                   __ptext16 0000                     __ptext17 0000                     __ptext19 0000  
               GetString@str 0022                   strcpy@dest 001A                     isa$xinst 0000  
                   int$flags 0000                    putch@data 001A                   _INTCONbits 0FF2  
                   itoa@sign 0026                ??_ClearBuffer 001A                     intlevel1 0000* 
                   intlevel2 0000*                reverse@first 001A               ParsingData@str 0000  
                  strcpy@src 001C                   _OSCCONbits 0FD3                    strtok@sep 0026  
                   strcspn@c 0020                     strcspn@i 0022                     strcspn@s 001E  
               _print_number 0000          __end_of_ClearBuffer 0040             ??_keyboard_input 0000  
