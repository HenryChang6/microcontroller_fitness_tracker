

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Jan 16 00:12:08 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    38                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    40   000000                     
    41                           ; Version 2.40
    42                           ; Generated 17/11/2021 GMT
    43                           ; 
    44                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F4520 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76   000FE0                     bsr             equ	4064
    77   000FE9                     fsr0            equ	4073
    78   000FEA                     fsr0h           equ	4074
    79   000FE9                     fsr0l           equ	4073
    80   000FE1                     fsr1            equ	4065
    81   000FE2                     fsr1h           equ	4066
    82   000FE1                     fsr1l           equ	4065
    83   000FD9                     fsr2            equ	4057
    84   000FDA                     fsr2h           equ	4058
    85   000FD9                     fsr2l           equ	4057
    86   000FEF                     indf0           equ	4079
    87   000FE7                     indf1           equ	4071
    88   000FDF                     indf2           equ	4063
    89   000FF2                     intcon          equ	4082
    90   000000                     nvmcon          equ	0
    91   000FF9                     pcl             equ	4089
    92   000FFA                     pclath          equ	4090
    93   000FFB                     pclatu          equ	4091
    94   000FEB                     plusw0          equ	4075
    95   000FE3                     plusw1          equ	4067
    96   000FDB                     plusw2          equ	4059
    97   000FED                     postdec0        equ	4077
    98   000FE5                     postdec1        equ	4069
    99   000FDD                     postdec2        equ	4061
   100   000FEE                     postinc0        equ	4078
   101   000FE6                     postinc1        equ	4070
   102   000FDE                     postinc2        equ	4062
   103   000FEC                     preinc0         equ	4076
   104   000FE4                     preinc1         equ	4068
   105   000FDC                     preinc2         equ	4060
   106   000FF3                     prod            equ	4083
   107   000FF4                     prodh           equ	4084
   108   000FF3                     prodl           equ	4083
   109   000FD8                     status          equ	4056
   110   000FF5                     tablat          equ	4085
   111   000FF6                     tblptr          equ	4086
   112   000FF7                     tblptrh         equ	4087
   113   000FF6                     tblptrl         equ	4086
   114   000FF8                     tblptru         equ	4088
   115   000FFD                     tosl            equ	4093
   116   000FE8                     wreg            equ	4072
   117   000F80                     PORTA           equ	3968	;# 
   118   000F81                     PORTB           equ	3969	;# 
   119   000F82                     PORTC           equ	3970	;# 
   120   000F83                     PORTD           equ	3971	;# 
   121   000F84                     PORTE           equ	3972	;# 
   122   000F89                     LATA            equ	3977	;# 
   123   000F8A                     LATB            equ	3978	;# 
   124   000F8B                     LATC            equ	3979	;# 
   125   000F8C                     LATD            equ	3980	;# 
   126   000F8D                     LATE            equ	3981	;# 
   127   000F92                     TRISA           equ	3986	;# 
   128   000F92                     DDRA            equ	3986	;# 
   129   000F93                     TRISB           equ	3987	;# 
   130   000F93                     DDRB            equ	3987	;# 
   131   000F94                     TRISC           equ	3988	;# 
   132   000F94                     DDRC            equ	3988	;# 
   133   000F95                     TRISD           equ	3989	;# 
   134   000F95                     DDRD            equ	3989	;# 
   135   000F96                     TRISE           equ	3990	;# 
   136   000F96                     DDRE            equ	3990	;# 
   137   000F9B                     OSCTUNE         equ	3995	;# 
   138   000F9D                     PIE1            equ	3997	;# 
   139   000F9E                     PIR1            equ	3998	;# 
   140   000F9F                     IPR1            equ	3999	;# 
   141   000FA0                     PIE2            equ	4000	;# 
   142   000FA1                     PIR2            equ	4001	;# 
   143   000FA2                     IPR2            equ	4002	;# 
   144   000FA6                     EECON1          equ	4006	;# 
   145   000FA7                     EECON2          equ	4007	;# 
   146   000FA8                     EEDATA          equ	4008	;# 
   147   000FA9                     EEADR           equ	4009	;# 
   148   000FAB                     RCSTA           equ	4011	;# 
   149   000FAB                     RCSTA1          equ	4011	;# 
   150   000FAC                     TXSTA           equ	4012	;# 
   151   000FAC                     TXSTA1          equ	4012	;# 
   152   000FAD                     TXREG           equ	4013	;# 
   153   000FAD                     TXREG1          equ	4013	;# 
   154   000FAE                     RCREG           equ	4014	;# 
   155   000FAE                     RCREG1          equ	4014	;# 
   156   000FAF                     SPBRG           equ	4015	;# 
   157   000FAF                     SPBRG1          equ	4015	;# 
   158   000FB0                     SPBRGH          equ	4016	;# 
   159   000FB1                     T3CON           equ	4017	;# 
   160   000FB2                     TMR3            equ	4018	;# 
   161   000FB2                     TMR3L           equ	4018	;# 
   162   000FB3                     TMR3H           equ	4019	;# 
   163   000FB4                     CMCON           equ	4020	;# 
   164   000FB5                     CVRCON          equ	4021	;# 
   165   000FB6                     ECCP1AS         equ	4022	;# 
   166   000FB6                     ECCPAS          equ	4022	;# 
   167   000FB7                     PWM1CON         equ	4023	;# 
   168   000FB7                     ECCP1DEL        equ	4023	;# 
   169   000FB8                     BAUDCON         equ	4024	;# 
   170   000FB8                     BAUDCTL         equ	4024	;# 
   171   000FBA                     CCP2CON         equ	4026	;# 
   172   000FBB                     CCPR2           equ	4027	;# 
   173   000FBB                     CCPR2L          equ	4027	;# 
   174   000FBC                     CCPR2H          equ	4028	;# 
   175   000FBD                     CCP1CON         equ	4029	;# 
   176   000FBE                     CCPR1           equ	4030	;# 
   177   000FBE                     CCPR1L          equ	4030	;# 
   178   000FBF                     CCPR1H          equ	4031	;# 
   179   000FC0                     ADCON2          equ	4032	;# 
   180   000FC1                     ADCON1          equ	4033	;# 
   181   000FC2                     ADCON0          equ	4034	;# 
   182   000FC3                     ADRES           equ	4035	;# 
   183   000FC3                     ADRESL          equ	4035	;# 
   184   000FC4                     ADRESH          equ	4036	;# 
   185   000FC5                     SSPCON2         equ	4037	;# 
   186   000FC6                     SSPCON1         equ	4038	;# 
   187   000FC7                     SSPSTAT         equ	4039	;# 
   188   000FC8                     SSPADD          equ	4040	;# 
   189   000FC9                     SSPBUF          equ	4041	;# 
   190   000FCA                     T2CON           equ	4042	;# 
   191   000FCB                     PR2             equ	4043	;# 
   192   000FCB                     MEMCON          equ	4043	;# 
   193   000FCC                     TMR2            equ	4044	;# 
   194   000FCD                     T1CON           equ	4045	;# 
   195   000FCE                     TMR1            equ	4046	;# 
   196   000FCE                     TMR1L           equ	4046	;# 
   197   000FCF                     TMR1H           equ	4047	;# 
   198   000FD0                     RCON            equ	4048	;# 
   199   000FD1                     WDTCON          equ	4049	;# 
   200   000FD2                     HLVDCON         equ	4050	;# 
   201   000FD2                     LVDCON          equ	4050	;# 
   202   000FD3                     OSCCON          equ	4051	;# 
   203   000FD5                     T0CON           equ	4053	;# 
   204   000FD6                     TMR0            equ	4054	;# 
   205   000FD6                     TMR0L           equ	4054	;# 
   206   000FD7                     TMR0H           equ	4055	;# 
   207   000FD8                     STATUS          equ	4056	;# 
   208   000FD9                     FSR2            equ	4057	;# 
   209   000FD9                     FSR2L           equ	4057	;# 
   210   000FDA                     FSR2H           equ	4058	;# 
   211   000FDB                     PLUSW2          equ	4059	;# 
   212   000FDC                     PREINC2         equ	4060	;# 
   213   000FDD                     POSTDEC2        equ	4061	;# 
   214   000FDE                     POSTINC2        equ	4062	;# 
   215   000FDF                     INDF2           equ	4063	;# 
   216   000FE0                     BSR             equ	4064	;# 
   217   000FE1                     FSR1            equ	4065	;# 
   218   000FE1                     FSR1L           equ	4065	;# 
   219   000FE2                     FSR1H           equ	4066	;# 
   220   000FE3                     PLUSW1          equ	4067	;# 
   221   000FE4                     PREINC1         equ	4068	;# 
   222   000FE5                     POSTDEC1        equ	4069	;# 
   223   000FE6                     POSTINC1        equ	4070	;# 
   224   000FE7                     INDF1           equ	4071	;# 
   225   000FE8                     WREG            equ	4072	;# 
   226   000FE9                     FSR0            equ	4073	;# 
   227   000FE9                     FSR0L           equ	4073	;# 
   228   000FEA                     FSR0H           equ	4074	;# 
   229   000FEB                     PLUSW0          equ	4075	;# 
   230   000FEC                     PREINC0         equ	4076	;# 
   231   000FED                     POSTDEC0        equ	4077	;# 
   232   000FEE                     POSTINC0        equ	4078	;# 
   233   000FEF                     INDF0           equ	4079	;# 
   234   000FF0                     INTCON3         equ	4080	;# 
   235   000FF1                     INTCON2         equ	4081	;# 
   236   000FF2                     INTCON          equ	4082	;# 
   237   000FF3                     PROD            equ	4083	;# 
   238   000FF3                     PRODL           equ	4083	;# 
   239   000FF4                     PRODH           equ	4084	;# 
   240   000FF5                     TABLAT          equ	4085	;# 
   241   000FF6                     TBLPTR          equ	4086	;# 
   242   000FF6                     TBLPTRL         equ	4086	;# 
   243   000FF7                     TBLPTRH         equ	4087	;# 
   244   000FF8                     TBLPTRU         equ	4088	;# 
   245   000FF9                     PCLAT           equ	4089	;# 
   246   000FF9                     PC              equ	4089	;# 
   247   000FF9                     PCL             equ	4089	;# 
   248   000FFA                     PCLATH          equ	4090	;# 
   249   000FFB                     PCLATU          equ	4091	;# 
   250   000FFC                     STKPTR          equ	4092	;# 
   251   000FFD                     TOS             equ	4093	;# 
   252   000FFD                     TOSL            equ	4093	;# 
   253   000FFE                     TOSH            equ	4094	;# 
   254   000FFF                     TOSU            equ	4095	;# 
   255   007D5C                     _CREN           set	32092
   256   007CF5                     _RCIF           set	31989
   257   000F8B                     _LATC           set	3979
   258   000F89                     _LATA           set	3977
   259   000F94                     _TRISC          set	3988
   260   000F93                     _TRISB          set	3987
   261   000F92                     _TRISA          set	3986
   262   000F94                     _TRISCbits      set	3988
   263   000F92                     _TRISAbits      set	3986
   264   000FC3                     _ADRESL         set	4035
   265   000FC4                     _ADRESH         set	4036
   266   000FBE                     _CCPR1L         set	4030
   267   000FCA                     _T2CON          set	4042
   268   000F9F                     _IPR1bits       set	3999
   269   000FAF                     _SPBRG          set	4015
   270   000FB8                     _BAUDCONbits    set	4024
   271   000FD0                     _RCONbits       set	4048
   272   000F9E                     _PIR1bits       set	3998
   273   000F9D                     _PIE1bits       set	3997
   274   000FCB                     _PR2            set	4043
   275   000FBD                     _CCP1CONbits    set	4029
   276   000FCA                     _T2CONbits      set	4042
   277   000FC0                     _ADCON2bits     set	4032
   278   000FC2                     _ADCON0bits     set	4034
   279   000FC1                     _ADCON1bits     set	4033
   280   000FD3                     _OSCCONbits     set	4051
   281   000FAB                     _RCSTAbits      set	4011
   282   000FAE                     _RCREG          set	4014
   283   000FAD                     _TXREG          set	4013
   284   000FAC                     _TXSTAbits      set	4012
   285   000FF2                     _INTCONbits     set	4082
   286                           
   287                           	psect	smallconst
   288   000600                     __psmallconst:
   289                           	callstack 0
   290   000600  00                 	db	0
   291   000601                     STR_1:
   292   000601  49                 	db	73	;'I'
   293   000602  6E                 	db	110	;'n'
   294   000603  70                 	db	112	;'p'
   295   000604  75                 	db	117	;'u'
   296   000605  74                 	db	116	;'t'
   297   000606  20                 	db	32
   298   000607  53                 	db	83	;'S'
   299   000608  74                 	db	116	;'t'
   300   000609  65                 	db	101	;'e'
   301   00060A  70                 	db	112	;'p'
   302   00060B  20                 	db	32
   303   00060C  4C                 	db	76	;'L'
   304   00060D  65                 	db	101	;'e'
   305   00060E  6E                 	db	110	;'n'
   306   00060F  67                 	db	103	;'g'
   307   000610  74                 	db	116	;'t'
   308   000611  68                 	db	104	;'h'
   309   000612  3A                 	db	58	;':'
   310   000613  20                 	db	32
   311   000614  00                 	db	0
   312   000615                     STR_2:
   313   000615  54                 	db	84	;'T'
   314   000616  6F                 	db	111	;'o'
   315   000617  74                 	db	116	;'t'
   316   000618  61                 	db	97	;'a'
   317   000619  6C                 	db	108	;'l'
   318   00061A  20                 	db	32
   319   00061B  4C                 	db	76	;'L'
   320   00061C  65                 	db	101	;'e'
   321   00061D  6E                 	db	110	;'n'
   322   00061E  67                 	db	103	;'g'
   323   00061F  74                 	db	116	;'t'
   324   000620  68                 	db	104	;'h'
   325   000621  3A                 	db	58	;':'
   326   000622  20                 	db	32
   327   000623  00                 	db	0
   328   000624  00                 	db	0	; dummy byte at the end
   329   000002                     __activetblptr  equ	2
   330                           
   331                           ; #config settings
   332                           
   333                           	psect	cinit
   334   000EFE                     __pcinit:
   335                           	callstack 0
   336   000EFE                     start_initialization:
   337                           	callstack 0
   338   000EFE                     __initialization:
   339                           	callstack 0
   340                           
   341                           ; Clear objects allocated to BANK3 (100 bytes)
   342   000EFE  EE03  F000         	lfsr	0,__pbssBANK3
   343   000F02  0E64               	movlw	100
   344   000F04                     clear_0:
   345   000F04  6AEE               	clrf	postinc0,c
   346   000F06  06E8               	decf	wreg,f,c
   347   000F08  E1FD               	bnz	clear_0
   348                           
   349                           ; Clear objects allocated to BANK2 (200 bytes)
   350   000F0A  EE02  F000         	lfsr	0,__pbssBANK2
   351   000F0E  0EC8               	movlw	200
   352   000F10                     clear_1:
   353   000F10  6AEE               	clrf	postinc0,c
   354   000F12  06E8               	decf	wreg,f,c
   355   000F14  E1FD               	bnz	clear_1
   356                           
   357                           ; Clear objects allocated to COMRAM (7 bytes)
   358   000F16  EE00  F027         	lfsr	0,__pbssCOMRAM
   359   000F1A  0E07               	movlw	7
   360   000F1C                     clear_2:
   361   000F1C  6AEE               	clrf	postinc0,c
   362   000F1E  06E8               	decf	wreg,f,c
   363   000F20  E1FD               	bnz	clear_2
   364   000F22                     end_of_initialization:
   365                           	callstack 0
   366   000F22                     __end_of__initialization:
   367                           	callstack 0
   368   000F22  902E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   369   000F24  922E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   370   000F26  0E00               	movlw	low (__Lmediumconst shr (0+16))
   371   000F28  6EF8               	movwf	tblptru,c
   372   000F2A  0100               	movlb	0
   373   000F2C  EF36  F006         	goto	_main	;jump to C main() function
   374                           
   375                           	psect	bssCOMRAM
   376   000027                     __pbssCOMRAM:
   377                           	callstack 0
   378   000027                     _current_servo_angle:
   379                           	callstack 0
   380   000027                     	ds	2
   381   000029                     _cnt:
   382                           	callstack 0
   383   000029                     	ds	2
   384   00002B                     _buffer_size:
   385                           	callstack 0
   386   00002B                     	ds	2
   387   00002D                     _btn_interr:
   388                           	callstack 0
   389   00002D                     	ds	1
   390                           
   391                           	psect	bssBANK2
   392   000200                     __pbssBANK2:
   393                           	callstack 0
   394   000200                     	ds	100
   395   000264                     _buffer:
   396                           	callstack 0
   397   000264                     	ds	100
   398                           
   399                           	psect	bssBANK3
   400   000300                     __pbssBANK3:
   401                           	callstack 0
   402   000300                     	ds	100
   403                           
   404                           	psect	cstackBANK1
   405   000100                     __pcstackBANK1:
   406                           	callstack 0
   407   000100                     get_StepLength@ask:
   408                           	callstack 0
   409   000100                     output_total_dis@output:
   410                           	callstack 0
   411                           
   412                           ; 100 bytes @ 0x0
   413   000100                     	ds	100
   414   000164                     get_StepLength@str:
   415                           	callstack 0
   416   000164                     output_total_dis@tmp:
   417                           	callstack 0
   418                           
   419                           ; 100 bytes @ 0x64
   420   000164                     	ds	100
   421   0001C8                     get_StepLength@i:
   422                           	callstack 0
   423   0001C8                     output_total_dis@i:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0xC8
   427   0001C8                     	ds	2
   428   0001CA                     get_StepLength@i_945:
   429                           	callstack 0
   430   0001CA                     output_total_dis@i_957:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0xCA
   434   0001CA                     	ds	2
   435   0001CC                     get_StepLength@input:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0xCC
   439   0001CC                     	ds	2
   440                           
   441                           	psect	cstackBANK0
   442   000080                     __pcstackBANK0:
   443                           	callstack 0
   444   000080                     main@str:
   445                           	callstack 0
   446                           
   447                           ; 100 bytes @ 0x0
   448   000080                     	ds	100
   449   0000E4                     main@num:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x64
   453   0000E4                     	ds	2
   454                           
   455                           	psect	cstackCOMRAM
   456   000001                     __pcstackCOMRAM:
   457                           	callstack 0
   458   000001                     variable_register_changed@value:
   459                           	callstack 0
   460   000001                     
   461                           ; 1 bytes @ 0x0
   462   000001                     	ds	2
   463   000003                     ??_H_ISR:
   464                           
   465                           ; 1 bytes @ 0x2
   466   000003                     	ds	2
   467   000005                     H_ISR@value:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x4
   471   000005                     	ds	2
   472   000007                     i1putch@data:
   473                           	callstack 0
   474   000007                     
   475                           ; 1 bytes @ 0x6
   476   000007                     	ds	1
   477   000008                     ??_MyusartRead:
   478                           
   479                           ; 1 bytes @ 0x7
   480   000008                     	ds	1
   481   000009                     MyusartRead@data:
   482                           	callstack 0
   483                           
   484                           ; 1 bytes @ 0x8
   485   000009                     	ds	1
   486   00000A                     ??_Lo_ISR:
   487                           
   488                           ; 1 bytes @ 0x9
   489   00000A                     	ds	5
   490   00000F                     ?_strlen:
   491                           	callstack 0
   492   00000F                     ?___wmul:
   493                           	callstack 0
   494   00000F                     ?___awdiv:
   495                           	callstack 0
   496   00000F                     ?___awmod:
   497                           	callstack 0
   498   00000F                     putch@data:
   499                           	callstack 0
   500   00000F                     keyboard_input@str:
   501                           	callstack 0
   502   00000F                     ClearBuffer@i:
   503                           	callstack 0
   504   00000F                     reverse@first:
   505                           	callstack 0
   506   00000F                     ___wmul@multiplier:
   507                           	callstack 0
   508   00000F                     ___awdiv@dividend:
   509                           	callstack 0
   510   00000F                     ___awmod@dividend:
   511                           	callstack 0
   512   00000F                     strcpy@dest:
   513                           	callstack 0
   514   00000F                     strlen@s:
   515                           	callstack 0
   516   00000F                     
   517                           ; 1 bytes @ 0xE
   518   00000F                     	ds	1
   519   000010                     
   520                           ; 1 bytes @ 0xF
   521   000010                     	ds	1
   522   000011                     reverse@last:
   523                           	callstack 0
   524   000011                     ___wmul@multiplicand:
   525                           	callstack 0
   526   000011                     ___awdiv@divisor:
   527                           	callstack 0
   528   000011                     ___awmod@divisor:
   529                           	callstack 0
   530   000011                     strcpy@src:
   531                           	callstack 0
   532   000011                     strlen@a:
   533                           	callstack 0
   534   000011                     
   535                           ; 1 bytes @ 0x10
   536   000011                     	ds	2
   537   000013                     reverse@tmp:
   538                           	callstack 0
   539   000013                     ___awdiv@counter:
   540                           	callstack 0
   541   000013                     ___awmod@counter:
   542                           	callstack 0
   543   000013                     ___wmul@product:
   544                           	callstack 0
   545   000013                     ??_strcpy:
   546   000013                     
   547                           ; 1 bytes @ 0x12
   548   000013                     	ds	1
   549   000014                     ___awdiv@sign:
   550                           	callstack 0
   551   000014                     ___awmod@sign:
   552                           	callstack 0
   553                           
   554                           ; 1 bytes @ 0x13
   555   000014                     	ds	1
   556   000015                     ___awdiv@quotient:
   557                           	callstack 0
   558   000015                     strcpy@d:
   559                           	callstack 0
   560                           
   561                           ; 2 bytes @ 0x14
   562   000015                     	ds	2
   563   000017                     ?_GetString:
   564                           	callstack 0
   565   000017                     GetString@str:
   566                           	callstack 0
   567   000017                     itoa@n:
   568                           	callstack 0
   569                           
   570                           ; 2 bytes @ 0x16
   571   000017                     	ds	2
   572   000019                     itoa@s:
   573                           	callstack 0
   574   000019                     
   575                           ; 1 bytes @ 0x18
   576   000019                     	ds	1
   577   00001A                     ?_get_StepLength:
   578                           	callstack 0
   579                           
   580                           ; 2 bytes @ 0x19
   581   00001A                     	ds	1
   582   00001B                     ??_itoa:
   583                           
   584                           ; 1 bytes @ 0x1A
   585   00001B                     	ds	1
   586   00001C                     ??_get_StepLength:
   587                           
   588                           ; 1 bytes @ 0x1B
   589   00001C                     	ds	1
   590   00001D                     itoa@sign:
   591                           	callstack 0
   592                           
   593                           ; 2 bytes @ 0x1C
   594   00001D                     	ds	2
   595   00001F                     itoa@i:
   596                           	callstack 0
   597                           
   598                           ; 2 bytes @ 0x1E
   599   00001F                     	ds	2
   600   000021                     output_total_dis@num:
   601                           	callstack 0
   602                           
   603                           ; 2 bytes @ 0x20
   604   000021                     	ds	2
   605   000023                     output_total_dis@step:
   606                           	callstack 0
   607                           
   608                           ; 2 bytes @ 0x22
   609   000023                     	ds	2
   610   000025                     ??_output_total_dis:
   611                           
   612                           ; 1 bytes @ 0x24
   613   000025                     	ds	2
   614   000027                     
   615                           ; 1 bytes @ 0x26
   616 ;;
   617 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   618 ;;
   619 ;; *************** function _main *****************
   620 ;; Defined at:
   621 ;;		line 404 in file "newmain.c"
   622 ;; Parameters:    Size  Location     Type
   623 ;;		None
   624 ;; Auto vars:     Size  Location     Type
   625 ;;  str           100    0[BANK0 ] unsigned char [100]
   626 ;;  num             2  100[BANK0 ] int 
   627 ;; Return value:  Size  Location     Type
   628 ;;                  1    wreg      void 
   629 ;; Registers used:
   630 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   631 ;; Tracked objects:
   632 ;;		On entry : 0/0
   633 ;;		On exit  : 0/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   636 ;;      Params:         0       0       0       0       0       0       0
   637 ;;      Locals:         0     102       0       0       0       0       0
   638 ;;      Temps:          0       0       0       0       0       0       0
   639 ;;      Totals:         0     102       0       0       0       0       0
   640 ;;Total ram usage:      102 bytes
   641 ;; Hardware stack levels required when called: 8
   642 ;; This function calls:
   643 ;;		_ClearBuffer
   644 ;;		_GetString
   645 ;;		_Initialize
   646 ;;		_get_StepLength
   647 ;;		_keyboard_input
   648 ;;		_output_total_dis
   649 ;; This function is called by:
   650 ;;		Startup code after reset
   651 ;; This function uses a non-reentrant model
   652 ;;
   653                           
   654                           	psect	text0
   655   000C6C                     __ptext0:
   656                           	callstack 0
   657   000C6C                     _main:
   658                           	callstack 23
   659   000C6C                     
   660                           ;newmain.c: 405:     Initialize();
   661   000C6C  EC78  F005         	call	_Initialize	;wreg free
   662   000C70                     
   663                           ;newmain.c: 424:     char str[100];;newmain.c: 425:     ClearBuffer();
   664   000C70  EC44  F007         	call	_ClearBuffer	;wreg free
   665   000C74                     
   666                           ;newmain.c: 427:     int num = get_StepLength();
   667   000C74  EC13  F003         	call	_get_StepLength	;wreg free
   668   000C78  C01A  F0E4         	movff	?_get_StepLength,main@num
   669   000C7C  C01B  F0E5         	movff	?_get_StepLength+1,main@num+1
   670   000C80                     
   671                           ;newmain.c: 428:     output_total_dis(num, 100);
   672   000C80  C0E4  F021         	movff	main@num,output_total_dis@num
   673   000C84  C0E5  F022         	movff	main@num+1,output_total_dis@num+1
   674   000C88  0E00               	movlw	0
   675   000C8A  6E24               	movwf	(output_total_dis@step+1)^0,c
   676   000C8C  0E64               	movlw	100
   677   000C8E  6E23               	movwf	output_total_dis@step^0,c
   678   000C90  ECD2  F003         	call	_output_total_dis	;wreg free
   679   000C94                     l1807:
   680                           
   681                           ;newmain.c: 433:         if (GetString(str)) keyboard_input(str);
   682   000C94  0E80               	movlw	low main@str
   683   000C96  6E17               	movwf	GetString@str^0,c
   684   000C98  6A18               	clrf	(GetString@str+1)^0,c
   685   000C9A  EC01  F006         	call	_GetString	;wreg free
   686   000C9E  5017               	movf	?_GetString^0,w,c
   687   000CA0  1018               	iorwf	(?_GetString+1)^0,w,c
   688   000CA2  B4D8               	btfsc	status,2,c
   689   000CA4  EF56  F006         	goto	u1061
   690   000CA8  EF58  F006         	goto	u1060
   691   000CAC                     u1061:
   692   000CAC  EF5C  F006         	goto	l1811
   693   000CB0                     u1060:
   694   000CB0  0E80               	movlw	low main@str
   695   000CB2  6E0F               	movwf	keyboard_input@str^0,c
   696   000CB4  ECAB  F007         	call	_keyboard_input	;wreg free
   697   000CB8                     l1811:
   698                           
   699                           ;newmain.c: 434:         if (ADCON0bits.GO == 0) ADCON0bits.GO = 1;
   700   000CB8  B2C2               	btfsc	194,1,c	;volatile
   701   000CBA  EF61  F006         	goto	u1071
   702   000CBE  EF63  F006         	goto	u1070
   703   000CC2                     u1071:
   704   000CC2  EF4A  F006         	goto	l1807
   705   000CC6                     u1070:
   706   000CC6  82C2               	bsf	194,1,c	;volatile
   707   000CC8  EF4A  F006         	goto	l1807
   708   000CCC  EF36  F000         	goto	start
   709   000CD0                     __end_of_main:
   710                           	callstack 0
   711                           
   712 ;; *************** function _output_total_dis *****************
   713 ;; Defined at:
   714 ;;		line 393 in file "newmain.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;  num             2   32[COMRAM] int 
   717 ;;  step            2   34[COMRAM] int 
   718 ;; Auto vars:     Size  Location     Type
   719 ;;  i               2  202[BANK1 ] int 
   720 ;;  i               2  200[BANK1 ] int 
   721 ;;  tmp           100  100[BANK1 ] unsigned char [100]
   722 ;;  output        100    0[BANK1 ] unsigned char [100]
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   732 ;;      Params:         4       0       0       0       0       0       0
   733 ;;      Locals:         0       0     204       0       0       0       0
   734 ;;      Temps:          2       0       0       0       0       0       0
   735 ;;      Totals:         6       0     204       0       0       0       0
   736 ;;Total ram usage:      210 bytes
   737 ;; Hardware stack levels used: 1
   738 ;; Hardware stack levels required when called: 7
   739 ;; This function calls:
   740 ;;		_itoa
   741 ;;		_putch
   742 ;;		_strcpy
   743 ;;		_strlen
   744 ;; This function is called by:
   745 ;;		_main
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           	psect	text1
   750   0007A4                     __ptext1:
   751                           	callstack 0
   752   0007A4                     _output_total_dis:
   753                           	callstack 23
   754   0007A4                     
   755                           ;newmain.c: 394:     char output[100] = {};
   756   0007A4  EE21  F000         	lfsr	2,output_total_dis@output
   757   0007A8  0E63               	movlw	99
   758   0007AA                     u971:
   759   0007AA  6ADE               	clrf	postinc2,c
   760   0007AC  06E8               	decf	wreg,f,c
   761   0007AE  E2FD               	bc	u971
   762   0007B0                     
   763                           ;newmain.c: 395:     strcpy(output, "Total Length: ");
   764   0007B0  0E00               	movlw	low output_total_dis@output
   765   0007B2  6E0F               	movwf	strcpy@dest^0,c
   766   0007B4  0E01               	movlw	high output_total_dis@output
   767   0007B6  6E10               	movwf	(strcpy@dest+1)^0,c
   768   0007B8  0E15               	movlw	low STR_2
   769   0007BA  6E11               	movwf	strcpy@src^0,c
   770   0007BC  5011               	movf	strcpy@src^0,w,c
   771   0007BE  A4D8               	btfss	status,2,c
   772   0007C0  0E06               	movlw	high __smallconst
   773   0007C2  6E12               	movwf	(strcpy@src+1)^0,c
   774   0007C4  ECCA  F006         	call	_strcpy	;wreg free
   775   0007C8                     
   776                           ;newmain.c: 396:     for(int i=0;i<strlen(output);i++) putch(output[i]);
   777   0007C8  0E00               	movlw	0
   778   0007CA  0101               	movlb	1	; () banked
   779   0007CC  6FC9               	movwf	(output_total_dis@i+1)& (0+255),b
   780   0007CE  0E00               	movlw	0
   781   0007D0  6FC8               	movwf	output_total_dis@i& (0+255),b
   782   0007D2  EFF7  F003         	goto	l1741
   783   0007D6                     l1737:
   784                           
   785                           ; BSR set to: 1
   786   0007D6  0E00               	movlw	low output_total_dis@output
   787   0007D8  25C8               	addwf	output_total_dis@i& (0+255),w,b
   788   0007DA  6ED9               	movwf	fsr2l,c
   789   0007DC  0E01               	movlw	high output_total_dis@output
   790   0007DE  21C9               	addwfc	(output_total_dis@i+1)& (0+255),w,b
   791   0007E0  6EDA               	movwf	fsr2h,c
   792   0007E2  50DF               	movf	indf2,w,c
   793   0007E4  EC68  F006         	call	_putch
   794   0007E8  0101               	movlb	1	; () banked
   795   0007EA  4BC8               	infsnz	output_total_dis@i& (0+255),f,b
   796   0007EC  2BC9               	incf	(output_total_dis@i+1)& (0+255),f,b
   797   0007EE                     l1741:
   798                           
   799                           ; BSR set to: 1
   800   0007EE  0E00               	movlw	low output_total_dis@output
   801   0007F0  6E0F               	movwf	strlen@s^0,c
   802   0007F2  0E01               	movlw	high output_total_dis@output
   803   0007F4  6E10               	movwf	(strlen@s+1)^0,c
   804   0007F6  EC64  F007         	call	_strlen	;wreg free
   805   0007FA  500F               	movf	?_strlen^0,w,c
   806   0007FC  0101               	movlb	1	; () banked
   807   0007FE  5DC8               	subwf	output_total_dis@i& (0+255),w,b
   808   000800  5010               	movf	(?_strlen+1)^0,w,c
   809   000802  59C9               	subwfb	(output_total_dis@i+1)& (0+255),w,b
   810   000804  A0D8               	btfss	status,0,c
   811   000806  EF07  F004         	goto	u981
   812   00080A  EF09  F004         	goto	u980
   813   00080E                     u981:
   814   00080E  EFEB  F003         	goto	l1737
   815   000812                     u980:
   816   000812                     
   817                           ; BSR set to: 1
   818                           ;newmain.c: 397:     char tmp[100] = {};
   819   000812  EE21  F064         	lfsr	2,output_total_dis@tmp
   820   000816  0E63               	movlw	99
   821   000818                     u991:
   822   000818  6ADE               	clrf	postinc2,c
   823   00081A  06E8               	decf	wreg,f,c
   824   00081C  E2FD               	bc	u991
   825   00081E                     
   826                           ; BSR set to: 1
   827                           ;newmain.c: 398:     itoa(num * step, tmp);
   828   00081E  5023               	movf	output_total_dis@step^0,w,c
   829   000820  0221               	mulwf	output_total_dis@num^0,c
   830   000822  CFF3 F025          	movff	prodl,??_output_total_dis
   831   000826  CFF4 F026          	movff	prodh,??_output_total_dis+1
   832   00082A  0222               	mulwf	(output_total_dis@num+1)^0,c
   833   00082C  50F3               	movf	prodl,w,c
   834   00082E  2626               	addwf	(??_output_total_dis+1)^0,f,c
   835   000830  5024               	movf	(output_total_dis@step+1)^0,w,c
   836   000832  0221               	mulwf	output_total_dis@num^0,c
   837   000834  50F3               	movf	prodl,w,c
   838   000836  2626               	addwf	(??_output_total_dis+1)^0,f,c
   839   000838  C025  F017         	movff	??_output_total_dis,itoa@n
   840   00083C  C026  F018         	movff	??_output_total_dis+1,itoa@n+1
   841   000840  0E64               	movlw	low output_total_dis@tmp
   842   000842  6E19               	movwf	itoa@s^0,c
   843   000844  0E01               	movlw	high output_total_dis@tmp
   844   000846  6E1A               	movwf	(itoa@s+1)^0,c
   845   000848  EC52  F004         	call	_itoa	;wreg free
   846   00084C                     
   847                           ;newmain.c: 399:     for(int i=0;i<strlen(tmp);i++) putch(tmp[i]);
   848   00084C  0E00               	movlw	0
   849   00084E  0101               	movlb	1	; () banked
   850   000850  6FCB               	movwf	(output_total_dis@i_957+1)& (0+255),b
   851   000852  0E00               	movlw	0
   852   000854  6FCA               	movwf	output_total_dis@i_957& (0+255),b
   853   000856  EF39  F004         	goto	l1753
   854   00085A                     l1749:
   855                           
   856                           ; BSR set to: 1
   857   00085A  0E64               	movlw	low output_total_dis@tmp
   858   00085C  25CA               	addwf	output_total_dis@i_957& (0+255),w,b
   859   00085E  6ED9               	movwf	fsr2l,c
   860   000860  0E01               	movlw	high output_total_dis@tmp
   861   000862  21CB               	addwfc	(output_total_dis@i_957+1)& (0+255),w,b
   862   000864  6EDA               	movwf	fsr2h,c
   863   000866  50DF               	movf	indf2,w,c
   864   000868  EC68  F006         	call	_putch
   865   00086C  0101               	movlb	1	; () banked
   866   00086E  4BCA               	infsnz	output_total_dis@i_957& (0+255),f,b
   867   000870  2BCB               	incf	(output_total_dis@i_957+1)& (0+255),f,b
   868   000872                     l1753:
   869                           
   870                           ; BSR set to: 1
   871   000872  0E64               	movlw	low output_total_dis@tmp
   872   000874  6E0F               	movwf	strlen@s^0,c
   873   000876  0E01               	movlw	high output_total_dis@tmp
   874   000878  6E10               	movwf	(strlen@s+1)^0,c
   875   00087A  EC64  F007         	call	_strlen	;wreg free
   876   00087E  500F               	movf	?_strlen^0,w,c
   877   000880  0101               	movlb	1	; () banked
   878   000882  5DCA               	subwf	output_total_dis@i_957& (0+255),w,b
   879   000884  5010               	movf	(?_strlen+1)^0,w,c
   880   000886  59CB               	subwfb	(output_total_dis@i_957+1)& (0+255),w,b
   881   000888  A0D8               	btfss	status,0,c
   882   00088A  EF49  F004         	goto	u1001
   883   00088E  EF4B  F004         	goto	u1000
   884   000892                     u1001:
   885   000892  EF2D  F004         	goto	l1749
   886   000896                     u1000:
   887   000896                     
   888                           ; BSR set to: 1
   889                           ;newmain.c: 400:     putch('\r');
   890   000896  0E0D               	movlw	13
   891   000898  EC68  F006         	call	_putch
   892                           
   893                           ;newmain.c: 401:     putch('\n');
   894   00089C  0E0A               	movlw	10
   895   00089E  EC68  F006         	call	_putch
   896   0008A2  0012               	return		;funcret
   897   0008A4                     __end_of_output_total_dis:
   898                           	callstack 0
   899                           
   900 ;; *************** function _itoa *****************
   901 ;; Defined at:
   902 ;;		line 356 in file "newmain.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;  n               2   22[COMRAM] int 
   905 ;;  s               2   24[COMRAM] PTR unsigned char 
   906 ;;		 -> output_total_dis@tmp(100), 
   907 ;; Auto vars:     Size  Location     Type
   908 ;;  i               2   30[COMRAM] int 
   909 ;;  sign            2   28[COMRAM] int 
   910 ;; Return value:  Size  Location     Type
   911 ;;                  1    wreg      void 
   912 ;; Registers used:
   913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   919 ;;      Params:         4       0       0       0       0       0       0
   920 ;;      Locals:         4       0       0       0       0       0       0
   921 ;;      Temps:          2       0       0       0       0       0       0
   922 ;;      Totals:        10       0       0       0       0       0       0
   923 ;;Total ram usage:       10 bytes
   924 ;; Hardware stack levels used: 1
   925 ;; Hardware stack levels required when called: 6
   926 ;; This function calls:
   927 ;;		___awdiv
   928 ;;		___awmod
   929 ;;		_reverse
   930 ;; This function is called by:
   931 ;;		_output_total_dis
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text2
   936   0008A4                     __ptext2:
   937                           	callstack 0
   938   0008A4                     _itoa:
   939                           	callstack 23
   940   0008A4                     
   941                           ;newmain.c: 357:     int sign = 1;
   942   0008A4  0E00               	movlw	0
   943   0008A6  6E1E               	movwf	(itoa@sign+1)^0,c
   944   0008A8  0E01               	movlw	1
   945   0008AA  6E1D               	movwf	itoa@sign^0,c
   946   0008AC                     
   947                           ;newmain.c: 358:     if (n < 0) {
   948   0008AC  BE18               	btfsc	(itoa@n+1)^0,7,c
   949   0008AE  EF5D  F004         	goto	u790
   950   0008B2  EF5B  F004         	goto	u791
   951   0008B6                     u791:
   952   0008B6  EF63  F004         	goto	l1547
   953   0008BA                     u790:
   954   0008BA                     
   955                           ;newmain.c: 359:         sign = -1;
   956   0008BA  681D               	setf	itoa@sign^0,c
   957   0008BC  681E               	setf	(itoa@sign+1)^0,c
   958   0008BE                     
   959                           ;newmain.c: 360:         n = -n;
   960   0008BE  6C17               	negf	itoa@n^0,c
   961   0008C0  1E18               	comf	(itoa@n+1)^0,f,c
   962   0008C2  B0D8               	btfsc	status,0,c
   963   0008C4  2A18               	incf	(itoa@n+1)^0,f,c
   964   0008C6                     l1547:
   965                           
   966                           ;newmain.c: 362:     int i = 0;
   967   0008C6  0E00               	movlw	0
   968   0008C8  6E20               	movwf	(itoa@i+1)^0,c
   969   0008CA  0E00               	movlw	0
   970   0008CC  6E1F               	movwf	itoa@i^0,c
   971                           
   972                           ;newmain.c: 363:     while (n != 0) {
   973   0008CE  EF8C  F004         	goto	l1555
   974   0008D2                     l1549:
   975                           
   976                           ;newmain.c: 364:         s[i++] = n%10 + '0';
   977   0008D2  501F               	movf	itoa@i^0,w,c
   978   0008D4  2419               	addwf	itoa@s^0,w,c
   979   0008D6  6ED9               	movwf	fsr2l,c
   980   0008D8  5020               	movf	(itoa@i+1)^0,w,c
   981   0008DA  201A               	addwfc	(itoa@s+1)^0,w,c
   982   0008DC  6EDA               	movwf	fsr2h,c
   983   0008DE  C017  F00F         	movff	itoa@n,___awmod@dividend
   984   0008E2  C018  F010         	movff	itoa@n+1,___awmod@dividend+1
   985   0008E6  0E00               	movlw	0
   986   0008E8  6E12               	movwf	(___awmod@divisor+1)^0,c
   987   0008EA  0E0A               	movlw	10
   988   0008EC  6E11               	movwf	___awmod@divisor^0,c
   989   0008EE  EC21  F005         	call	___awmod	;wreg free
   990   0008F2  500F               	movf	?___awmod^0,w,c
   991   0008F4  0F30               	addlw	48
   992   0008F6  6EDF               	movwf	indf2,c
   993   0008F8  4A1F               	infsnz	itoa@i^0,f,c
   994   0008FA  2A20               	incf	(itoa@i+1)^0,f,c
   995   0008FC                     
   996                           ;newmain.c: 365:         n = n/10;
   997   0008FC  C017  F00F         	movff	itoa@n,___awdiv@dividend
   998   000900  C018  F010         	movff	itoa@n+1,___awdiv@dividend+1
   999   000904  0E00               	movlw	0
  1000   000906  6E12               	movwf	(___awdiv@divisor+1)^0,c
  1001   000908  0E0A               	movlw	10
  1002   00090A  6E11               	movwf	___awdiv@divisor^0,c
  1003   00090C  ECC0  F004         	call	___awdiv	;wreg free
  1004   000910  C00F  F017         	movff	?___awdiv,itoa@n
  1005   000914  C010  F018         	movff	?___awdiv+1,itoa@n+1
  1006   000918                     l1555:
  1007                           
  1008                           ;newmain.c: 363:     while (n != 0) {
  1009   000918  5017               	movf	itoa@n^0,w,c
  1010   00091A  1018               	iorwf	(itoa@n+1)^0,w,c
  1011   00091C  A4D8               	btfss	status,2,c
  1012   00091E  EF93  F004         	goto	u801
  1013   000922  EF95  F004         	goto	u800
  1014   000926                     u801:
  1015   000926  EF69  F004         	goto	l1549
  1016   00092A                     u800:
  1017   00092A                     
  1018                           ;newmain.c: 368:     if (sign < 0)
  1019   00092A  BE1E               	btfsc	(itoa@sign+1)^0,7,c
  1020   00092C  EF9C  F004         	goto	u810
  1021   000930  EF9A  F004         	goto	u811
  1022   000934                     u811:
  1023   000934  EFA6  F004         	goto	l1563
  1024   000938                     u810:
  1025   000938                     
  1026                           ;newmain.c: 369:         s[i++] = '-';
  1027   000938  501F               	movf	itoa@i^0,w,c
  1028   00093A  2419               	addwf	itoa@s^0,w,c
  1029   00093C  6ED9               	movwf	fsr2l,c
  1030   00093E  5020               	movf	(itoa@i+1)^0,w,c
  1031   000940  201A               	addwfc	(itoa@s+1)^0,w,c
  1032   000942  6EDA               	movwf	fsr2h,c
  1033   000944  0E2D               	movlw	45
  1034   000946  6EDF               	movwf	indf2,c
  1035   000948  4A1F               	infsnz	itoa@i^0,f,c
  1036   00094A  2A20               	incf	(itoa@i+1)^0,f,c
  1037   00094C                     l1563:
  1038                           
  1039                           ;newmain.c: 370:     s[i] = '\0';
  1040   00094C  501F               	movf	itoa@i^0,w,c
  1041   00094E  2419               	addwf	itoa@s^0,w,c
  1042   000950  6ED9               	movwf	fsr2l,c
  1043   000952  5020               	movf	(itoa@i+1)^0,w,c
  1044   000954  201A               	addwfc	(itoa@s+1)^0,w,c
  1045   000956  6EDA               	movwf	fsr2h,c
  1046   000958  6ADF               	clrf	indf2,c
  1047   00095A                     
  1048                           ;newmain.c: 372:     reverse(s, s+i-1);
  1049   00095A  C019  F00F         	movff	itoa@s,reverse@first
  1050   00095E  C01A  F010         	movff	itoa@s+1,reverse@first+1
  1051   000962  501F               	movf	itoa@i^0,w,c
  1052   000964  2419               	addwf	itoa@s^0,w,c
  1053   000966  6E1B               	movwf	??_itoa^0,c
  1054   000968  5020               	movf	(itoa@i+1)^0,w,c
  1055   00096A  201A               	addwfc	(itoa@s+1)^0,w,c
  1056   00096C  6E1C               	movwf	(??_itoa+1)^0,c
  1057   00096E  0EFF               	movlw	255
  1058   000970  241B               	addwf	??_itoa^0,w,c
  1059   000972  6E11               	movwf	reverse@last^0,c
  1060   000974  0EFF               	movlw	255
  1061   000976  201C               	addwfc	(??_itoa+1)^0,w,c
  1062   000978  6E12               	movwf	(reverse@last+1)^0,c
  1063   00097A  ECF4  F006         	call	_reverse	;wreg free
  1064   00097E  0012               	return		;funcret
  1065   000980                     __end_of_itoa:
  1066                           	callstack 0
  1067                           
  1068 ;; *************** function _reverse *****************
  1069 ;; Defined at:
  1070 ;;		line 347 in file "newmain.c"
  1071 ;; Parameters:    Size  Location     Type
  1072 ;;  first           2   14[COMRAM] PTR unsigned char 
  1073 ;;		 -> output_total_dis@tmp(100), 
  1074 ;;  last            2   16[COMRAM] PTR unsigned char 
  1075 ;;		 -> output_total_dis@tmp(100), 
  1076 ;; Auto vars:     Size  Location     Type
  1077 ;;  tmp             1   18[COMRAM] unsigned char 
  1078 ;; Return value:  Size  Location     Type
  1079 ;;                  1    wreg      void 
  1080 ;; Registers used:
  1081 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1082 ;; Tracked objects:
  1083 ;;		On entry : 0/0
  1084 ;;		On exit  : 0/0
  1085 ;;		Unchanged: 0/0
  1086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1087 ;;      Params:         4       0       0       0       0       0       0
  1088 ;;      Locals:         1       0       0       0       0       0       0
  1089 ;;      Temps:          0       0       0       0       0       0       0
  1090 ;;      Totals:         5       0       0       0       0       0       0
  1091 ;;Total ram usage:        5 bytes
  1092 ;; Hardware stack levels used: 1
  1093 ;; Hardware stack levels required when called: 5
  1094 ;; This function calls:
  1095 ;;		Nothing
  1096 ;; This function is called by:
  1097 ;;		_itoa
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           	psect	text3
  1102   000DE8                     __ptext3:
  1103                           	callstack 0
  1104   000DE8                     _reverse:
  1105                           	callstack 23
  1106   000DE8                     
  1107                           ;newmain.c: 348:     for (;first < last; first++,last--) {
  1108   000DE8  EF11  F007         	goto	l1429
  1109   000DEC                     l1419:
  1110                           
  1111                           ;newmain.c: 350:         char tmp = *first;
  1112   000DEC  C00F  FFD9         	movff	reverse@first,fsr2l
  1113   000DF0  C010  FFDA         	movff	reverse@first+1,fsr2h
  1114   000DF4  50DF               	movf	indf2,w,c
  1115   000DF6  6E13               	movwf	reverse@tmp^0,c
  1116   000DF8                     
  1117                           ;newmain.c: 351:         *first = *last;
  1118   000DF8  C011  FFD9         	movff	reverse@last,fsr2l
  1119   000DFC  C012  FFDA         	movff	reverse@last+1,fsr2h
  1120   000E00  C00F  FFE1         	movff	reverse@first,fsr1l
  1121   000E04  C010  FFE2         	movff	reverse@first+1,fsr1h
  1122   000E08  CFDF FFE7          	movff	indf2,indf1
  1123   000E0C                     
  1124                           ;newmain.c: 352:         *last = tmp;
  1125   000E0C  C011  FFD9         	movff	reverse@last,fsr2l
  1126   000E10  C012  FFDA         	movff	reverse@last+1,fsr2h
  1127   000E14  C013  FFDF         	movff	reverse@tmp,indf2
  1128   000E18                     
  1129                           ;newmain.c: 353:     }
  1130   000E18  4A0F               	infsnz	reverse@first^0,f,c
  1131   000E1A  2A10               	incf	(reverse@first+1)^0,f,c
  1132   000E1C  0611               	decf	reverse@last^0,f,c
  1133   000E1E  A0D8               	btfss	status,0,c
  1134   000E20  0612               	decf	(reverse@last+1)^0,f,c
  1135   000E22                     l1429:
  1136   000E22  5011               	movf	reverse@last^0,w,c
  1137   000E24  5C0F               	subwf	reverse@first^0,w,c
  1138   000E26  5012               	movf	(reverse@last+1)^0,w,c
  1139   000E28  5810               	subwfb	(reverse@first+1)^0,w,c
  1140   000E2A  A0D8               	btfss	status,0,c
  1141   000E2C  EF1A  F007         	goto	u601
  1142   000E30  EF1C  F007         	goto	u600
  1143   000E34                     u601:
  1144   000E34  EFF6  F006         	goto	l1419
  1145   000E38                     u600:
  1146   000E38  0012               	return		;funcret
  1147   000E3A                     __end_of_reverse:
  1148                           	callstack 0
  1149                           
  1150 ;; *************** function ___awmod *****************
  1151 ;; Defined at:
  1152 ;;		line 7 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/awmod.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;  dividend        2   14[COMRAM] int 
  1155 ;;  divisor         2   16[COMRAM] int 
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;  sign            1   19[COMRAM] unsigned char 
  1158 ;;  counter         1   18[COMRAM] unsigned char 
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  2   14[COMRAM] int 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1168 ;;      Params:         4       0       0       0       0       0       0
  1169 ;;      Locals:         2       0       0       0       0       0       0
  1170 ;;      Temps:          0       0       0       0       0       0       0
  1171 ;;      Totals:         6       0       0       0       0       0       0
  1172 ;;Total ram usage:        6 bytes
  1173 ;; Hardware stack levels used: 1
  1174 ;; Hardware stack levels required when called: 5
  1175 ;; This function calls:
  1176 ;;		Nothing
  1177 ;; This function is called by:
  1178 ;;		_itoa
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           	psect	text4
  1183   000A42                     __ptext4:
  1184                           	callstack 0
  1185   000A42                     ___awmod:
  1186                           	callstack 23
  1187   000A42  6A14               	clrf	___awmod@sign^0,c
  1188   000A44  BE10               	btfsc	(___awmod@dividend+1)^0,7,c
  1189   000A46  EF29  F005         	goto	u670
  1190   000A4A  EF27  F005         	goto	u671
  1191   000A4E                     u671:
  1192   000A4E  EF2F  F005         	goto	l1483
  1193   000A52                     u670:
  1194   000A52  6C0F               	negf	___awmod@dividend^0,c
  1195   000A54  1E10               	comf	(___awmod@dividend+1)^0,f,c
  1196   000A56  B0D8               	btfsc	status,0,c
  1197   000A58  2A10               	incf	(___awmod@dividend+1)^0,f,c
  1198   000A5A  0E01               	movlw	1
  1199   000A5C  6E14               	movwf	___awmod@sign^0,c
  1200   000A5E                     l1483:
  1201   000A5E  BE12               	btfsc	(___awmod@divisor+1)^0,7,c
  1202   000A60  EF36  F005         	goto	u680
  1203   000A64  EF34  F005         	goto	u681
  1204   000A68                     u681:
  1205   000A68  EF3A  F005         	goto	l1487
  1206   000A6C                     u680:
  1207   000A6C  6C11               	negf	___awmod@divisor^0,c
  1208   000A6E  1E12               	comf	(___awmod@divisor+1)^0,f,c
  1209   000A70  B0D8               	btfsc	status,0,c
  1210   000A72  2A12               	incf	(___awmod@divisor+1)^0,f,c
  1211   000A74                     l1487:
  1212   000A74  5011               	movf	___awmod@divisor^0,w,c
  1213   000A76  1012               	iorwf	(___awmod@divisor+1)^0,w,c
  1214   000A78  B4D8               	btfsc	status,2,c
  1215   000A7A  EF41  F005         	goto	u691
  1216   000A7E  EF43  F005         	goto	u690
  1217   000A82                     u691:
  1218   000A82  EF67  F005         	goto	l1503
  1219   000A86                     u690:
  1220   000A86  0E01               	movlw	1
  1221   000A88  6E13               	movwf	___awmod@counter^0,c
  1222   000A8A  EF4B  F005         	goto	l1493
  1223   000A8E                     l1491:
  1224   000A8E  90D8               	bcf	status,0,c
  1225   000A90  3611               	rlcf	___awmod@divisor^0,f,c
  1226   000A92  3612               	rlcf	(___awmod@divisor+1)^0,f,c
  1227   000A94  2A13               	incf	___awmod@counter^0,f,c
  1228   000A96                     l1493:
  1229   000A96  AE12               	btfss	(___awmod@divisor+1)^0,7,c
  1230   000A98  EF50  F005         	goto	u701
  1231   000A9C  EF52  F005         	goto	u700
  1232   000AA0                     u701:
  1233   000AA0  EF47  F005         	goto	l1491
  1234   000AA4                     u700:
  1235   000AA4                     l1495:
  1236   000AA4  5011               	movf	___awmod@divisor^0,w,c
  1237   000AA6  5C0F               	subwf	___awmod@dividend^0,w,c
  1238   000AA8  5012               	movf	(___awmod@divisor+1)^0,w,c
  1239   000AAA  5810               	subwfb	(___awmod@dividend+1)^0,w,c
  1240   000AAC  A0D8               	btfss	status,0,c
  1241   000AAE  EF5B  F005         	goto	u711
  1242   000AB2  EF5D  F005         	goto	u710
  1243   000AB6                     u711:
  1244   000AB6  EF61  F005         	goto	l1499
  1245   000ABA                     u710:
  1246   000ABA  5011               	movf	___awmod@divisor^0,w,c
  1247   000ABC  5E0F               	subwf	___awmod@dividend^0,f,c
  1248   000ABE  5012               	movf	(___awmod@divisor+1)^0,w,c
  1249   000AC0  5A10               	subwfb	(___awmod@dividend+1)^0,f,c
  1250   000AC2                     l1499:
  1251   000AC2  90D8               	bcf	status,0,c
  1252   000AC4  3212               	rrcf	(___awmod@divisor+1)^0,f,c
  1253   000AC6  3211               	rrcf	___awmod@divisor^0,f,c
  1254   000AC8  2E13               	decfsz	___awmod@counter^0,f,c
  1255   000ACA  EF52  F005         	goto	l1495
  1256   000ACE                     l1503:
  1257   000ACE  5014               	movf	___awmod@sign^0,w,c
  1258   000AD0  B4D8               	btfsc	status,2,c
  1259   000AD2  EF6D  F005         	goto	u721
  1260   000AD6  EF6F  F005         	goto	u720
  1261   000ADA                     u721:
  1262   000ADA  EF73  F005         	goto	l1507
  1263   000ADE                     u720:
  1264   000ADE  6C0F               	negf	___awmod@dividend^0,c
  1265   000AE0  1E10               	comf	(___awmod@dividend+1)^0,f,c
  1266   000AE2  B0D8               	btfsc	status,0,c
  1267   000AE4  2A10               	incf	(___awmod@dividend+1)^0,f,c
  1268   000AE6                     l1507:
  1269   000AE6  C00F  F00F         	movff	___awmod@dividend,?___awmod
  1270   000AEA  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  1271   000AEE  0012               	return		;funcret
  1272   000AF0                     __end_of___awmod:
  1273                           	callstack 0
  1274                           
  1275 ;; *************** function ___awdiv *****************
  1276 ;; Defined at:
  1277 ;;		line 7 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/awdiv.c"
  1278 ;; Parameters:    Size  Location     Type
  1279 ;;  dividend        2   14[COMRAM] int 
  1280 ;;  divisor         2   16[COMRAM] int 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  quotient        2   20[COMRAM] int 
  1283 ;;  sign            1   19[COMRAM] unsigned char 
  1284 ;;  counter         1   18[COMRAM] unsigned char 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  2   14[COMRAM] int 
  1287 ;; Registers used:
  1288 ;;		wreg, status,2, status,0
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1294 ;;      Params:         4       0       0       0       0       0       0
  1295 ;;      Locals:         4       0       0       0       0       0       0
  1296 ;;      Temps:          0       0       0       0       0       0       0
  1297 ;;      Totals:         8       0       0       0       0       0       0
  1298 ;;Total ram usage:        8 bytes
  1299 ;; Hardware stack levels used: 1
  1300 ;; Hardware stack levels required when called: 5
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_itoa
  1305 ;;		_End_Timer
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           	psect	text5
  1310   000980                     __ptext5:
  1311                           	callstack 0
  1312   000980                     ___awdiv:
  1313                           	callstack 23
  1314   000980  6A14               	clrf	___awdiv@sign^0,c
  1315   000982  BE12               	btfsc	(___awdiv@divisor+1)^0,7,c
  1316   000984  EFC8  F004         	goto	u610
  1317   000988  EFC6  F004         	goto	u611
  1318   00098C                     u611:
  1319   00098C  EFCE  F004         	goto	l1439
  1320   000990                     u610:
  1321   000990  6C11               	negf	___awdiv@divisor^0,c
  1322   000992  1E12               	comf	(___awdiv@divisor+1)^0,f,c
  1323   000994  B0D8               	btfsc	status,0,c
  1324   000996  2A12               	incf	(___awdiv@divisor+1)^0,f,c
  1325   000998  0E01               	movlw	1
  1326   00099A  6E14               	movwf	___awdiv@sign^0,c
  1327   00099C                     l1439:
  1328   00099C  BE10               	btfsc	(___awdiv@dividend+1)^0,7,c
  1329   00099E  EFD5  F004         	goto	u620
  1330   0009A2  EFD3  F004         	goto	u621
  1331   0009A6                     u621:
  1332   0009A6  EFDB  F004         	goto	l1445
  1333   0009AA                     u620:
  1334   0009AA  6C0F               	negf	___awdiv@dividend^0,c
  1335   0009AC  1E10               	comf	(___awdiv@dividend+1)^0,f,c
  1336   0009AE  B0D8               	btfsc	status,0,c
  1337   0009B0  2A10               	incf	(___awdiv@dividend+1)^0,f,c
  1338   0009B2  0E01               	movlw	1
  1339   0009B4  1A14               	xorwf	___awdiv@sign^0,f,c
  1340   0009B6                     l1445:
  1341   0009B6  0E00               	movlw	0
  1342   0009B8  6E16               	movwf	(___awdiv@quotient+1)^0,c
  1343   0009BA  0E00               	movlw	0
  1344   0009BC  6E15               	movwf	___awdiv@quotient^0,c
  1345   0009BE  5011               	movf	___awdiv@divisor^0,w,c
  1346   0009C0  1012               	iorwf	(___awdiv@divisor+1)^0,w,c
  1347   0009C2  B4D8               	btfsc	status,2,c
  1348   0009C4  EFE6  F004         	goto	u631
  1349   0009C8  EFE8  F004         	goto	u630
  1350   0009CC                     u631:
  1351   0009CC  EF10  F005         	goto	l1467
  1352   0009D0                     u630:
  1353   0009D0  0E01               	movlw	1
  1354   0009D2  6E13               	movwf	___awdiv@counter^0,c
  1355   0009D4  EFF0  F004         	goto	l1453
  1356   0009D8                     l1451:
  1357   0009D8  90D8               	bcf	status,0,c
  1358   0009DA  3611               	rlcf	___awdiv@divisor^0,f,c
  1359   0009DC  3612               	rlcf	(___awdiv@divisor+1)^0,f,c
  1360   0009DE  2A13               	incf	___awdiv@counter^0,f,c
  1361   0009E0                     l1453:
  1362   0009E0  AE12               	btfss	(___awdiv@divisor+1)^0,7,c
  1363   0009E2  EFF5  F004         	goto	u641
  1364   0009E6  EFF7  F004         	goto	u640
  1365   0009EA                     u641:
  1366   0009EA  EFEC  F004         	goto	l1451
  1367   0009EE                     u640:
  1368   0009EE                     l1455:
  1369   0009EE  90D8               	bcf	status,0,c
  1370   0009F0  3615               	rlcf	___awdiv@quotient^0,f,c
  1371   0009F2  3616               	rlcf	(___awdiv@quotient+1)^0,f,c
  1372   0009F4  5011               	movf	___awdiv@divisor^0,w,c
  1373   0009F6  5C0F               	subwf	___awdiv@dividend^0,w,c
  1374   0009F8  5012               	movf	(___awdiv@divisor+1)^0,w,c
  1375   0009FA  5810               	subwfb	(___awdiv@dividend+1)^0,w,c
  1376   0009FC  A0D8               	btfss	status,0,c
  1377   0009FE  EF03  F005         	goto	u651
  1378   000A02  EF05  F005         	goto	u650
  1379   000A06                     u651:
  1380   000A06  EF0A  F005         	goto	l1463
  1381   000A0A                     u650:
  1382   000A0A  5011               	movf	___awdiv@divisor^0,w,c
  1383   000A0C  5E0F               	subwf	___awdiv@dividend^0,f,c
  1384   000A0E  5012               	movf	(___awdiv@divisor+1)^0,w,c
  1385   000A10  5A10               	subwfb	(___awdiv@dividend+1)^0,f,c
  1386   000A12  8015               	bsf	___awdiv@quotient^0,0,c
  1387   000A14                     l1463:
  1388   000A14  90D8               	bcf	status,0,c
  1389   000A16  3212               	rrcf	(___awdiv@divisor+1)^0,f,c
  1390   000A18  3211               	rrcf	___awdiv@divisor^0,f,c
  1391   000A1A  2E13               	decfsz	___awdiv@counter^0,f,c
  1392   000A1C  EFF7  F004         	goto	l1455
  1393   000A20                     l1467:
  1394   000A20  5014               	movf	___awdiv@sign^0,w,c
  1395   000A22  B4D8               	btfsc	status,2,c
  1396   000A24  EF16  F005         	goto	u661
  1397   000A28  EF18  F005         	goto	u660
  1398   000A2C                     u661:
  1399   000A2C  EF1C  F005         	goto	l1471
  1400   000A30                     u660:
  1401   000A30  6C15               	negf	___awdiv@quotient^0,c
  1402   000A32  1E16               	comf	(___awdiv@quotient+1)^0,f,c
  1403   000A34  B0D8               	btfsc	status,0,c
  1404   000A36  2A16               	incf	(___awdiv@quotient+1)^0,f,c
  1405   000A38                     l1471:
  1406   000A38  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  1407   000A3C  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  1408   000A40  0012               	return		;funcret
  1409   000A42                     __end_of___awdiv:
  1410                           	callstack 0
  1411                           
  1412 ;; *************** function _keyboard_input *****************
  1413 ;; Defined at:
  1414 ;;		line 328 in file "newmain.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  str             1   14[COMRAM] PTR unsigned char 
  1417 ;;		 -> main@str(100), 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  1    wreg      void 
  1422 ;; Registers used:
  1423 ;;		None
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1429 ;;      Params:         1       0       0       0       0       0       0
  1430 ;;      Locals:         0       0       0       0       0       0       0
  1431 ;;      Temps:          0       0       0       0       0       0       0
  1432 ;;      Totals:         1       0       0       0       0       0       0
  1433 ;;Total ram usage:        1 bytes
  1434 ;; Hardware stack levels used: 1
  1435 ;; Hardware stack levels required when called: 5
  1436 ;; This function calls:
  1437 ;;		Nothing
  1438 ;; This function is called by:
  1439 ;;		_main
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text6
  1444   000F56                     __ptext6:
  1445                           	callstack 0
  1446   000F56                     _keyboard_input:
  1447                           	callstack 25
  1448   000F56  0012               	return		;funcret
  1449   000F58                     __end_of_keyboard_input:
  1450                           	callstack 0
  1451                           
  1452 ;; *************** function _get_StepLength *****************
  1453 ;; Defined at:
  1454 ;;		line 374 in file "newmain.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;		None
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;  i               2  202[BANK1 ] int 
  1459 ;;  i               2  200[BANK1 ] int 
  1460 ;;  str           100  100[BANK1 ] unsigned char [100]
  1461 ;;  ask           100    0[BANK1 ] unsigned char [100]
  1462 ;;  input           2  204[BANK1 ] int 
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  2   25[COMRAM] int 
  1465 ;; Registers used:
  1466 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1472 ;;      Params:         2       0       0       0       0       0       0
  1473 ;;      Locals:         0       0     206       0       0       0       0
  1474 ;;      Temps:          3       0       0       0       0       0       0
  1475 ;;      Totals:         5       0     206       0       0       0       0
  1476 ;;Total ram usage:      211 bytes
  1477 ;; Hardware stack levels used: 1
  1478 ;; Hardware stack levels required when called: 7
  1479 ;; This function calls:
  1480 ;;		_ClearBuffer
  1481 ;;		_GetString
  1482 ;;		___wmul
  1483 ;;		_putch
  1484 ;;		_strcpy
  1485 ;;		_strlen
  1486 ;; This function is called by:
  1487 ;;		_main
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text7
  1492   000626                     __ptext7:
  1493                           	callstack 0
  1494   000626                     _get_StepLength:
  1495                           	callstack 23
  1496   000626                     
  1497                           ;newmain.c: 375:     char ask[100];;newmain.c: 376:     strcpy(ask, "Input Step Length: 
      +                          ");
  1498   000626  0E00               	movlw	low get_StepLength@ask
  1499   000628  6E0F               	movwf	strcpy@dest^0,c
  1500   00062A  0E01               	movlw	high get_StepLength@ask
  1501   00062C  6E10               	movwf	(strcpy@dest+1)^0,c
  1502   00062E  0E01               	movlw	low STR_1
  1503   000630  6E11               	movwf	strcpy@src^0,c
  1504   000632  5011               	movf	strcpy@src^0,w,c
  1505   000634  A4D8               	btfss	status,2,c
  1506   000636  0E06               	movlw	high __smallconst
  1507   000638  6E12               	movwf	(strcpy@src+1)^0,c
  1508   00063A  ECCA  F006         	call	_strcpy	;wreg free
  1509   00063E                     
  1510                           ;newmain.c: 377:     for(int i=0;i<strlen(ask);i++) putch(ask[i]);
  1511   00063E  0E00               	movlw	0
  1512   000640  0101               	movlb	1	; () banked
  1513   000642  6FC9               	movwf	(get_StepLength@i+1)& (0+255),b
  1514   000644  0E00               	movlw	0
  1515   000646  6FC8               	movwf	get_StepLength@i& (0+255),b
  1516   000648  EF32  F003         	goto	l1697
  1517   00064C                     l1693:
  1518                           
  1519                           ; BSR set to: 1
  1520   00064C  0E00               	movlw	low get_StepLength@ask
  1521   00064E  25C8               	addwf	get_StepLength@i& (0+255),w,b
  1522   000650  6ED9               	movwf	fsr2l,c
  1523   000652  0E01               	movlw	high get_StepLength@ask
  1524   000654  21C9               	addwfc	(get_StepLength@i+1)& (0+255),w,b
  1525   000656  6EDA               	movwf	fsr2h,c
  1526   000658  50DF               	movf	indf2,w,c
  1527   00065A  EC68  F006         	call	_putch
  1528   00065E  0101               	movlb	1	; () banked
  1529   000660  4BC8               	infsnz	get_StepLength@i& (0+255),f,b
  1530   000662  2BC9               	incf	(get_StepLength@i+1)& (0+255),f,b
  1531   000664                     l1697:
  1532                           
  1533                           ; BSR set to: 1
  1534   000664  0E00               	movlw	low get_StepLength@ask
  1535   000666  6E0F               	movwf	strlen@s^0,c
  1536   000668  0E01               	movlw	high get_StepLength@ask
  1537   00066A  6E10               	movwf	(strlen@s+1)^0,c
  1538   00066C  EC64  F007         	call	_strlen	;wreg free
  1539   000670  500F               	movf	?_strlen^0,w,c
  1540   000672  0101               	movlb	1	; () banked
  1541   000674  5DC8               	subwf	get_StepLength@i& (0+255),w,b
  1542   000676  5010               	movf	(?_strlen+1)^0,w,c
  1543   000678  59C9               	subwfb	(get_StepLength@i+1)& (0+255),w,b
  1544   00067A  A0D8               	btfss	status,0,c
  1545   00067C  EF42  F003         	goto	u901
  1546   000680  EF44  F003         	goto	u900
  1547   000684                     u901:
  1548   000684  EF26  F003         	goto	l1693
  1549   000688                     u900:
  1550   000688                     
  1551                           ; BSR set to: 1
  1552                           ;newmain.c: 378:     int input = 0;
  1553   000688  0E00               	movlw	0
  1554   00068A  6FCD               	movwf	(get_StepLength@input+1)& (0+255),b
  1555   00068C  0E00               	movlw	0
  1556   00068E  6FCC               	movwf	get_StepLength@input& (0+255),b
  1557   000690                     
  1558                           ; BSR set to: 1
  1559                           ;newmain.c: 379:     char str[100];;newmain.c: 380:     ClearBuffer();
  1560   000690  EC44  F007         	call	_ClearBuffer	;wreg free
  1561                           
  1562                           ;newmain.c: 381:     while( GetString(str) || input == 0 ) {
  1563   000694  EFA7  F003         	goto	l1719
  1564   000698                     l1703:
  1565                           
  1566                           ;newmain.c: 382:         for(int i=0;i<strlen(str);i++) {
  1567   000698  0E00               	movlw	0
  1568   00069A  0101               	movlb	1	; () banked
  1569   00069C  6FCB               	movwf	(get_StepLength@i_945+1)& (0+255),b
  1570   00069E  0E00               	movlw	0
  1571   0006A0  6FCA               	movwf	get_StepLength@i_945& (0+255),b
  1572   0006A2  EF95  F003         	goto	l1717
  1573   0006A6                     l1705:
  1574                           
  1575                           ; BSR set to: 1
  1576                           ;newmain.c: 383:             ClearBuffer();
  1577   0006A6  EC44  F007         	call	_ClearBuffer	;wreg free
  1578   0006AA                     
  1579                           ;newmain.c: 384:             if( str[i] >= '0' && str[i] <= '9' ) {
  1580   0006AA  0E64               	movlw	low get_StepLength@str
  1581   0006AC  0101               	movlb	1	; () banked
  1582   0006AE  25CA               	addwf	get_StepLength@i_945& (0+255),w,b
  1583   0006B0  6ED9               	movwf	fsr2l,c
  1584   0006B2  0E01               	movlw	high get_StepLength@str
  1585   0006B4  21CB               	addwfc	(get_StepLength@i_945+1)& (0+255),w,b
  1586   0006B6  6EDA               	movwf	fsr2h,c
  1587   0006B8  0E2F               	movlw	47
  1588   0006BA  64DF               	cpfsgt	indf2,c
  1589   0006BC  EF62  F003         	goto	u911
  1590   0006C0  EF64  F003         	goto	u910
  1591   0006C4                     u911:
  1592   0006C4  EF93  F003         	goto	l1715
  1593   0006C8                     u910:
  1594   0006C8                     
  1595                           ; BSR set to: 1
  1596   0006C8  0E64               	movlw	low get_StepLength@str
  1597   0006CA  25CA               	addwf	get_StepLength@i_945& (0+255),w,b
  1598   0006CC  6ED9               	movwf	fsr2l,c
  1599   0006CE  0E01               	movlw	high get_StepLength@str
  1600   0006D0  21CB               	addwfc	(get_StepLength@i_945+1)& (0+255),w,b
  1601   0006D2  6EDA               	movwf	fsr2h,c
  1602   0006D4  0E3A               	movlw	58
  1603   0006D6  60DF               	cpfslt	indf2,c
  1604   0006D8  EF70  F003         	goto	u921
  1605   0006DC  EF72  F003         	goto	u920
  1606   0006E0                     u921:
  1607   0006E0  EF93  F003         	goto	l1715
  1608   0006E4                     u920:
  1609   0006E4                     
  1610                           ; BSR set to: 1
  1611                           ;newmain.c: 385:                 input *= 10, input += str[i] - '0';
  1612   0006E4  C1CC  F00F         	movff	get_StepLength@input,___wmul@multiplier
  1613   0006E8  C1CD  F010         	movff	get_StepLength@input+1,___wmul@multiplier+1
  1614   0006EC  0E00               	movlw	0
  1615   0006EE  6E12               	movwf	(___wmul@multiplicand+1)^0,c
  1616   0006F0  0E0A               	movlw	10
  1617   0006F2  6E11               	movwf	___wmul@multiplicand^0,c
  1618   0006F4  EC98  F007         	call	___wmul	;wreg free
  1619   0006F8  C00F  F1CC         	movff	?___wmul,get_StepLength@input
  1620   0006FC  C010  F1CD         	movff	?___wmul+1,get_StepLength@input+1
  1621   000700  0E64               	movlw	low get_StepLength@str
  1622   000702  0101               	movlb	1	; () banked
  1623   000704  25CA               	addwf	get_StepLength@i_945& (0+255),w,b
  1624   000706  6ED9               	movwf	fsr2l,c
  1625   000708  0E01               	movlw	high get_StepLength@str
  1626   00070A  21CB               	addwfc	(get_StepLength@i_945+1)& (0+255),w,b
  1627   00070C  6EDA               	movwf	fsr2h,c
  1628   00070E  50DF               	movf	indf2,w,c
  1629   000710  6E1C               	movwf	??_get_StepLength^0,c
  1630   000712  0ED0               	movlw	208
  1631   000714  241C               	addwf	??_get_StepLength^0,w,c
  1632   000716  6E1D               	movwf	(??_get_StepLength+1)^0,c
  1633   000718  6A1E               	clrf	(??_get_StepLength+2)^0,c
  1634   00071A  0EFF               	movlw	255
  1635   00071C  221E               	addwfc	(??_get_StepLength+2)^0,f,c
  1636   00071E  501D               	movf	(??_get_StepLength+1)^0,w,c
  1637   000720  27CC               	addwf	get_StepLength@input& (0+255),f,b
  1638   000722  501E               	movf	(??_get_StepLength+2)^0,w,c
  1639   000724  23CD               	addwfc	(get_StepLength@input+1)& (0+255),f,b
  1640   000726                     l1715:
  1641                           
  1642                           ; BSR set to: 1
  1643                           ;newmain.c: 387:         }
  1644   000726  4BCA               	infsnz	get_StepLength@i_945& (0+255),f,b
  1645   000728  2BCB               	incf	(get_StepLength@i_945+1)& (0+255),f,b
  1646   00072A                     l1717:
  1647                           
  1648                           ; BSR set to: 1
  1649   00072A  0E64               	movlw	low get_StepLength@str
  1650   00072C  6E0F               	movwf	strlen@s^0,c
  1651   00072E  0E01               	movlw	high get_StepLength@str
  1652   000730  6E10               	movwf	(strlen@s+1)^0,c
  1653   000732  EC64  F007         	call	_strlen	;wreg free
  1654   000736  500F               	movf	?_strlen^0,w,c
  1655   000738  0101               	movlb	1	; () banked
  1656   00073A  5DCA               	subwf	get_StepLength@i_945& (0+255),w,b
  1657   00073C  5010               	movf	(?_strlen+1)^0,w,c
  1658   00073E  59CB               	subwfb	(get_StepLength@i_945+1)& (0+255),w,b
  1659   000740  A0D8               	btfss	status,0,c
  1660   000742  EFA5  F003         	goto	u931
  1661   000746  EFA7  F003         	goto	u930
  1662   00074A                     u931:
  1663   00074A  EF53  F003         	goto	l1705
  1664   00074E                     u930:
  1665   00074E                     l1719:
  1666                           
  1667                           ;newmain.c: 381:     while( GetString(str) || input == 0 ) {
  1668   00074E  0E64               	movlw	low get_StepLength@str
  1669   000750  6E17               	movwf	GetString@str^0,c
  1670   000752  0E01               	movlw	high get_StepLength@str
  1671   000754  6E18               	movwf	(GetString@str+1)^0,c
  1672   000756  EC01  F006         	call	_GetString	;wreg free
  1673   00075A  5017               	movf	?_GetString^0,w,c
  1674   00075C  1018               	iorwf	(?_GetString+1)^0,w,c
  1675   00075E  A4D8               	btfss	status,2,c
  1676   000760  EFB4  F003         	goto	u941
  1677   000764  EFB6  F003         	goto	u940
  1678   000768                     u941:
  1679   000768  EF4C  F003         	goto	l1703
  1680   00076C                     u940:
  1681   00076C  0101               	movlb	1	; () banked
  1682   00076E  51CC               	movf	get_StepLength@input& (0+255),w,b
  1683   000770  11CD               	iorwf	(get_StepLength@input+1)& (0+255),w,b
  1684   000772  B4D8               	btfsc	status,2,c
  1685   000774  EFBE  F003         	goto	u951
  1686   000778  EFC0  F003         	goto	u950
  1687   00077C                     u951:
  1688   00077C  EF4C  F003         	goto	l1703
  1689   000780                     u950:
  1690   000780                     
  1691                           ; BSR set to: 1
  1692                           ;newmain.c: 390:     if( input == 0 ) input = 45;
  1693   000780  51CC               	movf	get_StepLength@input& (0+255),w,b
  1694   000782  11CD               	iorwf	(get_StepLength@input+1)& (0+255),w,b
  1695   000784  A4D8               	btfss	status,2,c
  1696   000786  EFC7  F003         	goto	u961
  1697   00078A  EFC9  F003         	goto	u960
  1698   00078E                     u961:
  1699   00078E  EFCD  F003         	goto	l1727
  1700   000792                     u960:
  1701   000792                     
  1702                           ; BSR set to: 1
  1703   000792  0E00               	movlw	0
  1704   000794  6FCD               	movwf	(get_StepLength@input+1)& (0+255),b
  1705   000796  0E2D               	movlw	45
  1706   000798  6FCC               	movwf	get_StepLength@input& (0+255),b
  1707   00079A                     l1727:
  1708                           
  1709                           ; BSR set to: 1
  1710                           ;newmain.c: 391:     return input;
  1711   00079A  C1CC  F01A         	movff	get_StepLength@input,?_get_StepLength
  1712   00079E  C1CD  F01B         	movff	get_StepLength@input+1,?_get_StepLength+1
  1713   0007A2                     
  1714                           ; BSR set to: 1
  1715   0007A2  0012               	return		;funcret
  1716   0007A4                     __end_of_get_StepLength:
  1717                           	callstack 0
  1718                           
  1719 ;; *************** function _strlen *****************
  1720 ;; Defined at:
  1721 ;;		line 5 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/strlen.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  s               2   14[COMRAM] PTR const unsigned char 
  1724 ;;		 -> output_total_dis@tmp(100), output_total_dis@output(100), get_StepLength@str(100), get_StepLength@ask(100), 
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;  a               2   16[COMRAM] PTR const unsigned char 
  1727 ;;		 -> output_total_dis@tmp(100), output_total_dis@output(100), get_StepLength@str(100), get_StepLength@ask(100), 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  2   14[COMRAM] unsigned int 
  1730 ;; Registers used:
  1731 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1737 ;;      Params:         2       0       0       0       0       0       0
  1738 ;;      Locals:         2       0       0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0
  1740 ;;      Totals:         4       0       0       0       0       0       0
  1741 ;;Total ram usage:        4 bytes
  1742 ;; Hardware stack levels used: 1
  1743 ;; Hardware stack levels required when called: 5
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		_get_StepLength
  1748 ;;		_output_total_dis
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text8
  1753   000EC8                     __ptext8:
  1754                           	callstack 0
  1755   000EC8                     _strlen:
  1756                           	callstack 24
  1757   000EC8  C00F  F011         	movff	strlen@s,strlen@a
  1758   000ECC  C010  F012         	movff	strlen@s+1,strlen@a+1
  1759   000ED0  EF6C  F007         	goto	l1571
  1760   000ED4                     l1569:
  1761   000ED4  4A0F               	infsnz	strlen@s^0,f,c
  1762   000ED6  2A10               	incf	(strlen@s+1)^0,f,c
  1763   000ED8                     l1571:
  1764   000ED8  C00F  FFD9         	movff	strlen@s,fsr2l
  1765   000EDC  C010  FFDA         	movff	strlen@s+1,fsr2h
  1766   000EE0  50DF               	movf	indf2,w,c
  1767   000EE2  A4D8               	btfss	status,2,c
  1768   000EE4  EF76  F007         	goto	u821
  1769   000EE8  EF78  F007         	goto	u820
  1770   000EEC                     u821:
  1771   000EEC  EF6A  F007         	goto	l1569
  1772   000EF0                     u820:
  1773   000EF0  5011               	movf	strlen@a^0,w,c
  1774   000EF2  5C0F               	subwf	strlen@s^0,w,c
  1775   000EF4  6E0F               	movwf	?_strlen^0,c
  1776   000EF6  5012               	movf	(strlen@a+1)^0,w,c
  1777   000EF8  5810               	subwfb	(strlen@s+1)^0,w,c
  1778   000EFA  6E10               	movwf	(?_strlen+1)^0,c
  1779   000EFC  0012               	return		;funcret
  1780   000EFE                     __end_of_strlen:
  1781                           	callstack 0
  1782                           
  1783 ;; *************** function _putch *****************
  1784 ;; Defined at:
  1785 ;;		line 74 in file "newmain.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  data            1    wreg     unsigned char 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  data            1   14[COMRAM] unsigned char 
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, status,2, status,0
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1799 ;;      Params:         0       0       0       0       0       0       0
  1800 ;;      Locals:         1       0       0       0       0       0       0
  1801 ;;      Temps:          0       0       0       0       0       0       0
  1802 ;;      Totals:         1       0       0       0       0       0       0
  1803 ;;Total ram usage:        1 bytes
  1804 ;; Hardware stack levels used: 1
  1805 ;; Hardware stack levels required when called: 5
  1806 ;; This function calls:
  1807 ;;		Nothing
  1808 ;; This function is called by:
  1809 ;;		_get_StepLength
  1810 ;;		_output_total_dis
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text9
  1815   000CD0                     __ptext9:
  1816                           	callstack 0
  1817   000CD0                     _putch:
  1818                           	callstack 24
  1819                           
  1820                           ;incstack = 0
  1821                           ;putch@data stored from wreg
  1822   000CD0  6E0F               	movwf	putch@data^0,c
  1823   000CD2                     
  1824                           ;newmain.c: 75:     if (data == '\n' || data == '\r') {
  1825   000CD2  0E0A               	movlw	10
  1826   000CD4  180F               	xorwf	putch@data^0,w,c
  1827   000CD6  B4D8               	btfsc	status,2,c
  1828   000CD8  EF70  F006         	goto	u731
  1829   000CDC  EF72  F006         	goto	u730
  1830   000CE0                     u731:
  1831   000CE0  EF7B  F006         	goto	l88
  1832   000CE4                     u730:
  1833   000CE4  0E0D               	movlw	13
  1834   000CE6  180F               	xorwf	putch@data^0,w,c
  1835   000CE8  A4D8               	btfss	status,2,c
  1836   000CEA  EF79  F006         	goto	u741
  1837   000CEE  EF7B  F006         	goto	u740
  1838   000CF2                     u741:
  1839   000CF2  EF8F  F006         	goto	l95
  1840   000CF6                     u740:
  1841   000CF6                     l88:
  1842   000CF6  A2AC               	btfss	172,1,c	;volatile
  1843   000CF8  EF80  F006         	goto	u751
  1844   000CFC  EF82  F006         	goto	u750
  1845   000D00                     u751:
  1846   000D00  EF7B  F006         	goto	l88
  1847   000D04                     u750:
  1848   000D04                     
  1849                           ;newmain.c: 77:         TXREG = '\r';
  1850   000D04  0E0D               	movlw	13
  1851   000D06  6EAD               	movwf	173,c	;volatile
  1852   000D08                     l91:
  1853   000D08  A2AC               	btfss	172,1,c	;volatile
  1854   000D0A  EF89  F006         	goto	u761
  1855   000D0E  EF8B  F006         	goto	u760
  1856   000D12                     u761:
  1857   000D12  EF84  F006         	goto	l91
  1858   000D16                     u760:
  1859   000D16                     
  1860                           ;newmain.c: 79:         TXREG = '\n';
  1861   000D16  0E0A               	movlw	10
  1862   000D18  6EAD               	movwf	173,c	;volatile
  1863                           
  1864                           ;newmain.c: 80:     } else {
  1865   000D1A  EF98  F006         	goto	l98
  1866   000D1E                     l95:
  1867   000D1E  A2AC               	btfss	172,1,c	;volatile
  1868   000D20  EF94  F006         	goto	u771
  1869   000D24  EF96  F006         	goto	u770
  1870   000D28                     u771:
  1871   000D28  EF8F  F006         	goto	l95
  1872   000D2C                     u770:
  1873   000D2C                     
  1874                           ;newmain.c: 82:         TXREG = data;
  1875   000D2C  C00F  FFAD         	movff	putch@data,4013	;volatile
  1876   000D30                     l98:
  1877   000D30  0012               	return		;funcret
  1878   000D32                     __end_of_putch:
  1879                           	callstack 0
  1880                           
  1881 ;; *************** function ___wmul *****************
  1882 ;; Defined at:
  1883 ;;		line 15 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/Umul16.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  multiplier      2   14[COMRAM] unsigned int 
  1886 ;;  multiplicand    2   16[COMRAM] unsigned int 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  product         2   18[COMRAM] unsigned int 
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  2   14[COMRAM] unsigned int 
  1891 ;; Registers used:
  1892 ;;		wreg, status,2, status,0, prodl, prodh
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1898 ;;      Params:         4       0       0       0       0       0       0
  1899 ;;      Locals:         2       0       0       0       0       0       0
  1900 ;;      Temps:          0       0       0       0       0       0       0
  1901 ;;      Totals:         6       0       0       0       0       0       0
  1902 ;;Total ram usage:        6 bytes
  1903 ;; Hardware stack levels used: 1
  1904 ;; Hardware stack levels required when called: 5
  1905 ;; This function calls:
  1906 ;;		Nothing
  1907 ;; This function is called by:
  1908 ;;		_get_StepLength
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text10
  1913   000F30                     __ptext10:
  1914                           	callstack 0
  1915   000F30                     ___wmul:
  1916                           	callstack 24
  1917   000F30  500F               	movf	___wmul@multiplier^0,w,c
  1918   000F32  0211               	mulwf	___wmul@multiplicand^0,c
  1919   000F34  CFF3 F013          	movff	prodl,___wmul@product
  1920   000F38  CFF4 F014          	movff	prodh,___wmul@product+1
  1921   000F3C  500F               	movf	___wmul@multiplier^0,w,c
  1922   000F3E  0212               	mulwf	(___wmul@multiplicand+1)^0,c
  1923   000F40  50F3               	movf	243,w,c
  1924   000F42  2614               	addwf	(___wmul@product+1)^0,f,c
  1925   000F44  5010               	movf	(___wmul@multiplier+1)^0,w,c
  1926   000F46  0211               	mulwf	___wmul@multiplicand^0,c
  1927   000F48  50F3               	movf	243,w,c
  1928   000F4A  2614               	addwf	(___wmul@product+1)^0,f,c
  1929   000F4C  C013  F00F         	movff	___wmul@product,?___wmul
  1930   000F50  C014  F010         	movff	___wmul@product+1,?___wmul+1
  1931   000F54  0012               	return		;funcret
  1932   000F56                     __end_of___wmul:
  1933                           	callstack 0
  1934                           
  1935 ;; *************** function _GetString *****************
  1936 ;; Defined at:
  1937 ;;		line 99 in file "newmain.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;  str             2   22[COMRAM] PTR unsigned char 
  1940 ;;		 -> main@str(100), get_StepLength@str(100), 
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;		None
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  2   22[COMRAM] int 
  1945 ;; Registers used:
  1946 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1952 ;;      Params:         2       0       0       0       0       0       0
  1953 ;;      Locals:         0       0       0       0       0       0       0
  1954 ;;      Temps:          1       0       0       0       0       0       0
  1955 ;;      Totals:         3       0       0       0       0       0       0
  1956 ;;Total ram usage:        3 bytes
  1957 ;; Hardware stack levels used: 1
  1958 ;; Hardware stack levels required when called: 6
  1959 ;; This function calls:
  1960 ;;		_ClearBuffer
  1961 ;;		_strcpy
  1962 ;; This function is called by:
  1963 ;;		_get_StepLength
  1964 ;;		_main
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text11
  1969   000C02                     __ptext11:
  1970                           	callstack 0
  1971   000C02                     _GetString:
  1972                           	callstack 23
  1973   000C02                     
  1974                           ;newmain.c: 100:     if (buffer[buffer_size - 1] == '\r') {
  1975   000C02  0E63               	movlw	low (_buffer+65535)
  1976   000C04  242B               	addwf	_buffer_size^0,w,c
  1977   000C06  6ED9               	movwf	fsr2l,c
  1978   000C08  0E02               	movlw	high (_buffer+65535)
  1979   000C0A  202C               	addwfc	(_buffer_size+1)^0,w,c
  1980   000C0C  6EDA               	movwf	fsr2h,c
  1981   000C0E  0E0D               	movlw	13
  1982   000C10  18DE               	xorwf	postinc2,w,c
  1983   000C12  A4D8               	btfss	status,2,c
  1984   000C14  EF0E  F006         	goto	u781
  1985   000C18  EF10  F006         	goto	u780
  1986   000C1C                     u781:
  1987   000C1C  EF2C  F006         	goto	l1533
  1988   000C20                     u780:
  1989   000C20                     
  1990                           ;newmain.c: 101:         buffer[--buffer_size] = '\0';
  1991   000C20  062B               	decf	_buffer_size^0,f,c
  1992   000C22  A0D8               	btfss	status,0,c
  1993   000C24  062C               	decf	(_buffer_size+1)^0,f,c
  1994   000C26  0E64               	movlw	low _buffer
  1995   000C28  242B               	addwf	_buffer_size^0,w,c
  1996   000C2A  6ED9               	movwf	fsr2l,c
  1997   000C2C  0E02               	movlw	high _buffer
  1998   000C2E  202C               	addwfc	(_buffer_size+1)^0,w,c
  1999   000C30  6EDA               	movwf	fsr2h,c
  2000   000C32  6ADF               	clrf	indf2,c
  2001   000C34                     
  2002                           ;newmain.c: 102:         strcpy(str, buffer);
  2003   000C34  C017  F00F         	movff	GetString@str,strcpy@dest
  2004   000C38  C018  F010         	movff	GetString@str+1,strcpy@dest+1
  2005   000C3C  0E64               	movlw	low _buffer
  2006   000C3E  6E11               	movwf	strcpy@src^0,c
  2007   000C40  0E02               	movlw	high _buffer
  2008   000C42  6E12               	movwf	(strcpy@src+1)^0,c
  2009   000C44  ECCA  F006         	call	_strcpy	;wreg free
  2010   000C48                     
  2011                           ;newmain.c: 103:         ClearBuffer();
  2012   000C48  EC44  F007         	call	_ClearBuffer	;wreg free
  2013   000C4C                     
  2014                           ;newmain.c: 104:         return 1;
  2015   000C4C  0E00               	movlw	0
  2016   000C4E  6E18               	movwf	(?_GetString+1)^0,c
  2017   000C50  0E01               	movlw	1
  2018   000C52  6E17               	movwf	?_GetString^0,c
  2019   000C54  EF35  F006         	goto	l111
  2020   000C58                     l1533:
  2021                           
  2022                           ;newmain.c: 106:         str[0] = '\0';
  2023   000C58  C017  FFD9         	movff	GetString@str,fsr2l
  2024   000C5C  C018  FFDA         	movff	GetString@str+1,fsr2h
  2025   000C60  6ADF               	clrf	indf2,c
  2026   000C62                     
  2027                           ;newmain.c: 107:         return 0;
  2028   000C62  0E00               	movlw	0
  2029   000C64  6E18               	movwf	(?_GetString+1)^0,c
  2030   000C66  0E00               	movlw	0
  2031   000C68  6E17               	movwf	?_GetString^0,c
  2032   000C6A                     l111:
  2033   000C6A  0012               	return		;funcret
  2034   000C6C                     __end_of_GetString:
  2035                           	callstack 0
  2036                           
  2037 ;; *************** function _strcpy *****************
  2038 ;; Defined at:
  2039 ;;		line 3 in file "/Applications/microchip/xc8/v2.50/pic/sources/c99/common/strcpy.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;  dest            2   14[COMRAM] PTR unsigned char 
  2042 ;;		 -> main@str(100), output_total_dis@output(100), get_StepLength@str(100), get_StepLength@ask(100), 
  2043 ;;  src             2   16[COMRAM] PTR const unsigned char 
  2044 ;;		 -> STR_2(15), STR_1(20), buffer(100), 
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;  d               2   20[COMRAM] PTR unsigned char 
  2047 ;;		 -> main@str(100), output_total_dis@output(100), get_StepLength@str(100), get_StepLength@ask(100), 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  2   14[COMRAM] PTR unsigned char 
  2050 ;; Registers used:
  2051 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2057 ;;      Params:         4       0       0       0       0       0       0
  2058 ;;      Locals:         2       0       0       0       0       0       0
  2059 ;;      Temps:          2       0       0       0       0       0       0
  2060 ;;      Totals:         8       0       0       0       0       0       0
  2061 ;;Total ram usage:        8 bytes
  2062 ;; Hardware stack levels used: 1
  2063 ;; Hardware stack levels required when called: 5
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_GetString
  2068 ;;		_get_StepLength
  2069 ;;		_output_total_dis
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text12
  2074   000D94                     __ptext12:
  2075                           	callstack 0
  2076   000D94                     _strcpy:
  2077                           	callstack 24
  2078   000D94  C00F  F015         	movff	strcpy@dest,strcpy@d
  2079   000D98  C010  F016         	movff	strcpy@dest+1,strcpy@d+1
  2080   000D9C                     l1415:
  2081   000D9C  5011               	movf	strcpy@src^0,w,c
  2082   000D9E  6E13               	movwf	??_strcpy^0,c
  2083   000DA0  5012               	movf	(strcpy@src+1)^0,w,c
  2084   000DA2  6E14               	movwf	(??_strcpy+1)^0,c
  2085   000DA4  4A11               	infsnz	strcpy@src^0,f,c
  2086   000DA6  2A12               	incf	(strcpy@src+1)^0,f,c
  2087   000DA8  C013  FFF6         	movff	??_strcpy,tblptrl
  2088   000DAC  C014  FFF7         	movff	??_strcpy+1,tblptrh
  2089   000DB0  6AF8               	clrf	tblptru,c
  2090   000DB2  C015  FFD9         	movff	strcpy@d,fsr2l
  2091   000DB6  C016  FFDA         	movff	strcpy@d+1,fsr2h
  2092   000DBA  4A15               	infsnz	strcpy@d^0,f,c
  2093   000DBC  2A16               	incf	(strcpy@d+1)^0,f,c
  2094   000DBE  0E05               	movlw	(high __ramtop+-1)
  2095   000DC0  64F7               	cpfsgt	tblptrh,c
  2096   000DC2  D003               	bra	u587
  2097   000DC4  0008               	tblrd		*
  2098   000DC6  50F5               	movf	tablat,w,c
  2099   000DC8  D005               	bra	u580
  2100   000DCA                     u587:
  2101   000DCA  CFF6 FFE9          	movff	tblptrl,fsr0l
  2102   000DCE  CFF7 FFEA          	movff	tblptrh,fsr0h
  2103   000DD2  50EF               	movf	indf0,w,c
  2104   000DD4                     u580:
  2105   000DD4  6EDF               	movwf	indf2,c
  2106   000DD6  50DF               	movf	indf2,w,c
  2107   000DD8  A4D8               	btfss	status,2,c
  2108   000DDA  EFF1  F006         	goto	u591
  2109   000DDE  EFF3  F006         	goto	u590
  2110   000DE2                     u591:
  2111   000DE2  EFCE  F006         	goto	l1415
  2112   000DE6                     u590:
  2113   000DE6  0012               	return		;funcret
  2114   000DE8                     __end_of_strcpy:
  2115                           	callstack 0
  2116                           
  2117 ;; *************** function _ClearBuffer *****************
  2118 ;; Defined at:
  2119 ;;		line 86 in file "newmain.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;		None
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;  i               2   14[COMRAM] int 
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      void 
  2126 ;; Registers used:
  2127 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2133 ;;      Params:         0       0       0       0       0       0       0
  2134 ;;      Locals:         2       0       0       0       0       0       0
  2135 ;;      Temps:          0       0       0       0       0       0       0
  2136 ;;      Totals:         2       0       0       0       0       0       0
  2137 ;;Total ram usage:        2 bytes
  2138 ;; Hardware stack levels used: 1
  2139 ;; Hardware stack levels required when called: 5
  2140 ;; This function calls:
  2141 ;;		Nothing
  2142 ;; This function is called by:
  2143 ;;		_GetString
  2144 ;;		_get_StepLength
  2145 ;;		_main
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text13
  2150   000E88                     __ptext13:
  2151                           	callstack 0
  2152   000E88                     _ClearBuffer:
  2153                           	callstack 23
  2154   000E88                     
  2155                           ;newmain.c: 87:     for (int i = 0; i < 100; i++)
  2156   000E88  0E00               	movlw	0
  2157   000E8A  6E10               	movwf	(ClearBuffer@i+1)^0,c
  2158   000E8C  0E00               	movlw	0
  2159   000E8E  6E0F               	movwf	ClearBuffer@i^0,c
  2160   000E90                     l1405:
  2161                           
  2162                           ;newmain.c: 88:         buffer[i] = '\0';
  2163   000E90  0E64               	movlw	low _buffer
  2164   000E92  240F               	addwf	ClearBuffer@i^0,w,c
  2165   000E94  6ED9               	movwf	fsr2l,c
  2166   000E96  0E02               	movlw	high _buffer
  2167   000E98  2010               	addwfc	(ClearBuffer@i+1)^0,w,c
  2168   000E9A  6EDA               	movwf	fsr2h,c
  2169   000E9C  6ADF               	clrf	indf2,c
  2170   000E9E  4A0F               	infsnz	ClearBuffer@i^0,f,c
  2171   000EA0  2A10               	incf	(ClearBuffer@i+1)^0,f,c
  2172   000EA2  BE10               	btfsc	(ClearBuffer@i+1)^0,7,c
  2173   000EA4  EF5D  F007         	goto	u571
  2174   000EA8  5010               	movf	(ClearBuffer@i+1)^0,w,c
  2175   000EAA  E109               	bnz	u570
  2176   000EAC  0E64               	movlw	100
  2177   000EAE  5C0F               	subwf	ClearBuffer@i^0,w,c
  2178   000EB0  A0D8               	btfss	status,0,c
  2179   000EB2  EF5D  F007         	goto	u571
  2180   000EB6  EF5F  F007         	goto	u570
  2181   000EBA                     u571:
  2182   000EBA  EF48  F007         	goto	l1405
  2183   000EBE                     u570:
  2184   000EBE                     
  2185                           ;newmain.c: 89:     buffer_size = 0;
  2186   000EBE  0E00               	movlw	0
  2187   000EC0  6E2C               	movwf	(_buffer_size+1)^0,c
  2188   000EC2  0E00               	movlw	0
  2189   000EC4  6E2B               	movwf	_buffer_size^0,c
  2190   000EC6  0012               	return		;funcret
  2191   000EC8                     __end_of_ClearBuffer:
  2192                           	callstack 0
  2193                           
  2194 ;; *************** function _Initialize *****************
  2195 ;; Defined at:
  2196 ;;		line 128 in file "newmain.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;		None
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;		None
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      void 
  2203 ;; Registers used:
  2204 ;;		wreg, status,2, status,0
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2210 ;;      Params:         0       0       0       0       0       0       0
  2211 ;;      Locals:         0       0       0       0       0       0       0
  2212 ;;      Temps:          0       0       0       0       0       0       0
  2213 ;;      Totals:         0       0       0       0       0       0       0
  2214 ;;Total ram usage:        0 bytes
  2215 ;; Hardware stack levels used: 1
  2216 ;; Hardware stack levels required when called: 5
  2217 ;; This function calls:
  2218 ;;		Nothing
  2219 ;; This function is called by:
  2220 ;;		_main
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text14
  2225   000AF0                     __ptext14:
  2226                           	callstack 0
  2227   000AF0                     _Initialize:
  2228                           	callstack 25
  2229   000AF0                     
  2230                           ;newmain.c: 130:     OSCCONbits.IRCF = 0b110;
  2231   000AF0  50D3               	movf	211,w,c	;volatile
  2232   000AF2  0B8F               	andlw	-113
  2233   000AF4  0960               	iorlw	96
  2234   000AF6  6ED3               	movwf	211,c	;volatile
  2235   000AF8                     
  2236                           ;newmain.c: 132:     TRISAbits.RA0 = 1;
  2237   000AF8  8092               	bsf	146,0,c	;volatile
  2238                           
  2239                           ;newmain.c: 133:     ADCON1bits.PCFG = 0b1110;
  2240   000AFA  50C1               	movf	193,w,c	;volatile
  2241   000AFC  0BF0               	andlw	-16
  2242   000AFE  090E               	iorlw	14
  2243   000B00  6EC1               	movwf	193,c	;volatile
  2244                           
  2245                           ;newmain.c: 134:     ADCON0bits.CHS = 0b0000;
  2246   000B02  0EC3               	movlw	-61
  2247   000B04  16C2               	andwf	194,f,c	;volatile
  2248   000B06                     
  2249                           ;newmain.c: 135:     ADCON1bits.VCFG0 = 0;
  2250   000B06  98C1               	bcf	193,4,c	;volatile
  2251   000B08                     
  2252                           ;newmain.c: 136:     ADCON1bits.VCFG1 = 0;
  2253   000B08  9AC1               	bcf	193,5,c	;volatile
  2254                           
  2255                           ;newmain.c: 137:     ADCON2bits.ADCS = 0b000;
  2256   000B0A  0EF8               	movlw	-8
  2257   000B0C  16C0               	andwf	192,f,c	;volatile
  2258                           
  2259                           ;newmain.c: 138:     ADCON2bits.ACQT = 0b001;
  2260   000B0E  50C0               	movf	192,w,c	;volatile
  2261   000B10  0BC7               	andlw	-57
  2262   000B12  0908               	iorlw	8
  2263   000B14  6EC0               	movwf	192,c	;volatile
  2264   000B16                     
  2265                           ;newmain.c: 139:     ADCON0bits.ADON = 1;
  2266   000B16  80C2               	bsf	194,0,c	;volatile
  2267   000B18                     
  2268                           ;newmain.c: 140:     ADCON2bits.ADFM = 1;
  2269   000B18  8EC0               	bsf	192,7,c	;volatile
  2270   000B1A                     
  2271                           ;newmain.c: 143:     T2CONbits.TMR2ON = 0b1;
  2272   000B1A  84CA               	bsf	202,2,c	;volatile
  2273                           
  2274                           ;newmain.c: 144:     T2CONbits.T2CKPS = 0b11;
  2275   000B1C  0E03               	movlw	3
  2276   000B1E  12CA               	iorwf	202,f,c	;volatile
  2277                           
  2278                           ;newmain.c: 145:     CCP1CONbits.CCP1M = 0b1100;
  2279   000B20  50BD               	movf	189,w,c	;volatile
  2280   000B22  0BF0               	andlw	-16
  2281   000B24  090C               	iorlw	12
  2282   000B26  6EBD               	movwf	189,c	;volatile
  2283                           
  2284                           ;newmain.c: 146:     PR2 = 0x9b;
  2285   000B28  0E9B               	movlw	155
  2286   000B2A  6ECB               	movwf	203,c	;volatile
  2287   000B2C                     
  2288                           ;newmain.c: 148:     TRISCbits.TRISC2 = 0;
  2289   000B2C  9494               	bcf	148,2,c	;volatile
  2290   000B2E                     
  2291                           ;newmain.c: 151:     TRISA &= 0xF1;
  2292   000B2E  0EF1               	movlw	241
  2293   000B30  1692               	andwf	146,f,c	;volatile
  2294   000B32                     
  2295                           ;newmain.c: 152:     TRISB = 1;
  2296   000B32  0E01               	movlw	1
  2297   000B34  6E93               	movwf	147,c	;volatile
  2298   000B36                     
  2299                           ;newmain.c: 153:     TRISC = 0;
  2300   000B36  6A94               	clrf	148,c	;volatile
  2301                           
  2302                           ;newmain.c: 154:     LATA &= 0xF1;
  2303   000B38  0EF1               	movlw	241
  2304   000B3A  1689               	andwf	137,f,c	;volatile
  2305   000B3C                     
  2306                           ;newmain.c: 155:     LATC = 0;
  2307   000B3C  6A8B               	clrf	139,c	;volatile
  2308   000B3E                     
  2309                           ;newmain.c: 158:     INTCONbits.INT0IF = 0;
  2310   000B3E  92F2               	bcf	242,1,c	;volatile
  2311   000B40                     
  2312                           ;newmain.c: 159:     INTCONbits.INT0IE = 1;
  2313   000B40  88F2               	bsf	242,4,c	;volatile
  2314   000B42                     
  2315                           ;newmain.c: 160:     PIE1bits.ADIE = 1;
  2316   000B42  8C9D               	bsf	157,6,c	;volatile
  2317   000B44                     
  2318                           ;newmain.c: 161:     PIR1bits.ADIF = 0;
  2319   000B44  9C9E               	bcf	158,6,c	;volatile
  2320   000B46                     
  2321                           ;newmain.c: 162:     INTCONbits.PEIE = 1;
  2322   000B46  8CF2               	bsf	242,6,c	;volatile
  2323   000B48                     
  2324                           ;newmain.c: 163:     INTCONbits.GIE = 1;
  2325   000B48  8EF2               	bsf	242,7,c	;volatile
  2326   000B4A                     
  2327                           ;newmain.c: 164:     RCONbits.IPEN = 1;
  2328   000B4A  8ED0               	bsf	208,7,c	;volatile
  2329   000B4C                     
  2330                           ;newmain.c: 165:     INTCONbits.GIEH = 1;
  2331   000B4C  8EF2               	bsf	242,7,c	;volatile
  2332   000B4E                     
  2333                           ;newmain.c: 166:     INTCONbits.GIEL = 1;
  2334   000B4E  8CF2               	bsf	242,6,c	;volatile
  2335   000B50                     
  2336                           ;newmain.c: 178:     TRISCbits.TRISC6 = 1;
  2337   000B50  8C94               	bsf	148,6,c	;volatile
  2338   000B52                     
  2339                           ;newmain.c: 179:     TRISCbits.TRISC7 = 1;
  2340   000B52  8E94               	bsf	148,7,c	;volatile
  2341   000B54                     
  2342                           ;newmain.c: 183:     TXSTAbits.SYNC = 0;
  2343   000B54  98AC               	bcf	172,4,c	;volatile
  2344   000B56                     
  2345                           ;newmain.c: 184:     BAUDCONbits.BRG16 = 0;
  2346   000B56  96B8               	bcf	184,3,c	;volatile
  2347   000B58                     
  2348                           ;newmain.c: 185:     TXSTAbits.BRGH = 0;
  2349   000B58  94AC               	bcf	172,2,c	;volatile
  2350   000B5A                     
  2351                           ;newmain.c: 186:     SPBRG = 51;
  2352   000B5A  0E33               	movlw	51
  2353   000B5C  6EAF               	movwf	175,c	;volatile
  2354   000B5E                     
  2355                           ;newmain.c: 189:     RCSTAbits.SPEN = 1;
  2356   000B5E  8EAB               	bsf	171,7,c	;volatile
  2357   000B60                     
  2358                           ;newmain.c: 190:     PIR1bits.TXIF = 0;
  2359   000B60  989E               	bcf	158,4,c	;volatile
  2360   000B62                     
  2361                           ;newmain.c: 191:     PIR1bits.RCIF = 0;
  2362   000B62  9A9E               	bcf	158,5,c	;volatile
  2363   000B64                     
  2364                           ;newmain.c: 192:     TXSTAbits.TXEN = 1;
  2365   000B64  8AAC               	bsf	172,5,c	;volatile
  2366   000B66                     
  2367                           ;newmain.c: 193:     RCSTAbits.CREN = 1;
  2368   000B66  88AB               	bsf	171,4,c	;volatile
  2369   000B68                     
  2370                           ;newmain.c: 194:     PIE1bits.TXIE = 0;
  2371   000B68  989D               	bcf	157,4,c	;volatile
  2372   000B6A                     
  2373                           ;newmain.c: 195:     IPR1bits.TXIP = 0;
  2374   000B6A  989F               	bcf	159,4,c	;volatile
  2375   000B6C                     
  2376                           ;newmain.c: 196:     PIE1bits.RCIE = 1;
  2377   000B6C  8A9D               	bsf	157,5,c	;volatile
  2378   000B6E                     
  2379                           ;newmain.c: 197:     IPR1bits.RCIP = 0;
  2380   000B6E  9A9F               	bcf	159,5,c	;volatile
  2381   000B70                     
  2382                           ;newmain.c: 209:     ADCON0bits.GO = 1;
  2383   000B70  82C2               	bsf	194,1,c	;volatile
  2384   000B72                     
  2385                           ;newmain.c: 212:     T2CON = 0b01111111;
  2386   000B72  0E7F               	movlw	127
  2387   000B74  6ECA               	movwf	202,c	;volatile
  2388   000B76                     
  2389                           ;newmain.c: 213:     PR2 = 122;
  2390   000B76  0E7A               	movlw	122
  2391   000B78  6ECB               	movwf	203,c	;volatile
  2392   000B7A                     
  2393                           ;newmain.c: 214:     PIR1bits.TMR2IF = 0;
  2394   000B7A  929E               	bcf	158,1,c	;volatile
  2395   000B7C                     
  2396                           ;newmain.c: 215:     PIE1bits.TMR2IE = 1;
  2397   000B7C  829D               	bsf	157,1,c	;volatile
  2398   000B7E                     
  2399                           ;newmain.c: 216:     IPR1bits.TMR2IP = 1;
  2400   000B7E  829F               	bsf	159,1,c	;volatile
  2401   000B80  0012               	return		;funcret
  2402   000B82                     __end_of_Initialize:
  2403                           	callstack 0
  2404                           
  2405 ;; *************** function _Lo_ISR *****************
  2406 ;; Defined at:
  2407 ;;		line 111 in file "newmain.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;		None
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;		None
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  1    wreg      void 
  2414 ;; Registers used:
  2415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2421 ;;      Params:         0       0       0       0       0       0       0
  2422 ;;      Locals:         0       0       0       0       0       0       0
  2423 ;;      Temps:          5       0       0       0       0       0       0
  2424 ;;      Totals:         5       0       0       0       0       0       0
  2425 ;;Total ram usage:        5 bytes
  2426 ;; Hardware stack levels used: 1
  2427 ;; Hardware stack levels required when called: 4
  2428 ;; This function calls:
  2429 ;;		_MyusartRead
  2430 ;; This function is called by:
  2431 ;;		Interrupt level 1
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	intcodelo
  2436   000018                     __pintcodelo:
  2437                           	callstack 0
  2438   000018                     _Lo_ISR:
  2439                           	callstack 23
  2440                           
  2441                           ;incstack = 0
  2442   000018  802E               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  2443   00001A  CFD8 F00A          	movff	status,??_Lo_ISR
  2444   00001E  CFE8 F00B          	movff	wreg,??_Lo_ISR+1
  2445   000022  CFE0 F00C          	movff	bsr,??_Lo_ISR+2
  2446   000026  CFD9 F00D          	movff	fsr2l,??_Lo_ISR+3
  2447   00002A  CFDA F00E          	movff	fsr2h,??_Lo_ISR+4
  2448   00002E                     
  2449                           ;newmain.c: 112:     if (RCIF) {
  2450   00002E  AA9E               	btfss	3998,5,c	;volatile
  2451   000030  EF1C  F000         	goto	i1u101_21
  2452   000034  EF1E  F000         	goto	i1u101_20
  2453   000038                     i1u101_21:
  2454   000038  EF2A  F000         	goto	i1l119
  2455   00003C                     i1u101_20:
  2456   00003C                     
  2457                           ;newmain.c: 113:         if (RCSTAbits.OERR) {
  2458   00003C  A2AB               	btfss	171,1,c	;volatile
  2459   00003E  EF23  F000         	goto	i1u102_21
  2460   000042  EF25  F000         	goto	i1u102_20
  2461   000046                     i1u102_21:
  2462   000046  EF28  F000         	goto	i1l1765
  2463   00004A                     i1u102_20:
  2464   00004A                     
  2465                           ;newmain.c: 114:             CREN = 0;
  2466   00004A  98AB               	bcf	4011,4,c	;volatile
  2467                           
  2468                           ;newmain.c: 115:             __nop();
  2469   00004C  0000               	nop	
  2470                           
  2471                           ;newmain.c: 116:             CREN = 1;
  2472   00004E  88AB               	bsf	4011,4,c	;volatile
  2473   000050                     i1l1765:
  2474                           
  2475                           ;newmain.c: 119:         MyusartRead();
  2476   000050  EC1D  F007         	call	_MyusartRead	;wreg free
  2477   000054                     i1l119:
  2478   000054  C00E  FFDA         	movff	??_Lo_ISR+4,fsr2h
  2479   000058  C00D  FFD9         	movff	??_Lo_ISR+3,fsr2l
  2480   00005C  C00C  FFE0         	movff	??_Lo_ISR+2,bsr
  2481   000060  C00B  FFE8         	movff	??_Lo_ISR+1,wreg
  2482   000064  C00A  FFD8         	movff	??_Lo_ISR,status
  2483   000068  902E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2484   00006A  0010               	retfie	
  2485   00006C                     __end_of_Lo_ISR:
  2486                           	callstack 0
  2487                           
  2488 ;; *************** function _MyusartRead *****************
  2489 ;; Defined at:
  2490 ;;		line 92 in file "newmain.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;		None
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;  data            1    8[COMRAM] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2504 ;;      Params:         0       0       0       0       0       0       0
  2505 ;;      Locals:         1       0       0       0       0       0       0
  2506 ;;      Temps:          1       0       0       0       0       0       0
  2507 ;;      Totals:         2       0       0       0       0       0       0
  2508 ;;Total ram usage:        2 bytes
  2509 ;; Hardware stack levels used: 1
  2510 ;; Hardware stack levels required when called: 3
  2511 ;; This function calls:
  2512 ;;		i1_putch
  2513 ;; This function is called by:
  2514 ;;		_Lo_ISR
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text16
  2519   000E3A                     __ptext16:
  2520                           	callstack 0
  2521   000E3A                     _MyusartRead:
  2522                           	callstack 23
  2523   000E3A                     
  2524                           ;newmain.c: 93:     char data = RCREG;
  2525   000E3A  CFAE F009          	movff	4014,MyusartRead@data	;volatile
  2526   000E3E                     
  2527                           ;newmain.c: 94:     if (!(((unsigned char)((data)-0x20)) < 0x5f) && data != '\r') return
      +                          ;
  2528   000E3E  C009  F008         	movff	MyusartRead@data,??_MyusartRead
  2529   000E42  0EE0               	movlw	224
  2530   000E44  2608               	addwf	??_MyusartRead^0,f,c
  2531   000E46  0E5E               	movlw	94
  2532   000E48  6408               	cpfsgt	??_MyusartRead^0,c
  2533   000E4A  EF29  F007         	goto	i1u88_21
  2534   000E4E  EF2B  F007         	goto	i1u88_20
  2535   000E52                     i1u88_21:
  2536   000E52  EF36  F007         	goto	i1l1599
  2537   000E56                     i1u88_20:
  2538   000E56  0E0D               	movlw	13
  2539   000E58  1809               	xorwf	MyusartRead@data^0,w,c
  2540   000E5A  B4D8               	btfsc	status,2,c
  2541   000E5C  EF32  F007         	goto	i1u89_21
  2542   000E60  EF34  F007         	goto	i1u89_20
  2543   000E64                     i1u89_21:
  2544   000E64  EF36  F007         	goto	i1l1599
  2545   000E68                     i1u89_20:
  2546   000E68  EF43  F007         	goto	i1l107
  2547   000E6C                     i1l1599:
  2548                           
  2549                           ;newmain.c: 95:     buffer[buffer_size++] = data;
  2550   000E6C  0E64               	movlw	low _buffer
  2551   000E6E  242B               	addwf	_buffer_size^0,w,c
  2552   000E70  6ED9               	movwf	fsr2l,c
  2553   000E72  0E02               	movlw	high _buffer
  2554   000E74  202C               	addwfc	(_buffer_size+1)^0,w,c
  2555   000E76  6EDA               	movwf	fsr2h,c
  2556   000E78  C009  FFDF         	movff	MyusartRead@data,indf2
  2557   000E7C  4A2B               	infsnz	_buffer_size^0,f,c
  2558   000E7E  2A2C               	incf	(_buffer_size+1)^0,f,c
  2559   000E80                     
  2560                           ;newmain.c: 96:     putch(data);
  2561   000E80  5009               	movf	MyusartRead@data^0,w,c
  2562   000E82  EC99  F006         	call	i1_putch
  2563   000E86                     i1l107:
  2564   000E86  0012               	return		;funcret
  2565   000E88                     __end_of_MyusartRead:
  2566                           	callstack 0
  2567                           
  2568 ;; *************** function i1_putch *****************
  2569 ;; Defined at:
  2570 ;;		line 74 in file "newmain.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;  data            1    wreg     unsigned char 
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;  data            1    6[COMRAM] unsigned char 
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  1    wreg      void 
  2577 ;; Registers used:
  2578 ;;		wreg, status,2, status,0
  2579 ;; Tracked objects:
  2580 ;;		On entry : 0/0
  2581 ;;		On exit  : 0/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2584 ;;      Params:         0       0       0       0       0       0       0
  2585 ;;      Locals:         1       0       0       0       0       0       0
  2586 ;;      Temps:          0       0       0       0       0       0       0
  2587 ;;      Totals:         1       0       0       0       0       0       0
  2588 ;;Total ram usage:        1 bytes
  2589 ;; Hardware stack levels used: 1
  2590 ;; Hardware stack levels required when called: 2
  2591 ;; This function calls:
  2592 ;;		Nothing
  2593 ;; This function is called by:
  2594 ;;		_MyusartRead
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           	psect	text17
  2599   000D32                     __ptext17:
  2600                           	callstack 0
  2601   000D32                     i1_putch:
  2602                           	callstack 23
  2603                           
  2604                           ;incstack = 0
  2605                           ;i1putch@data stored from wreg
  2606   000D32  6E07               	movwf	i1putch@data^0,c
  2607   000D34                     
  2608                           ;newmain.c: 75:     if (data == '\n' || data == '\r') {
  2609   000D34  0E0A               	movlw	10
  2610   000D36  1807               	xorwf	i1putch@data^0,w,c
  2611   000D38  B4D8               	btfsc	status,2,c
  2612   000D3A  EFA1  F006         	goto	i1u83_21
  2613   000D3E  EFA3  F006         	goto	i1u83_20
  2614   000D42                     i1u83_21:
  2615   000D42  EFAC  F006         	goto	i1l88
  2616   000D46                     i1u83_20:
  2617   000D46  0E0D               	movlw	13
  2618   000D48  1807               	xorwf	i1putch@data^0,w,c
  2619   000D4A  A4D8               	btfss	status,2,c
  2620   000D4C  EFAA  F006         	goto	i1u84_21
  2621   000D50  EFAC  F006         	goto	i1u84_20
  2622   000D54                     i1u84_21:
  2623   000D54  EFC0  F006         	goto	i1l95
  2624   000D58                     i1u84_20:
  2625   000D58                     i1l88:
  2626   000D58  A2AC               	btfss	172,1,c	;volatile
  2627   000D5A  EFB1  F006         	goto	i1u85_21
  2628   000D5E  EFB3  F006         	goto	i1u85_20
  2629   000D62                     i1u85_21:
  2630   000D62  EFAC  F006         	goto	i1l88
  2631   000D66                     i1u85_20:
  2632   000D66                     
  2633                           ;newmain.c: 77:         TXREG = '\r';
  2634   000D66  0E0D               	movlw	13
  2635   000D68  6EAD               	movwf	173,c	;volatile
  2636   000D6A                     i1l91:
  2637   000D6A  A2AC               	btfss	172,1,c	;volatile
  2638   000D6C  EFBA  F006         	goto	i1u86_21
  2639   000D70  EFBC  F006         	goto	i1u86_20
  2640   000D74                     i1u86_21:
  2641   000D74  EFB5  F006         	goto	i1l91
  2642   000D78                     i1u86_20:
  2643   000D78                     
  2644                           ;newmain.c: 79:         TXREG = '\n';
  2645   000D78  0E0A               	movlw	10
  2646   000D7A  6EAD               	movwf	173,c	;volatile
  2647                           
  2648                           ;newmain.c: 80:     } else {
  2649   000D7C  EFC9  F006         	goto	i1l98
  2650   000D80                     i1l95:
  2651   000D80  A2AC               	btfss	172,1,c	;volatile
  2652   000D82  EFC5  F006         	goto	i1u87_21
  2653   000D86  EFC7  F006         	goto	i1u87_20
  2654   000D8A                     i1u87_21:
  2655   000D8A  EFC0  F006         	goto	i1l95
  2656   000D8E                     i1u87_20:
  2657   000D8E                     
  2658                           ;newmain.c: 82:         TXREG = data;
  2659   000D8E  C007  FFAD         	movff	i1putch@data,4013	;volatile
  2660   000D92                     i1l98:
  2661   000D92  0012               	return		;funcret
  2662   000D94                     __end_ofi1_putch:
  2663                           	callstack 0
  2664                           
  2665 ;; *************** function _H_ISR *****************
  2666 ;; Defined at:
  2667 ;;		line 275 in file "newmain.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  value           2    4[COMRAM] int 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2681 ;;      Params:         0       0       0       0       0       0       0
  2682 ;;      Locals:         2       0       0       0       0       0       0
  2683 ;;      Temps:          2       0       0       0       0       0       0
  2684 ;;      Totals:         4       0       0       0       0       0       0
  2685 ;;Total ram usage:        4 bytes
  2686 ;; Hardware stack levels used: 1
  2687 ;; Hardware stack levels required when called: 1
  2688 ;; This function calls:
  2689 ;;		_button_pressed
  2690 ;;		_variable_register_changed
  2691 ;; This function is called by:
  2692 ;;		Interrupt level 2
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           	psect	intcode
  2697   000008                     __pintcode:
  2698                           	callstack 0
  2699   000008                     _H_ISR:
  2700                           	callstack 23
  2701                           
  2702                           ;incstack = 0
  2703   000008  822E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2704   00000A  EDC1  F005         	call	int_func,f	;refresh shadow registers
  2705                           
  2706                           	psect	intcode_body
  2707   000B82                     __pintcode_body:
  2708                           	callstack 23
  2709   000B82                     int_func:
  2710                           	callstack 23
  2711   000B82  0006               	pop		; remove dummy address from shadow register refresh
  2712   000B84                     
  2713                           ;newmain.c: 276:     if (PIR1bits.ADIF) {
  2714   000B84  AC9E               	btfss	158,6,c	;volatile
  2715   000B86  EFC7  F005         	goto	i2u103_41
  2716   000B8A  EFC9  F005         	goto	i2u103_40
  2717   000B8E                     i2u103_41:
  2718   000B8E  EFE1  F005         	goto	i2l1779
  2719   000B92                     i2u103_40:
  2720   000B92                     
  2721                           ;newmain.c: 277:         int value = (ADRESH << 8) + ADRESL;
  2722   000B92  50C4               	movf	196,w,c	;volatile
  2723   000B94  6E04               	movwf	(??_H_ISR+1)^0,c
  2724   000B96  6A03               	clrf	??_H_ISR^0,c
  2725   000B98  50C3               	movf	195,w,c	;volatile
  2726   000B9A  2403               	addwf	??_H_ISR^0,w,c
  2727   000B9C  6E05               	movwf	H_ISR@value^0,c
  2728   000B9E  0E00               	movlw	0
  2729   000BA0  2004               	addwfc	(??_H_ISR+1)^0,w,c
  2730   000BA2  6E06               	movwf	(H_ISR@value+1)^0,c
  2731   000BA4                     
  2732                           ;newmain.c: 278:         variable_register_changed(value);
  2733   000BA4  C005  F001         	movff	H_ISR@value,variable_register_changed@value
  2734   000BA8  C006  F002         	movff	H_ISR@value+1,variable_register_changed@value+1
  2735   000BAC  ECAC  F007         	call	_variable_register_changed	;wreg free
  2736   000BB0                     
  2737                           ;newmain.c: 279:         PIR1bits.ADIF = 0;
  2738   000BB0  9C9E               	bcf	158,6,c	;volatile
  2739   000BB2                     
  2740                           ;newmain.c: 280:         _delay((unsigned long)((5)*(4000000/4000.0)));
  2741   000BB2  0E07               	movlw	7
  2742   000BB4  6E03               	movwf	??_H_ISR^0,c
  2743   000BB6  0E7D               	movlw	125
  2744   000BB8                     i2u108_47:
  2745   000BB8  2EE8               	decfsz	wreg,f,c
  2746   000BBA  D7FE               	bra	i2u108_47
  2747   000BBC  2E03               	decfsz	??_H_ISR^0,f,c
  2748   000BBE  D7FC               	bra	i2u108_47
  2749   000BC0  0000               	nop	
  2750   000BC2                     i2l1779:
  2751                           
  2752                           ;newmain.c: 283:     if (INTCONbits.INT0IF) {
  2753   000BC2  A2F2               	btfss	242,1,c	;volatile
  2754   000BC4  EFE6  F005         	goto	i2u104_41
  2755   000BC8  EFE8  F005         	goto	i2u104_40
  2756   000BCC                     i2u104_41:
  2757   000BCC  EFF5  F005         	goto	i2l1789
  2758   000BD0                     i2u104_40:
  2759   000BD0                     
  2760                           ;newmain.c: 284:         button_pressed();
  2761   000BD0  ECAD  F007         	call	_button_pressed	;wreg free
  2762   000BD4                     
  2763                           ;newmain.c: 285:         _delay((unsigned long)((50)*(4000000/4000.0)));
  2764   000BD4  0E41               	movlw	65
  2765   000BD6  6E03               	movwf	??_H_ISR^0,c
  2766   000BD8  0EEE               	movlw	238
  2767   000BDA                     i2u109_47:
  2768   000BDA  2EE8               	decfsz	wreg,f,c
  2769   000BDC  D7FE               	bra	i2u109_47
  2770   000BDE  2E03               	decfsz	??_H_ISR^0,f,c
  2771   000BE0  D7FC               	bra	i2u109_47
  2772   000BE2  D000               	nop2	
  2773   000BE4                     
  2774                           ;newmain.c: 286:         btn_interr = 1;
  2775   000BE4  0E01               	movlw	1
  2776   000BE6  6E2D               	movwf	_btn_interr^0,c
  2777   000BE8                     
  2778                           ;newmain.c: 287:         INTCONbits.INT0IF = 0;
  2779   000BE8  92F2               	bcf	242,1,c	;volatile
  2780   000BEA                     i2l1789:
  2781                           
  2782                           ;newmain.c: 290:     if (PIR1bits.TMR2IF) {
  2783   000BEA  A29E               	btfss	158,1,c	;volatile
  2784   000BEC  EFFA  F005         	goto	i2u105_41
  2785   000BF0  EFFC  F005         	goto	i2u105_40
  2786   000BF4                     i2u105_41:
  2787   000BF4  EFFF  F005         	goto	i2l162
  2788   000BF8                     i2u105_40:
  2789   000BF8                     
  2790                           ;newmain.c: 291:         cnt++;
  2791   000BF8  4A29               	infsnz	_cnt^0,f,c
  2792   000BFA  2A2A               	incf	(_cnt+1)^0,f,c
  2793   000BFC                     
  2794                           ;newmain.c: 292:         PIR1bits.TMR2IF = 0;
  2795   000BFC  929E               	bcf	158,1,c	;volatile
  2796   000BFE                     i2l162:
  2797   000BFE  922E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2798   000C00  0011               	retfie		f
  2799   000C02                     __end_of_H_ISR:
  2800                           	callstack 0
  2801                           
  2802 ;; *************** function _variable_register_changed *****************
  2803 ;; Defined at:
  2804 ;;		line 317 in file "newmain.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  value           2    0[COMRAM] int 
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;		None
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  1    wreg      void 
  2811 ;; Registers used:
  2812 ;;		None
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2818 ;;      Params:         2       0       0       0       0       0       0
  2819 ;;      Locals:         0       0       0       0       0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0
  2821 ;;      Totals:         2       0       0       0       0       0       0
  2822 ;;Total ram usage:        2 bytes
  2823 ;; Hardware stack levels used: 1
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_H_ISR
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text19
  2832   000F58                     __ptext19:
  2833                           	callstack 0
  2834   000F58                     _variable_register_changed:
  2835                           	callstack 23
  2836   000F58  0012               	return		;funcret
  2837   000F5A                     __end_of_variable_register_changed:
  2838                           	callstack 0
  2839                           
  2840 ;; *************** function _button_pressed *****************
  2841 ;; Defined at:
  2842 ;;		line 308 in file "newmain.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;		None
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;		None
  2847 ;; Return value:  Size  Location     Type
  2848 ;;                  1    wreg      void 
  2849 ;; Registers used:
  2850 ;;		None
  2851 ;; Tracked objects:
  2852 ;;		On entry : 0/0
  2853 ;;		On exit  : 0/0
  2854 ;;		Unchanged: 0/0
  2855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2856 ;;      Params:         0       0       0       0       0       0       0
  2857 ;;      Locals:         0       0       0       0       0       0       0
  2858 ;;      Temps:          0       0       0       0       0       0       0
  2859 ;;      Totals:         0       0       0       0       0       0       0
  2860 ;;Total ram usage:        0 bytes
  2861 ;; Hardware stack levels used: 1
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_H_ISR
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text20
  2870   000F5A                     __ptext20:
  2871                           	callstack 0
  2872   000F5A                     _button_pressed:
  2873                           	callstack 23
  2874   000F5A  0012               	return		;funcret
  2875   000F5C                     __end_of_button_pressed:
  2876                           	callstack 0
  2877                           
  2878                           	psect	rparam
  2879   000001                     ___rparam_used  equ	1
  2880   000000                     ___param_bank   equ	0
  2881   000000                     __Lparam        equ	__Lrparam
  2882   000000                     __Hparam        equ	__Hrparam
  2883                           
  2884                           	psect	temp
  2885   00002E                     btemp:
  2886                           	callstack 0
  2887   00002E                     	ds	1
  2888   00002E                     int$flags       set	btemp
  2889   00002F                     wtemp8          set	btemp+1
  2890   00002F                     ttemp5          set	btemp+1
  2891   000032                     ttemp6          set	btemp+4
  2892   000036                     ttemp7          set	btemp+8
  2893                           
  2894                           	psect	idloc
  2895                           
  2896                           ;Config register IDLOC0 @ 0x200000
  2897                           ;	unspecified, using default values
  2898   200000                     	org	2097152
  2899   200000  FF                 	db	255
  2900                           
  2901                           ;Config register IDLOC1 @ 0x200001
  2902                           ;	unspecified, using default values
  2903   200001                     	org	2097153
  2904   200001  FF                 	db	255
  2905                           
  2906                           ;Config register IDLOC2 @ 0x200002
  2907                           ;	unspecified, using default values
  2908   200002                     	org	2097154
  2909   200002  FF                 	db	255
  2910                           
  2911                           ;Config register IDLOC3 @ 0x200003
  2912                           ;	unspecified, using default values
  2913   200003                     	org	2097155
  2914   200003  FF                 	db	255
  2915                           
  2916                           ;Config register IDLOC4 @ 0x200004
  2917                           ;	unspecified, using default values
  2918   200004                     	org	2097156
  2919   200004  FF                 	db	255
  2920                           
  2921                           ;Config register IDLOC5 @ 0x200005
  2922                           ;	unspecified, using default values
  2923   200005                     	org	2097157
  2924   200005  FF                 	db	255
  2925                           
  2926                           ;Config register IDLOC6 @ 0x200006
  2927                           ;	unspecified, using default values
  2928   200006                     	org	2097158
  2929   200006  FF                 	db	255
  2930                           
  2931                           ;Config register IDLOC7 @ 0x200007
  2932                           ;	unspecified, using default values
  2933   200007                     	org	2097159
  2934   200007  FF                 	db	255
  2935                           
  2936                           	psect	config
  2937                           
  2938                           ; Padding undefined space
  2939   300000                     	org	3145728
  2940   300000  FF                 	db	255
  2941                           
  2942                           ;Config register CONFIG1H @ 0x300001
  2943                           ;	Oscillator Selection bits
  2944                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  2945                           ;	Fail-Safe Clock Monitor Enable bit
  2946                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2947                           ;	Internal/External Oscillator Switchover bit
  2948                           ;	IESO = ON, Oscillator Switchover mode enabled
  2949   300001                     	org	3145729
  2950   300001  88                 	db	136
  2951                           
  2952                           ;Config register CONFIG2L @ 0x300002
  2953                           ;	Power-up Timer Enable bit
  2954                           ;	PWRT = OFF, PWRT disabled
  2955                           ;	Brown-out Reset Enable bits
  2956                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2957                           ;	Brown Out Reset Voltage bits
  2958                           ;	BORV = 3, Minimum setting
  2959   300002                     	org	3145730
  2960   300002  1F                 	db	31
  2961                           
  2962                           ;Config register CONFIG2H @ 0x300003
  2963                           ;	Watchdog Timer Enable bit
  2964                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2965                           ;	Watchdog Timer Postscale Select bits
  2966                           ;	WDTPS = 1, 1:1
  2967   300003                     	org	3145731
  2968   300003  00                 	db	0
  2969                           
  2970                           ; Padding undefined space
  2971   300004                     	org	3145732
  2972   300004  FF                 	db	255
  2973                           
  2974                           ;Config register CONFIG3H @ 0x300005
  2975                           ;	CCP2 MUX bit
  2976                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2977                           ;	PORTB A/D Enable bit
  2978                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  2979                           ;	Low-Power Timer1 Oscillator Enable bit
  2980                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2981                           ;	MCLR Pin Enable bit
  2982                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2983   300005                     	org	3145733
  2984   300005  83                 	db	131
  2985                           
  2986                           ;Config register CONFIG4L @ 0x300006
  2987                           ;	Stack Full/Underflow Reset Enable bit
  2988                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2989                           ;	Single-Supply ICSP Enable bit
  2990                           ;	LVP = OFF, Single-Supply ICSP disabled
  2991                           ;	Extended Instruction Set Enable bit
  2992                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2993                           ;	Background Debugger Enable bit
  2994                           ;	DEBUG = 0x1, unprogrammed default
  2995   300006                     	org	3145734
  2996   300006  81                 	db	129
  2997                           
  2998                           ; Padding undefined space
  2999   300007                     	org	3145735
  3000   300007  FF                 	db	255
  3001                           
  3002                           ;Config register CONFIG5L @ 0x300008
  3003                           ;	Code Protection bit
  3004                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3005                           ;	Code Protection bit
  3006                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3007                           ;	Code Protection bit
  3008                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3009                           ;	Code Protection bit
  3010                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3011   300008                     	org	3145736
  3012   300008  0F                 	db	15
  3013                           
  3014                           ;Config register CONFIG5H @ 0x300009
  3015                           ;	Boot Block Code Protection bit
  3016                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3017                           ;	Data EEPROM Code Protection bit
  3018                           ;	CPD = OFF, Data EEPROM not code-protected
  3019   300009                     	org	3145737
  3020   300009  C0                 	db	192
  3021                           
  3022                           ;Config register CONFIG6L @ 0x30000A
  3023                           ;	Write Protection bit
  3024                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3025                           ;	Write Protection bit
  3026                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3027                           ;	Write Protection bit
  3028                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3029                           ;	Write Protection bit
  3030                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3031   30000A                     	org	3145738
  3032   30000A  0F                 	db	15
  3033                           
  3034                           ;Config register CONFIG6H @ 0x30000B
  3035                           ;	Configuration Register Write Protection bit
  3036                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3037                           ;	Boot Block Write Protection bit
  3038                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3039                           ;	Data EEPROM Write Protection bit
  3040                           ;	WRTD = OFF, Data EEPROM not write-protected
  3041   30000B                     	org	3145739
  3042   30000B  E0                 	db	224
  3043                           
  3044                           ;Config register CONFIG7L @ 0x30000C
  3045                           ;	Table Read Protection bit
  3046                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3047                           ;	Table Read Protection bit
  3048                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3049                           ;	Table Read Protection bit
  3050                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3051                           ;	Table Read Protection bit
  3052                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3053   30000C                     	org	3145740
  3054   30000C  0F                 	db	15
  3055                           
  3056                           ;Config register CONFIG7H @ 0x30000D
  3057                           ;	Boot Block Table Read Protection bit
  3058                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3059   30000D                     	org	3145741
  3060   30000D  40                 	db	64
  3061                           tosu	equ	0xFFF
  3062                           tosh	equ	0xFFE
  3063                           tosl	equ	0xFFD
  3064                           stkptr	equ	0xFFC
  3065                           pclatu	equ	0xFFB
  3066                           pclath	equ	0xFFA
  3067                           pcl	equ	0xFF9
  3068                           tblptru	equ	0xFF8
  3069                           tblptrh	equ	0xFF7
  3070                           tblptrl	equ	0xFF6
  3071                           tablat	equ	0xFF5
  3072                           prodh	equ	0xFF4
  3073                           prodl	equ	0xFF3
  3074                           indf0	equ	0xFEF
  3075                           postinc0	equ	0xFEE
  3076                           postdec0	equ	0xFED
  3077                           preinc0	equ	0xFEC
  3078                           plusw0	equ	0xFEB
  3079                           fsr0h	equ	0xFEA
  3080                           fsr0l	equ	0xFE9
  3081                           wreg	equ	0xFE8
  3082                           indf1	equ	0xFE7
  3083                           postinc1	equ	0xFE6
  3084                           postdec1	equ	0xFE5
  3085                           preinc1	equ	0xFE4
  3086                           plusw1	equ	0xFE3
  3087                           fsr1h	equ	0xFE2
  3088                           fsr1l	equ	0xFE1
  3089                           bsr	equ	0xFE0
  3090                           indf2	equ	0xFDF
  3091                           postinc2	equ	0xFDE
  3092                           postdec2	equ	0xFDD
  3093                           preinc2	equ	0xFDC
  3094                           plusw2	equ	0xFDB
  3095                           fsr2h	equ	0xFDA
  3096                           fsr2l	equ	0xFD9
  3097                           status	equ	0xFD8

Data Sizes:
    Strings     35
    Constant    0
    Data        0
    BSS         307
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     38      45
    BANK0           128    102     102
    BANK1           256    206     206
    BANK2           256      0     200
    BANK3           256      0     100
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    GetString@str	PTR unsigned char  size(2) Largest target is 100
		 -> get_StepLength@str(BANK1[100]), main@str(BANK0[100]), 

    itoa@s	PTR unsigned char  size(2) Largest target is 100
		 -> output_total_dis@tmp(BANK1[100]), 

    keyboard_input@str	PTR unsigned char  size(1) Largest target is 100
		 -> main@str(BANK0[100]), 

    reverse@first	PTR unsigned char  size(2) Largest target is 100
		 -> output_total_dis@tmp(BANK1[100]), 

    reverse@last	PTR unsigned char  size(2) Largest target is 100
		 -> output_total_dis@tmp(BANK1[100]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 100
		 -> get_StepLength@ask(BANK1[100]), get_StepLength@str(BANK1[100]), main@str(BANK0[100]), output_total_dis@output(BANK1[100]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 100
		 -> get_StepLength@ask(BANK1[100]), get_StepLength@str(BANK1[100]), main@str(BANK0[100]), output_total_dis@output(BANK1[100]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 100
		 -> get_StepLength@ask(BANK1[100]), get_StepLength@str(BANK1[100]), main@str(BANK0[100]), output_total_dis@output(BANK1[100]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 100
		 -> buffer(BANK2[100]), STR_1(CODE[20]), STR_2(CODE[15]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 100
		 -> get_StepLength@ask(BANK1[100]), get_StepLength@str(BANK1[100]), output_total_dis@output(BANK1[100]), output_total_dis@tmp(BANK1[100]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 100
		 -> get_StepLength@ask(BANK1[100]), get_StepLength@str(BANK1[100]), output_total_dis@output(BANK1[100]), output_total_dis@tmp(BANK1[100]), 


Critical Paths under _main in COMRAM

    _main->_output_total_dis
    _output_total_dis->_itoa
    _itoa->___awdiv
    _get_StepLength->_GetString
    _GetString->_strcpy

Critical Paths under _Lo_ISR in COMRAM

    _Lo_ISR->_MyusartRead
    _MyusartRead->i1_putch

Critical Paths under _H_ISR in COMRAM

    _H_ISR->_variable_register_changed

Critical Paths under _main in BANK0

    None.

Critical Paths under _Lo_ISR in BANK0

    None.

Critical Paths under _H_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_get_StepLength

Critical Paths under _Lo_ISR in BANK1

    None.

Critical Paths under _H_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Lo_ISR in BANK2

    None.

Critical Paths under _H_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Lo_ISR in BANK3

    None.

Critical Paths under _H_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Lo_ISR in BANK4

    None.

Critical Paths under _H_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Lo_ISR in BANK5

    None.

Critical Paths under _H_ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               102   102      0    3081
                                              0 BANK0    102   102      0
                        _ClearBuffer
                          _GetString
                         _Initialize
                     _get_StepLength
                     _keyboard_input
                   _output_total_dis
 ---------------------------------------------------------------------------------
 (1) _output_total_dis                                   210   206      4    1650
                                             32 COMRAM     6     2      4
                                              0 BANK1    204   204      0
                               _itoa
                              _putch
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _itoa                                                10     6      4    1100
                                             22 COMRAM    10     6      4
                            ___awdiv
                            ___awmod
                            _reverse
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4     159
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     298
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     304
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _keyboard_input                                       1     0      1       1
                                             14 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _get_StepLength                                     211   209      2    1098
                                             25 COMRAM     5     3      2
                                              0 BANK1    206   206      0
                        _ClearBuffer
                          _GetString
                             ___wmul
                              _putch
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2      94
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      87
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     161
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _GetString                                            3     1      2     193
                                             22 COMRAM     3     1      2
                        _ClearBuffer
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               8     4      4      79
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _ClearBuffer                                          2     2      0      68
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Lo_ISR                                               5     5      0     176
                                              9 COMRAM     5     5      0
                        _MyusartRead
 ---------------------------------------------------------------------------------
 (5) _MyusartRead                                          2     2      0     176
                                              7 COMRAM     2     2      0
                            i1_putch
 ---------------------------------------------------------------------------------
 (6) i1_putch                                              1     1      0      87
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _H_ISR                                                4     4      0      24
                                              2 COMRAM     4     4      0
                     _button_pressed
          _variable_register_changed
 ---------------------------------------------------------------------------------
 (8) _variable_register_changed                            2     0      2       1
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _button_pressed                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearBuffer
   _GetString
     _ClearBuffer
     _strcpy
   _Initialize
   _get_StepLength
     _ClearBuffer
     _GetString
     ___wmul
     _putch
     _strcpy
     _strlen
   _keyboard_input
   _output_total_dis
     _itoa
       ___awdiv
       ___awmod
       _reverse
     _putch
     _strcpy
     _strlen

 _Lo_ISR (ROOT)
   _MyusartRead
     i1_putch

 _H_ISR (ROOT)
   _button_pressed
   _variable_register_changed

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1518      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0     100     39.1%
BITBANK2           256      0       0      0.0%
BANK2              256      0     200     78.1%
BITBANK1           256      0       0      0.0%
BANK1              256    206     206     80.5%
BITBANK5           239      0       0      0.0%
BANK5              239      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128    102     102     79.7%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     38      45     35.7%
BITBIGSFR_1h        38      0       0      0.0%
BITBIGSFR_1llh      12      0       0      0.0%
BITBIGSFRlh         10      0       0      0.0%
BITBIGSFR_5h         9      0       0      0.0%
BITBIGSFRll          9      0       0      0.0%
BITBIGSFRh           7      0       0      0.0%
BITBIGSFR_2          6      0       0      0.0%
BITBIGSFR_4          3      0       0      0.0%
BITBIGSFR_3          3      0       0      0.0%
BITBIGSFR_5l         2      0       0      0.0%
BITBIGSFR_1lh        1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     653      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Jan 16 00:12:08 2025

                               l91 0D08                                 l95 0D1E  
                               l88 0CF6                                 l97 0D2C  
                               l98 0D30                       ___awdiv@sign 0014  
                               bsr 0FE0                ___wmul@multiplicand 0011  
                              l103 0EC6                                l111 0C6A  
                              l122 0B80                                l212 07A2  
                              l225 08A2                                l238 0F54  
                              l190 0E38                                l178 0F56  
                              l198 097E                                l482 0AEE  
                              l469 0A40                                l921 0EFC  
                              l915 0DE6                                _PR2 0FCB  
                              u600 0E38                                u601 0E34  
                              u610 0990                                u611 098C  
                              u620 09AA                                u700 0AA4  
                              u621 09A6                                u701 0AA0  
                              u630 09D0                                u710 0ABA  
                              u631 09CC                                u711 0AB6  
                              u640 09EE                                u720 0ADE  
                              u800 092A                                u641 09EA  
                              u721 0ADA                                u801 0926  
                              u570 0EBE                                u730 0CE4  
                              u650 0A0A                                u810 0938  
                              u571 0EBA                                u731 0CE0  
                              u651 0A06                                u811 0934  
                              u580 0DD4                                u740 0CF6  
                              u820 0EF0                                u900 0688  
                              u660 0A30                                u741 0CF2  
                              u821 0EEC                                u901 0684  
                              u661 0A2C                                u590 0DE6  
                              u750 0D04                                u910 06C8  
                              u670 0A52                                u591 0DE2  
                              u751 0D00                                u911 06C4  
                              u671 0A4E                                u760 0D16  
                              u920 06E4                                u680 0A6C  
                              u761 0D12                                u921 06E0  
                              u681 0A68                                u770 0D2C  
                              u930 074E                                u690 0A86  
                              u587 0DCA                                u771 0D28  
                              u931 074A                                u691 0A82  
                              u780 0C20                                u940 076C  
                              u781 0C1C                                u941 0768  
                              u950 0780                                u790 08BA  
                              u951 077C                                u791 08B6  
                              u960 0792                                u961 078E  
                              u971 07AA                                u980 0812  
                              u981 080E                                u991 0818  
                              _cnt 0029                       ___awmod@sign 0014  
                              wreg 0FE8                   ??_button_pressed 0001  
                             l1411 0EBE                               l1405 0E90  
                             l1413 0D94                               l1501 0AC8  
                             l1421 0DF8                               l1407 0E9E  
                             l1415 0D9C                               l1511 0CD2  
                             l1431 0980                               l1503 0ACE  
                             l1423 0E0C                               l1409 0EA2  
                             l1521 0C20                               l1513 0CE4  
                             l1441 09AA                               l1433 0982  
                             l1505 0ADE                               l1425 0E18  
                             l1417 0DE8                               l1611 0B08  
                             l1523 0C34                               l1515 0D04  
                             l1451 09D8                               l1443 09B2  
                             l1435 0990                               l1507 0AE6  
                             l1427 0E1C                               l1419 0DEC  
                             l1621 0B2E                               l1613 0B16  
                             l1605 0AF0                               l1525 0C48  
                             l1533 0C58                               l1517 0D16  
                             l1701 0690                               l1461 0A12  
                             l1453 09E0                               l1445 09B6  
                             l1437 0998                               l1429 0E22  
                             l1541 08AC                               l1631 0B40  
                             l1623 0B32                               l1615 0B18  
                             l1607 0AF8                               l1535 0C62  
                             l1527 0C4C                               l1519 0C02  
                             l1711 06E4                               l1703 0698  
                             l1471 0A38                               l1463 0A14  
                             l1455 09EE                               l1447 09BE  
                             l1439 099C                               l1551 08F8  
                             l1543 08BA                               l1641 0B4A  
                             l1633 0B42                               l1625 0B36  
                             l1617 0B1A                               l1609 0B06  
                             l1721 076C                               l1713 0700  
                             l1705 06A6                               l1465 0A1A  
                             l1457 09F4                               l1449 09D0  
                             l1481 0A5A                               l1561 0948  
                             l1553 08FC                               l1545 08BE  
                             l1801 0C70                               l1651 0B54  
                             l1643 0B4C                               l1635 0B44  
                             l1627 0B3C                               l1619 0B2C  
                             l1571 0ED8                               l1723 0780  
                             l1715 0726                               l1707 06AA  
                             l1459 0A0A                               l1467 0A20  
                             l1491 0A8E                               l1483 0A5E  
                             l1475 0A42                               l1563 094C  
                             l1555 0918                               l1547 08C6  
                             l1539 08A4                               l1731 07A4  
                             l1811 0CB8                               l1803 0C74  
                             l1661 0B60                               l1653 0B56  
                             l1645 0B4E                               l1637 0B46  
                             l1629 0B3E                               l1573 0EF0  
                             l1725 0792                               l1709 06C8  
                             l1717 072A                               l1469 0A30  
                             l1493 0A96                               l1485 0A6C  
                             l1477 0A44                               l1565 095A  
                             l1557 092A                               l1549 08D2  
                             l1741 07EE                               l1733 07B0  
                             l1813 0CC6                               l1805 0C80  
                             l1671 0B6A                               l1663 0B62  
                             l1655 0B58                               l1647 0B50  
                             l1639 0B48                               l1399 0E88  
                             l1567 0EC8                               l1727 079A  
                             l1719 074E                               l1495 0AA4  
                             l1487 0A74                               l1479 0A52  
                             l1559 0938                               l1751 086C  
                             l1743 0812                               l1735 07C8  
                             l1807 0C94                               l1681 0B76  
                             l1673 0B6C                               l1665 0B64  
                             l1657 0B5A                               l1649 0B52  
                             l1577 0F30                               l1569 0ED4  
                             l1497 0ABA                               l1489 0A86  
                             l1753 0872                               l1745 081E  
                             l1737 07D6                               l1809 0CB0  
                             l1683 0B7A                               l1675 0B6E  
                             l1667 0B66                               l1659 0B5E  
                             l1579 0F4C                               l1691 063E  
                             l1499 0AC2                               l1755 0896  
                             l1747 084C                               l1739 07E8  
                             l1685 0B7C                               l1677 0B70  
                             l1669 0B68                               l1693 064C  
                             l1749 085A                               l1687 0B7E  
                             l1679 0B72                               l1695 065E  
                             l1697 0664                               l1689 0626  
                             l1699 0688                               l1799 0C6C  
                             STR_1 0601                               STR_2 0615  
                             u1000 0896                               _CREN 7D5C  
                             u1001 0892                               u1060 0CB0  
                             u1061 0CAC                               u1070 0CC6  
                             u1071 0CC2                               _LATA 0F89  
                             _LATC 0F8B                               _RCIF 7CF5  
                             i1l91 0D6A                               i1l95 0D80  
                             i1l88 0D58                               i1l97 0D8E  
                             i1l98 0D92                   ??_get_StepLength 001C  
                             _main 0C6C                               _itoa 08A4  
                             fsr0h 0FEA                               fsr1h 0FE2  
                             indf0 0FEF                               fsr2h 0FDA  
                             fsr0l 0FE9                               indf1 0FE7  
                             indf2 0FDF                               fsr1l 0FE1  
                             fsr2l 0FD9                               btemp 002E  
                             prodh 0FF4                               prodl 0FF3  
                             start 006C                    __end_ofi1_putch 0D94  
                  MyusartRead@data 0009                       ___param_bank 0000  
       ?_variable_register_changed 0001                              ?_main 0001  
                            ?_itoa 0017                    __end_of___awdiv 0A42  
                  __end_of___awmod 0AF0                    ___awdiv@divisor 0011  
                            _T2CON 0FCA                              i1l107 0E86  
                            i1l119 0054                              i2l162 0BFE  
                            i2l172 0F5A                              i2l175 0F58  
                get_StepLength@ask 0100                    ___awdiv@counter 0013  
                            _RCREG 0FAE                  get_StepLength@str 0164  
                            _H_ISR 0008                              _SPBRG 0FAF  
                            _TRISA 0F92                              _TRISB 0F93  
                            _TRISC 0F94                              _TXREG 0FAD  
                            _putch 0CD0                        _ClearBuffer 0E88  
                            itoa@i 001F                              itoa@n 0017  
                            itoa@s 0019                              tablat 0FF5  
                  __end_of_reverse 0E3A                              ttemp5 002F  
                            ttemp6 0032                              ttemp7 0036  
                            status 0FD8                              wtemp8 002F  
                  __initialization 0EFE                       __end_of_main 0CD0  
                     __end_of_itoa 0980                         _Initialize 0AF0  
                           ??_main 0027                             ??_itoa 001B  
                    __activetblptr 0002                             ?_H_ISR 0001  
                output_total_dis@i 01C8                             _ADRESH 0FC4  
                           _ADRESL 0FC3                             _CCPR1L 0FBE  
                 ___awdiv@dividend 000F                             ?_putch 0001  
                           i1l1601 0E7C                             i1l1603 0E80  
                           i1l1583 0D34                             i1l1591 0E3A  
                           i1l1585 0D46                             i1l1593 0E3E  
                           i1l1761 003C                             i1l1587 0D66  
                           i1l1595 0E56                             i1l1763 004A  
                           i1l1589 0D78                             i1l1765 0050  
                           i1l1599 0E6C                             i1l1759 002E  
                           i2l1771 0B92                             i2l1781 0BD0  
                           i2l1773 0BA4                             i2l1791 0BF8  
                           i2l1783 0BD4                             i2l1775 0BB0  
                           i2l1793 0BFC                             i2l1785 0BE4  
                           i2l1777 0BB2                             i2l1769 0B84  
                           i2l1787 0BE8                             i2l1779 0BC2  
                           i2l1789 0BEA                          ??i1_putch 0007  
                           _Lo_ISR 0018             output_total_dis@output 0100  
                           ___wmul 0F30                          ??___awdiv 0013  
                        ??___awmod 0013                _current_servo_angle 0027  
                           _buffer 0264                  keyboard_input@str 000F  
                ?_output_total_dis 0021                             clear_0 0F04  
                           clear_1 0F10                             clear_2 0F1C  
                 ___awdiv@quotient 0015                    ___awmod@divisor 0011  
                           isa$std 0001                    ___awmod@counter 0013  
                           _strcpy 0D94                             _strlen 0EC8  
               ??_output_total_dis 0025                       __mediumconst 0000  
                           tblptrh 0FF7                             tblptrl 0FF6  
                           tblptru 0FF8                          ??_reverse 0013  
                       __accesstop 0080            __end_of__initialization 0F22  
                    ___rparam_used 0001                      __end_of_H_ISR 0C02  
                __end_of_GetString 0C6C                     __pcstackCOMRAM 0001  
                      i1putch@data 0007                        ?_Initialize 0001  
                    __end_of_putch 0D32                            ??_H_ISR 0003  
                    ??_MyusartRead 0008               output_total_dis@step 0023  
                          ??_putch 000F                         __pbssBANK2 0200  
                       __pbssBANK3 0300                            ?_Lo_ISR 0001  
                          ?___wmul 000F        ??_variable_register_changed 0003  
                          ?_strcpy 000F                            ?_strlen 000F  
              get_StepLength@i_945 01CA                get_StepLength@input 01CC  
                          i1u83_20 0D46                            i1u83_21 0D42  
                          i1u84_20 0D58                            i1u84_21 0D54  
                          i1u85_20 0D66                            i1u85_21 0D62  
                          i1u86_20 0D78                            i1u86_21 0D74  
                          i1u87_20 0D8E                            i1u87_21 0D8A  
                          i1u88_20 0E56                            i1u88_21 0E52  
                          i1u89_20 0E68                            i1u89_21 0E64  
                       _btn_interr 002D                       ?_ClearBuffer 0001  
              __end_of_MyusartRead 0E88                            i1_putch 0D32  
                          __Hparam 0000                            __Lparam 0000  
                          ___awdiv 0980                            ___awmod 0A42  
                     __psmallconst 0600                            __pcinit 0EFE  
                          __ramtop 0600                            __ptext0 0C6C  
                          __ptext1 07A4                            __ptext2 08A4  
                          __ptext3 0DE8                            __ptext4 0A42  
                          __ptext5 0980                            __ptext6 0F56  
                          __ptext7 0626                            __ptext8 0EC8  
                          __ptext9 0CD0                          _T2CONbits 0FCA  
                 ___awmod@dividend 000F                            _reverse 0DE8  
        _variable_register_changed 0F58                            main@num 00E4  
                          main@str 0080                     __pintcode_body 0B82  
             end_of_initialization 0F22                      __Lmediumconst 0000  
                          int_func 0B82                        reverse@last 0011  
                        _RCSTAbits 0FAB                            postinc0 0FEE  
                          postinc2 0FDE                            strcpy@d 0015  
                          strlen@a 0011                            strlen@s 000F  
                        _TRISAbits 0F92                          _TRISCbits 0F94  
                      _MyusartRead 0E3A                        _CCP1CONbits 0FBD  
                        _TXSTAbits 0FAC                     __end_of_Lo_ISR 006C  
                        _GetString 0C02                       ??_Initialize 000F  
                   __end_of___wmul 0F56                        _BAUDCONbits 0FB8  
                   __end_of_strcpy 0DE8                     __end_of_strlen 0EFE  
              start_initialization 0EFE              output_total_dis@F3162 0300  
            output_total_dis@F3159 0200                       ClearBuffer@i 000F  
               __end_of_Initialize 0B82              output_total_dis@i_957 01CA  
                         ??_Lo_ISR 000A                           ??___wmul 0013  
                       ?_GetString 0017                     _keyboard_input 0F56  
                         ??_strcpy 0013                           ??_strlen 0011  
                      __pbssCOMRAM 0027                      __pcstackBANK0 0080  
                    __pcstackBANK1 0100                output_total_dis@num 0021  
              output_total_dis@tmp 0164                           ?i1_putch 0001  
                   _button_pressed 0F5A                          __pintcode 0008  
                   _get_StepLength 0626                           ?___awdiv 000F  
                         ?___awmod 000F             __end_of_keyboard_input 0F58  
                      __pintcodelo 0018                         H_ISR@value 0005  
                      __smallconst 0600                           ?_reverse 000F  
                 _output_total_dis 07A4             __end_of_button_pressed 0F5C  
                   ___wmul@product 0013                           _IPR1bits 0F9F  
                         _PIE1bits 0F9D                           i1u101_20 003C  
                         i1u101_21 0038                           i1u102_20 004A  
                         i1u102_21 0046                         reverse@tmp 0013  
                         i2u103_40 0B92                           i2u103_41 0B8E  
                         i2u104_40 0BD0                           i2u104_41 0BCC  
                         i2u105_40 0BF8                           i2u105_41 0BF4  
                         i2u108_47 0BB8                           i2u109_47 0BDA  
           __end_of_get_StepLength 07A4                           _PIR1bits 0F9E  
                      _buffer_size 002B  __end_of_variable_register_changed 0F5A  
                         _RCONbits 0FD0                        ??_GetString 0019  
                  ?_keyboard_input 000F                         _ADCON0bits 0FC2  
                       _ADCON1bits 0FC1                         _ADCON2bits 0FC0  
                ___wmul@multiplier 000F                       ?_MyusartRead 0001  
                  get_StepLength@i 01C8                    ?_button_pressed 0001  
                         __Hrparam 0000                    ?_get_StepLength 001A  
                         __Lrparam 0000                           __ptext10 0F30  
                         __ptext11 0C02                           __ptext20 0F5A  
                         __ptext12 0D94                           __ptext13 0E88  
                         __ptext14 0AF0                           __ptext16 0E3A  
                         __ptext17 0D32                           __ptext19 0F58  
                     GetString@str 0017                         strcpy@dest 000F  
   variable_register_changed@value 0001                           isa$xinst 0000  
                         int$flags 002E                          putch@data 000F  
                       _INTCONbits 0FF2                           itoa@sign 001D  
                    ??_ClearBuffer 000F                           intlevel1 0000  
                         intlevel2 0000                       reverse@first 000F  
                        strcpy@src 0011                         _OSCCONbits 0FD3  
         __end_of_output_total_dis 08A4                __end_of_ClearBuffer 0EC8  
                 ??_keyboard_input 0010  
